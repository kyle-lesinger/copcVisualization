{
  "version": 3,
  "sources": ["../../@luma.gl/webgl/src/adapter/webgl-device.ts", "../../@luma.gl/core/src/index.ts", "../../@luma.gl/core/src/adapter/luma.ts", "../../@luma.gl/core/src/adapter/device.ts", "../../@luma.gl/core/src/utils/stats-manager.ts", "../../@probe.gl/stats/src/index.ts", "../../@probe.gl/stats/src/lib/stats.ts", "../../@probe.gl/stats/src/lib/stat.ts", "../../@probe.gl/stats/src/utils/hi-res-timestamp.ts", "../../@luma.gl/core/src/utils/log.ts", "../../@probe.gl/log/src/index.ts", "../../@probe.gl/log/src/log.ts", "../../@probe.gl/env/src/index.ts", "../../@probe.gl/env/src/lib/globals.ts", "../../@probe.gl/env/src/lib/is-browser.ts", "../../@probe.gl/env/src/lib/is-electron.ts", "../../@probe.gl/env/src/lib/get-browser.ts", "../../@probe.gl/env/src/utils/assert.ts", "../../@probe.gl/log/src/utils/local-storage.ts", "../../@probe.gl/log/src/utils/formatters.ts", "../../@probe.gl/log/src/utils/color.ts", "../../@probe.gl/log/src/utils/autobind.ts", "../../@probe.gl/log/src/utils/assert.ts", "../../@probe.gl/log/src/utils/hi-res-timestamp.ts", "../../@probe.gl/log/src/init.ts", "../../@luma.gl/core/src/utils/uid.ts", "../../@luma.gl/core/src/adapter/resources/buffer.ts", "../../@luma.gl/core/src/adapter/resources/resource.ts", "../../@luma.gl/core/src/shadertypes/vertex-arrays/decode-vertex-format.ts", "../../@luma.gl/core/src/shadertypes/data-types/decode-data-types.ts", "../../@luma.gl/core/src/shadertypes/textures/texture-format-decoder.ts", "../../@luma.gl/core/src/shadertypes/textures/texture-format-table.ts", "../../@luma.gl/core/src/image-utils/image-types.ts", "../../@luma.gl/core/src/adapter/adapter.ts", "../../@luma.gl/core/src/adapter/canvas-context.ts", "../../@luma.gl/core/src/utils/promise-utils.ts", "../../@luma.gl/core/src/adapter/resources/texture.ts", "../../@luma.gl/core/src/adapter/resources/sampler.ts", "../../@luma.gl/core/src/adapter/resources/texture-view.ts", "../../@luma.gl/core/src/adapter/resources/external-texture.ts", "../../@luma.gl/core/src/adapter/resources/shader.ts", "../../@luma.gl/core/src/adapter-utils/format-compiler-log.ts", "../../@luma.gl/core/src/adapter/resources/framebuffer.ts", "../../@luma.gl/core/src/adapter/resources/render-pipeline.ts", "../../@luma.gl/core/src/adapter/resources/render-pass.ts", "../../@luma.gl/core/src/adapter/resources/compute-pipeline.ts", "../../@luma.gl/core/src/adapter/resources/compute-pass.ts", "../../@luma.gl/core/src/adapter/resources/command-encoder.ts", "../../@luma.gl/core/src/adapter/resources/command-buffer.ts", "../../@luma.gl/core/src/adapter/resources/vertex-array.ts", "../../@luma.gl/core/src/adapter-utils/get-attribute-from-layouts.ts", "../../@luma.gl/core/src/shadertypes/data-types/decode-shader-types.ts", "../../@luma.gl/core/src/adapter/resources/transform-feedback.ts", "../../@luma.gl/core/src/adapter/resources/query-set.ts", "../../@luma.gl/core/src/adapter/resources/pipeline-layout.ts", "../../@luma.gl/core/src/portable/uniform-buffer-layout.ts", "../../@luma.gl/core/src/utils/array-utils-flat.ts", "../../@luma.gl/core/src/utils/is-array.ts", "../../@luma.gl/core/src/portable/uniform-block.ts", "../../@luma.gl/core/src/utils/array-equal.ts", "../../@luma.gl/core/src/portable/uniform-store.ts", "../../@luma.gl/core/src/shadertypes/textures/pixel-utils.ts", "../../@luma.gl/webgl/src/context/state-tracker/webgl-state-tracker.ts", "../../@luma.gl/webgl/src/context/parameters/unified-parameter-api.ts", "../../@luma.gl/webgl/src/context/parameters/webgl-parameter-tables.ts", "../../@luma.gl/constants/src/index.ts", "../../@luma.gl/constants/src/webgl-constants.ts", "../../@luma.gl/webgl/src/context/state-tracker/deep-array-equal.ts", "../../@luma.gl/webgl/src/context/helpers/create-browser-context.ts", "../../@luma.gl/webgl/src/adapter/device-helpers/webgl-device-info.ts", "../../@luma.gl/webgl/src/context/helpers/webgl-extensions.ts", "../../@luma.gl/webgl/src/adapter/device-helpers/webgl-device-features.ts", "../../@luma.gl/webgl/src/adapter/converters/webgl-texture-table.ts", "../../@luma.gl/webgl/src/adapter/converters/webgl-vertex-formats.ts", "../../@luma.gl/webgl/src/adapter/device-helpers/webgl-device-limits.ts", "../../@luma.gl/webgl/src/adapter/webgl-canvas-context.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-framebuffer.ts", "../../@luma.gl/webgl/src/context/debug/spector.ts", "../../@luma.gl/webgl/src/utils/load-script.ts", "../../@luma.gl/webgl/src/context/debug/webgl-developer-tools.ts", "../../@luma.gl/webgl/src/utils/uid.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-buffer.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-shader.ts", "../../@luma.gl/webgl/src/adapter/helpers/parse-shader-compiler-log.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-sampler.ts", "../../@luma.gl/webgl/src/adapter/converters/sampler-parameters.ts", "../../@luma.gl/webgl/src/adapter/converters/device-parameters.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-texture.ts", "../../@luma.gl/webgl/src/context/state-tracker/with-parameters.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-texture-view.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-render-pipeline.ts", "../../@luma.gl/webgl/src/adapter/helpers/get-shader-layout-from-glsl.ts", "../../@luma.gl/webgl/src/adapter/converters/webgl-shadertypes.ts", "../../@luma.gl/webgl/src/adapter/helpers/set-uniform.ts", "../../@luma.gl/webgl/src/adapter/helpers/webgl-topology-utils.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-command-encoder.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-command-buffer.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-render-pass.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-vertex-array.ts", "../../@luma.gl/webgl/src/utils/fill-array.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-transform-feedback.ts", "../../@luma.gl/webgl/src/index.ts", "../../@luma.gl/webgl/src/adapter/webgl-adapter.ts", "../../@luma.gl/webgl/src/context/polyfills/polyfill-webgl1-extensions.ts", "../../@luma.gl/webgl/src/adapter/resources/webgl-query-set.ts", "../../@luma.gl/webgl/src/adapter/helpers/webgl-texture-utils.ts", "../../@luma.gl/webgl/src/adapter/helpers/format-utils.ts", "../../@luma.gl/webgl/src/adapter/converters/shader-formats.ts"],
  "sourcesContent": ["// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '@math.gl/types';\nimport type {\n  DeviceProps,\n  DeviceInfo,\n  DeviceTextureFormatCapabilities,\n  CanvasContextProps,\n  Buffer,\n  Texture,\n  Framebuffer,\n  VertexArray,\n  VertexArrayProps,\n  BufferProps,\n  ShaderProps,\n  // Sampler,\n  SamplerProps,\n  TextureProps,\n  ExternalTexture,\n  ExternalTextureProps,\n  FramebufferProps,\n  // RenderPipeline,\n  RenderPipelineProps,\n  ComputePipeline,\n  ComputePipelineProps,\n  // CommandEncoder,\n  CommandEncoderProps,\n  TransformFeedbackProps,\n  QuerySetProps,\n  Resource,\n  VertexFormat\n} from '@luma.gl/core';\nimport {Device, CanvasContext, log} from '@luma.gl/core';\nimport type {GLExtensions} from '@luma.gl/constants';\nimport {WebGLStateTracker} from '../context/state-tracker/webgl-state-tracker';\nimport {createBrowserContext} from '../context/helpers/create-browser-context';\nimport {getDeviceInfo} from './device-helpers/webgl-device-info';\nimport {WebGLDeviceFeatures} from './device-helpers/webgl-device-features';\nimport {WebGLDeviceLimits} from './device-helpers/webgl-device-limits';\nimport {WebGLCanvasContext} from './webgl-canvas-context';\nimport type {Spector} from '../context/debug/spector-types';\nimport {initializeSpectorJS} from '../context/debug/spector';\nimport {makeDebugContext} from '../context/debug/webgl-developer-tools';\nimport {getTextureFormatCapabilitiesWebGL} from './converters/webgl-texture-table';\nimport {uid} from '../utils/uid';\n\nimport {WEBGLBuffer} from './resources/webgl-buffer';\nimport {WEBGLShader} from './resources/webgl-shader';\nimport {WEBGLSampler} from './resources/webgl-sampler';\nimport {WEBGLTexture} from './resources/webgl-texture';\nimport {WEBGLFramebuffer} from './resources/webgl-framebuffer';\nimport {WEBGLRenderPipeline} from './resources/webgl-render-pipeline';\nimport {WEBGLCommandEncoder} from './resources/webgl-command-encoder';\nimport {WEBGLCommandBuffer} from './resources/webgl-command-buffer';\nimport {WEBGLVertexArray} from './resources/webgl-vertex-array';\nimport {WEBGLTransformFeedback} from './resources/webgl-transform-feedback';\nimport {WEBGLQuerySet} from './resources/webgl-query-set';\n\nimport {readPixelsToArray, readPixelsToBuffer} from './helpers/webgl-texture-utils';\nimport {\n  setGLParameters,\n  getGLParameters,\n  resetGLParameters\n} from '../context/parameters/unified-parameter-api';\nimport {withGLParameters} from '../context/state-tracker/with-parameters';\nimport {getWebGLExtension} from '../context/helpers/webgl-extensions';\n\n/** WebGPU style Device API for a WebGL context */\nexport class WebGLDevice extends Device {\n  // Public `Device` API\n\n  /** type of this device */\n  readonly type = 'webgl';\n\n  // Use the ! assertion to handle the case where _reuseDevices causes the constructor to return early\n  /** The underlying WebGL context */\n  readonly handle!: WebGL2RenderingContext;\n  features!: WebGLDeviceFeatures;\n  limits!: WebGLDeviceLimits;\n  readonly info!: DeviceInfo;\n  readonly canvasContext!: WebGLCanvasContext;\n\n  readonly preferredColorFormat = 'rgba8unorm';\n  readonly preferredDepthFormat = 'depth24plus';\n\n  commandEncoder!: WEBGLCommandEncoder;\n\n  readonly lost: Promise<{reason: 'destroyed'; message: string}>;\n\n  private _resolveContextLost?: (value: {reason: 'destroyed'; message: string}) => void;\n\n  /** WebGL2 context. */\n  readonly gl!: WebGL2RenderingContext;\n\n  /** Store constants */\n  // @ts-ignore TODO fix\n  _constants: (TypedArray | null)[];\n\n  /** State used by luma.gl classes - TODO - not used? */\n  readonly _extensions: GLExtensions = {};\n  _polyfilled: boolean = false;\n\n  /** Instance of Spector.js (if initialized) */\n  spectorJS!: Spector | null;\n\n  //\n  // Public API\n  //\n\n  override get [Symbol.toStringTag](): string {\n    return 'WebGLDevice';\n  }\n\n  override toString(): string {\n    return `${this[Symbol.toStringTag]}(${this.id})`;\n  }\n\n  override isVertexFormatSupported(format: VertexFormat): boolean {\n    switch (format) {\n      case 'unorm8x4-bgra':\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  constructor(props: DeviceProps) {\n    super({...props, id: props.id || uid('webgl-device')});\n\n    const canvasContextProps = Device._getCanvasContextProps(props)!;\n\n    // WebGL requires a canvas to be created before creating the context\n    if (!canvasContextProps) {\n      throw new Error('WebGLDevice requires props.createCanvasContext to be set');\n    }\n\n    // Check if the WebGL context is already associated with a device\n    // Note that this can be avoided in webgl2adapter.create() if\n    // DeviceProps._reuseDevices is set.\n    // @ts-expect-error device is attached to context\n    let device: WebGLDevice | undefined = canvasContextProps.canvas?.gl?.device;\n    if (device) {\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n\n    // Create and instrument context\n    this.canvasContext = new WebGLCanvasContext(this, canvasContextProps);\n\n    this.lost = new Promise<{reason: 'destroyed'; message: string}>(resolve => {\n      this._resolveContextLost = resolve;\n    });\n\n    const webglContextAttributes: WebGLContextAttributes = {...props.webgl};\n    // Copy props from CanvasContextProps\n    if (canvasContextProps.alphaMode === 'premultiplied') {\n      webglContextAttributes.premultipliedAlpha = true;\n    }\n    if (props.powerPreference !== undefined) {\n      webglContextAttributes.powerPreference = props.powerPreference;\n    }\n\n    // Check if we should attach to an externally created context or create a new context\n    const externalGLContext = this.props._handle as WebGL2RenderingContext | null;\n\n    const gl =\n      externalGLContext ||\n      createBrowserContext(\n        this.canvasContext.canvas,\n        {\n          onContextLost: (event: Event) =>\n            this._resolveContextLost?.({\n              reason: 'destroyed',\n              message: 'Entered sleep mode, or too many apps or browser tabs are using the GPU.'\n            }),\n          // eslint-disable-next-line no-console\n          onContextRestored: (event: Event) => console.log('WebGL context restored')\n        },\n        webglContextAttributes\n      );\n\n    if (!gl) {\n      throw new Error('WebGL context creation failed');\n    }\n\n    // Note that the browser will only create one WebGL context per canvas.\n    // This means that a newly created gl context may already have a device attached to it.\n    // @ts-expect-error luma.gl stores a device reference on the context.\n    device = gl.device;\n    if (device) {\n      if (props._reuseDevices) {\n        log.log(\n          1,\n          `Not creating a new Device, instead returning a reference to Device ${device.id} already attached to WebGL context`,\n          device\n        )();\n        device._reused = true;\n        return device;\n      }\n      throw new Error(`WebGL context already attached to device ${device.id}`);\n    }\n\n    this.handle = gl;\n    this.gl = gl;\n\n    // Add spector debug instrumentation to context\n    // We need to trust spector integration to decide if spector should be initialized\n    // We also run spector instrumentation first, otherwise spector can clobber luma instrumentation.\n    this.spectorJS = initializeSpectorJS({...this.props, gl: this.handle});\n\n    // Instrument context\n    (this.gl as any).device = this; // Update GL context: Link webgl context back to device\n    // TODO - remove, this is only used to detect debug contexts.\n    (this.gl as any)._version = 2; // Update GL context: Store WebGL version field on gl context (HACK to identify debug contexts)\n\n    // initialize luma Device fields\n    this.info = getDeviceInfo(this.gl, this._extensions);\n    this.limits = new WebGLDeviceLimits(this.gl);\n    this.features = new WebGLDeviceFeatures(\n      this.gl,\n      this._extensions,\n      this.props._disabledFeatures\n    );\n    if (this.props._initializeFeatures) {\n      this.features.initializeFeatures();\n    }\n\n    // Install context state tracking\n    const glState = new WebGLStateTracker(this.gl, {\n      log: (...args: any[]) => log.log(1, ...args)()\n    });\n    glState.trackState(this.gl, {copyState: false});\n\n    // DEBUG contexts: Add luma debug instrumentation to the context, force log level to at least 1\n    const debugWebGL = props.debugWebGL || props.debug;\n    const traceWebGL = props.debugWebGL;\n    if (debugWebGL) {\n      this.gl = makeDebugContext(this.gl, {debugWebGL, traceWebGL});\n      log.warn('WebGL debug mode activated. Performance reduced.')();\n      if (props.debugWebGL) {\n        log.level = Math.max(log.level, 1);\n      }\n    }\n\n    this.commandEncoder = new WEBGLCommandEncoder(this, {id: `${this}-command-encoder`});\n  }\n\n  /**\n   * Destroys the device\n   *\n   * @note \"Detaches\" from the WebGL context unless _reuseDevices is true.\n   *\n   * @note The underlying WebGL context is not immediately destroyed,\n   * but may be destroyed later through normal JavaScript garbage collection.\n   * This is a fundamental limitation since WebGL does not offer any\n   * browser API for destroying WebGL contexts.\n   */\n  destroy(): void {\n    // Note that deck.gl (especially in React strict mode) depends on being able\n    // to asynchronously create a Device against the same canvas (i.e. WebGL context)\n    // multiple times and getting the same device back. Since deck.gl is not aware\n    // of this sharing, it might call destroy() multiple times on the same device.\n    // Therefore we must do nothing in destroy() if props._reuseDevices is true\n    if (!this.props._reuseDevices && !this._reused) {\n      // Delete the reference to the device that we store on the WebGL context\n      delete (this.gl as any).device;\n    }\n  }\n\n  get isLost(): boolean {\n    return this.gl.isContextLost();\n  }\n\n  // IMPLEMENTATION OF ABSTRACT DEVICE\n\n  getTextureByteAlignment(): number {\n    return 4;\n  }\n\n  createCanvasContext(props?: CanvasContextProps): CanvasContext {\n    throw new Error('WebGL only supports a single canvas');\n  }\n\n  createBuffer(props: BufferProps | ArrayBuffer | ArrayBufferView): WEBGLBuffer {\n    const newProps = this._normalizeBufferProps(props);\n    return new WEBGLBuffer(this, newProps);\n  }\n\n  createTexture(props: TextureProps): WEBGLTexture {\n    return new WEBGLTexture(this, props);\n  }\n\n  createExternalTexture(props: ExternalTextureProps): ExternalTexture {\n    throw new Error('createExternalTexture() not implemented'); // return new Program(props);\n  }\n\n  createSampler(props: SamplerProps): WEBGLSampler {\n    return new WEBGLSampler(this, props);\n  }\n\n  createShader(props: ShaderProps): WEBGLShader {\n    return new WEBGLShader(this, props);\n  }\n\n  createFramebuffer(props: FramebufferProps): WEBGLFramebuffer {\n    return new WEBGLFramebuffer(this, props);\n  }\n\n  createVertexArray(props: VertexArrayProps): VertexArray {\n    return new WEBGLVertexArray(this, props);\n  }\n\n  createTransformFeedback(props: TransformFeedbackProps): WEBGLTransformFeedback {\n    return new WEBGLTransformFeedback(this, props);\n  }\n\n  createQuerySet(props: QuerySetProps): WEBGLQuerySet {\n    return new WEBGLQuerySet(this, props);\n  }\n\n  createRenderPipeline(props: RenderPipelineProps): WEBGLRenderPipeline {\n    return new WEBGLRenderPipeline(this, props);\n  }\n\n  createComputePipeline(props?: ComputePipelineProps): ComputePipeline {\n    throw new Error('ComputePipeline not supported in WebGL');\n  }\n\n  override createCommandEncoder(props: CommandEncoderProps = {}): WEBGLCommandEncoder {\n    return new WEBGLCommandEncoder(this, props);\n  }\n\n  /**\n   * Offscreen Canvas Support: Commit the frame\n   * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit\n   * Chrome's offscreen canvas does not require gl.commit\n   */\n  submit(commandBuffer: WEBGLCommandBuffer): void {\n    if (!commandBuffer) {\n      commandBuffer = this.commandEncoder.finish();\n      this.commandEncoder.destroy();\n      this.commandEncoder = this.createCommandEncoder({id: `${this.id}-default-encoder`});\n    }\n\n    commandBuffer._executeCommands();\n  }\n\n  //\n  // TEMPORARY HACKS - will be removed in v9.1\n  //\n\n  /** @deprecated - should use command encoder */\n  override readPixelsToArrayWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      sourceAttachment?: number;\n      target?: Uint8Array | Uint16Array | Float32Array;\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Uint8Array | Uint16Array | Float32Array {\n    return readPixelsToArray(source, options);\n  }\n\n  /** @deprecated - should use command encoder */\n  override readPixelsToBufferWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      target?: Buffer; // A new Buffer object is created when not provided.\n      targetByteOffset?: number; // byte offset in buffer object\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Buffer {\n    return readPixelsToBuffer(source, options);\n  }\n\n  override setParametersWebGL(parameters: any): void {\n    setGLParameters(this.gl, parameters);\n  }\n\n  override getParametersWebGL(parameters: any): any {\n    return getGLParameters(this.gl, parameters);\n  }\n\n  override withParametersWebGL(parameters: any, func: any): any {\n    return withGLParameters(this.gl, parameters, func);\n  }\n\n  override resetWebGL(): void {\n    log.warn('WebGLDevice.resetWebGL is deprecated, use only for debugging')();\n    resetGLParameters(this.gl);\n  }\n\n  override _getDeviceSpecificTextureFormatCapabilities(\n    capabilities: DeviceTextureFormatCapabilities\n  ): DeviceTextureFormatCapabilities {\n    return getTextureFormatCapabilitiesWebGL(this.gl, capabilities, this._extensions);\n  }\n\n  //\n  // WebGL-only API (not part of `Device` API)\n  //\n\n  /**\n   * Triggers device (or WebGL context) loss.\n   * @note primarily intended for testing how application reacts to device loss\n   */\n  override loseDevice(): boolean {\n    let deviceLossTriggered = false;\n    const extensions = this.getExtension('WEBGL_lose_context');\n    const ext = extensions.WEBGL_lose_context;\n    if (ext) {\n      deviceLossTriggered = true;\n      ext.loseContext();\n      // ext.loseContext should trigger context loss callback but the platform may not do this, so do it explicitly\n    }\n    this._resolveContextLost?.({\n      reason: 'destroyed',\n      message: 'Application triggered context loss'\n    });\n    return deviceLossTriggered;\n  }\n\n  /** Save current WebGL context state onto an internal stack */\n  pushState(): void {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.push();\n  }\n\n  /** Restores previously saved context state */\n  popState(): void {\n    const webglState = WebGLStateTracker.get(this.gl);\n    webglState.pop();\n  }\n\n  /**\n   * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant\n   * Be aware that there are some duplicates especially for constants that are 0,\n   * so this isn't guaranteed to return the right key in all cases.\n   */\n  getGLKey(value: unknown, options?: {emptyIfUnknown?: boolean}): string {\n    const number = Number(value);\n    for (const key in this.gl) {\n      // @ts-ignore expect-error depends on settings\n      if (this.gl[key] === number) {\n        return `GL.${key}`;\n      }\n    }\n    // No constant found. Stringify the value and return it.\n    return options?.emptyIfUnknown ? '' : String(value);\n  }\n\n  /**\n   * Returns a map with any GL.<KEY> constants mapped to strings, both for keys and values\n   */\n  getGLKeys(glParameters: Record<number, unknown>): Record<string, string> {\n    const opts = {emptyIfUnknown: true};\n    return Object.entries(glParameters).reduce<Record<string, string>>((keys, [key, value]) => {\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      keys[`${key}:${this.getGLKey(key, opts)}`] = `${value}:${this.getGLKey(value, opts)}`;\n      return keys;\n    }, {});\n  }\n\n  /**\n   * Set a constant value for a location. Disabled attributes at that location will read from this value\n   * @note WebGL constants are stored globally on the WebGL context, not the VertexArray\n   * so they need to be updated before every render\n   * @todo - remember/cache values to avoid setting them unnecessarily?\n   */\n  setConstantAttributeWebGL(location: number, constant: TypedArray): void {\n    const maxVertexAttributes = this.limits.maxVertexAttributes;\n    this._constants = this._constants || new Array(maxVertexAttributes).fill(null);\n    const currentConstant = this._constants[location];\n    if (currentConstant && compareConstantArrayValues(currentConstant, constant)) {\n      log.info(\n        1,\n        `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`\n      )();\n    }\n    this._constants[location] = constant;\n\n    switch (constant.constructor) {\n      case Float32Array:\n        setConstantFloatArray(this, location, constant as Float32Array);\n        break;\n      case Int32Array:\n        setConstantIntArray(this, location, constant as Int32Array);\n        break;\n      case Uint32Array:\n        setConstantUintArray(this, location, constant as Uint32Array);\n        break;\n      default:\n        throw new Error('constant');\n    }\n  }\n\n  /** Ensure extensions are only requested once */\n  getExtension(name: keyof GLExtensions): GLExtensions {\n    getWebGLExtension(this.gl, name, this._extensions);\n    return this._extensions;\n  }\n\n  // INTERNAL SUPPORT METHODS FOR WEBGL RESOURCES\n\n  /**\n   * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension\n   * luma.gl ids and props can be inspected\n   */\n  _setWebGLDebugMetadata(\n    handle: unknown,\n    resource: Resource<any>,\n    options: {spector: Record<string, unknown>}\n  ): void {\n    // @ts-expect-error\n    handle.luma = resource;\n\n    const spectorMetadata = {props: options.spector, id: options.spector['id']};\n    // @ts-expect-error\n    // eslint-disable-next-line camelcase\n    handle.__SPECTOR_Metadata = spectorMetadata;\n  }\n}\n\n/** Set constant float array attribute */\nfunction setConstantFloatArray(device: WebGLDevice, location: number, array: Float32Array): void {\n  switch (array.length) {\n    case 1:\n      device.gl.vertexAttrib1fv(location, array);\n      break;\n    case 2:\n      device.gl.vertexAttrib2fv(location, array);\n      break;\n    case 3:\n      device.gl.vertexAttrib3fv(location, array);\n      break;\n    case 4:\n      device.gl.vertexAttrib4fv(location, array);\n      break;\n    default:\n    // assert(false);\n  }\n}\n\n/** Set constant signed int array attribute */\nfunction setConstantIntArray(device: WebGLDevice, location: number, array: Int32Array): void {\n  device.gl.vertexAttribI4iv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1iv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2iv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3iv(location, array);\n  //     break;\n  //   case 4:\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n\n/** Set constant unsigned int array attribute */\nfunction setConstantUintArray(device: WebGLDevice, location: number, array: Uint32Array) {\n  device.gl.vertexAttribI4uiv(location, array);\n  // TODO - not clear if we need to use the special forms, more testing needed\n  // switch (array.length) {\n  //   case 1:\n  //     gl.vertexAttribI1uiv(location, array);\n  //     break;\n  //   case 2:\n  //     gl.vertexAttribI2uiv(location, array);\n  //     break;\n  //   case 3:\n  //     gl.vertexAttribI3uiv(location, array);\n  //     break;\n  //   case 4:\n  //     gl.vertexAttribI4uiv(location, array);\n  //     break;\n  //   default:\n  //     assert(false);\n  // }\n}\n\n/**\n * Compares contents of two typed arrays\n * @todo max length?\n */\nfunction compareConstantArrayValues(v1: TypedArray, v2: TypedArray): boolean {\n  if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n    return false;\n  }\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] !== v2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// MAIN API ACCESS POINT\nexport type {AttachDeviceProps, CreateDeviceProps} from './adapter/luma';\nexport {luma} from './adapter/luma';\n\n// ADAPTER (DEVICE AND GPU RESOURCE INTERFACES)\nexport {Adapter} from './adapter/adapter';\n\nexport type {\n  DeviceProps,\n  DeviceInfo,\n  DeviceFeature,\n  DeviceTextureFormatCapabilities\n} from './adapter/device';\nexport {Device, DeviceFeatures, DeviceLimits} from './adapter/device';\n\nexport type {CanvasContextProps} from './adapter/canvas-context';\nexport {CanvasContext} from './adapter/canvas-context';\n\n// GPU RESOURCES\nexport {Resource, type ResourceProps} from './adapter/resources/resource';\n\nexport {Buffer, type BufferProps, type BufferMapCallback} from './adapter/resources/buffer';\n\nexport {Texture, type TextureProps} from './adapter/resources/texture';\n\nexport {TextureView, type TextureViewProps} from './adapter/resources/texture-view';\n\nexport type {ExternalTextureProps} from './adapter/resources/external-texture';\nexport {ExternalTexture} from './adapter/resources/external-texture';\n\nexport type {ShaderProps} from './adapter/resources/shader';\nexport {Shader} from './adapter/resources/shader';\n\nexport type {SamplerProps, SamplerParameters} from './adapter/resources/sampler';\nexport {Sampler} from './adapter/resources/sampler';\n\nexport type {FramebufferProps} from './adapter/resources/framebuffer';\nexport {Framebuffer} from './adapter/resources/framebuffer';\n\nexport type {RenderPipelineProps} from './adapter/resources/render-pipeline';\nexport {RenderPipeline} from './adapter/resources/render-pipeline';\n\nexport type {RenderPassProps} from './adapter/resources/render-pass';\nexport {RenderPass} from './adapter/resources/render-pass';\n\nexport type {ComputePipelineProps} from './adapter/resources/compute-pipeline';\nexport {ComputePipeline} from './adapter/resources/compute-pipeline';\n\nexport type {ComputePassProps} from './adapter/resources/compute-pass';\nexport {ComputePass} from './adapter/resources/compute-pass';\n\nexport type {CommandEncoderProps} from './adapter/resources/command-encoder';\nexport {CommandEncoder} from './adapter/resources/command-encoder';\n\nexport type {CommandBufferProps} from './adapter/resources/command-buffer';\nexport {CommandBuffer} from './adapter/resources/command-buffer';\n\nexport type {VertexArrayProps} from './adapter/resources/vertex-array';\nexport {VertexArray} from './adapter/resources/vertex-array';\n\nexport type {TransformFeedbackProps, BufferRange} from './adapter/resources/transform-feedback';\nexport {TransformFeedback} from './adapter/resources/transform-feedback';\n\nexport type {QuerySetProps} from './adapter/resources/query-set';\nexport {QuerySet} from './adapter/resources/query-set';\n\nexport type {PipelineLayoutProps} from './adapter/resources/pipeline-layout';\nexport {PipelineLayout} from './adapter/resources/pipeline-layout';\n\n// PORTABLE API - UNIFORM BUFFERS\nexport {UniformBufferLayout} from './portable/uniform-buffer-layout';\nexport {UniformBlock} from './portable/uniform-block';\nexport {UniformStore} from './portable/uniform-store';\n// TEXTURE TYPES\n\n// API TYPES\nexport type {CompilerMessage} from './adapter/types/compiler-message';\n\nexport type {ExternalImage} from './image-utils/image-types';\n\nexport {\n  type CopyExternalImageOptions,\n  type CopyImageDataOptions\n} from './adapter/resources/texture';\n\nexport type {Parameters, PrimitiveTopology, IndexFormat} from './adapter/types/parameters';\n\nexport type {\n  CullMode,\n  FrontFace,\n  RasterizationParameters,\n  CompareFunction,\n  StencilOperation,\n  DepthStencilParameters,\n  BlendFactor,\n  BlendOperation,\n  ColorParameters,\n  MultisampleParameters,\n  RenderPassParameters,\n  RenderPipelineParameters,\n  PolygonMode,\n  ProvokingVertex\n} from './adapter/types/parameters';\n\nexport type {ColorAttachment, DepthStencilAttachment} from './adapter/types/attachments';\n\nexport type {\n  ShaderLayout,\n  ComputeShaderLayout,\n  AttributeDeclaration,\n  BindingDeclaration,\n  Binding,\n  UniformBufferBindingLayout,\n  StorageBufferBindingLayout,\n  TextureBindingLayout,\n  SamplerBindingLayout,\n  StorageTextureBindingLayout\n} from './adapter/types/shader-layout';\nexport type {BufferLayout, BufferAttributeLayout} from './adapter/types/buffer-layout';\nexport type {\n  // Deprecated, todo\n  AttributeBinding,\n  UniformBinding,\n  UniformBlockBinding,\n  VaryingBinding\n} from './adapter/types/shader-layout';\n\nexport type {UniformValue} from './adapter/types/uniforms';\n\n// TYPED ARRAY TYPES\n\nexport type {\n  NumberArray,\n  TypedArray,\n  TypedArrayConstructor,\n  BigTypedArray,\n  BigTypedArrayConstructor\n} from './types';\n\n// GPU TYPE UTILS - BASIC DATA TYPES\n\nexport {\n  type PrimitiveDataType,\n  type SignedDataType,\n  type NormalizedDataType,\n  type DataTypeInfo,\n  type DataTypeArray,\n  type NormalizedDataTypeArray\n} from './shadertypes/data-types/data-types';\nexport {\n  type AttributeShaderType,\n  type VariableShaderType\n} from './shadertypes/data-types/shader-types';\nexport {\n  getDataTypeInfo,\n  getDataType,\n  getTypedArrayConstructor,\n  getNormalizedDataType\n} from './shadertypes/data-types/decode-data-types';\nexport {\n  getVariableShaderTypeInfo,\n  getAttributeShaderTypeInfo\n} from './shadertypes/data-types/decode-shader-types';\n\n// GPU TYPE UTILS - VERTEX ARRAYs\n\nexport {type VertexFormat} from './shadertypes/vertex-arrays/vertex-formats';\n\nexport {\n  getVertexFormatInfo,\n  getVertexFormatFromAttribute,\n  makeVertexFormat\n} from './shadertypes/vertex-arrays/decode-vertex-format';\n\n// GPU TYPE UTILS - Texture Formats\n\nexport {\n  type TextureFormat,\n  type TextureFormatColor,\n  type TextureFormatDepthStencil,\n  type TextureCompression,\n  type TextureFormatInfo,\n  type TextureFormatCapabilities\n} from './shadertypes/textures/texture-formats';\n\nexport {\n  TextureFormatDecoder,\n  textureFormatDecoder\n} from './shadertypes/textures/texture-format-decoder';\n\nexport {type PixelData, readPixel, writePixel} from './shadertypes/textures/pixel-utils';\n\n// GENERAL EXPORTS - FOR APPLICATIONS\n\nexport type {StatsManager} from './utils/stats-manager'; // TODO - should this be moved to probe.gl?\n\n// ADAPTER UTILS - for implementing Device adapters (@luma.gl/webgl and @luma.gl/webgpu)\n\nexport type {\n  CopyBufferToBufferOptions,\n  CopyBufferToTextureOptions,\n  CopyTextureToBufferOptions,\n  CopyTextureToTextureOptions\n} from './adapter/resources/command-encoder';\n\n// INTERNAL UTILS - for use in other luma.gl modules only\nexport {log} from './utils/log';\nexport {getScratchArray} from './utils/array-utils-flat';\nexport type {AttributeInfo} from './adapter-utils/get-attribute-from-layouts';\nexport {getAttributeInfosFromLayouts} from './adapter-utils/get-attribute-from-layouts';\n\n// TEST EXPORTS\nexport {\n  getTextureFormatDefinition as _getTextureFormatDefinition,\n  getTextureFormatTable as _getTextureFormatTable\n} from './shadertypes/textures/texture-format-table';\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Log} from '@probe.gl/log';\nimport type {DeviceProps} from './device';\nimport {Device} from './device';\nimport {Adapter} from './adapter';\nimport {StatsManager, lumaStats} from '../utils/stats-manager';\nimport {log} from '../utils/log';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var luma: Luma;\n}\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n\nconst ERROR_MESSAGE =\n  'No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.';\n\n/** Properties for creating a new device */\nexport type CreateDeviceProps = {\n  /** Selects the type of device. `best-available` uses webgpu if available, then webgl. */\n  type?: 'webgl' | 'webgpu' | 'null' | 'unknown' | 'best-available';\n  /** List of adapters. Will also search any pre-registered adapters */\n  adapters?: Adapter[];\n  /**\n   * Whether to wait for page to be loaded so that CanvasContext's can access the DOM.\n   * The browser only supports one 'load' event listener so it may be necessary for the application to set this to false to avoid conflicts.\n   */\n  waitForPageLoad?: boolean;\n} & DeviceProps;\n\n/** Properties for attaching an existing WebGL context or WebGPU device to a new luma Device */\nexport type AttachDeviceProps = {\n  /** List of adapters. Will also search any pre-registered adapters */\n  adapters?: Adapter[];\n} & DeviceProps;\n\n/**\n * Entry point to the luma.gl GPU abstraction\n * Register WebGPU and/or WebGL adapters (controls application bundle size)\n * Run-time selection of the first available Device\n */\nexport class Luma {\n  static defaultProps: Required<CreateDeviceProps> = {\n    ...Device.defaultProps,\n    type: 'best-available',\n    adapters: undefined!,\n    waitForPageLoad: true\n  };\n\n  /** Global stats for all devices */\n  readonly stats: StatsManager = lumaStats;\n\n  /**\n   * Global log\n   *\n   * Assign luma.log.level in console to control logging: \\\n   * 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n   * luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n   */\n  readonly log: Log = log;\n\n  /** Version of luma.gl */\n  readonly VERSION: string =\n    // Version detection using build plugin\n    // @ts-expect-error no-undef\n    typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'running from source';\n\n  spector: unknown;\n\n  protected preregisteredAdapters = new Map<string, Adapter>();\n\n  constructor() {\n    if (globalThis.luma) {\n      if (globalThis.luma.VERSION !== this.VERSION) {\n        log.error(`Found luma.gl ${globalThis.luma.VERSION} while initialzing ${this.VERSION}`)();\n        log.error(`'yarn why @luma.gl/core' can help identify the source of the conflict`)();\n        throw new Error(`luma.gl - multiple versions detected: see console log`);\n      }\n\n      log.error('This version of luma.gl has already been initialized')();\n    }\n\n    log.log(1, `${this.VERSION} - ${STARTUP_MESSAGE}`)();\n\n    globalThis.luma = this;\n  }\n\n  /** Creates a device. Asynchronously. */\n  async createDevice(props_: CreateDeviceProps = {}): Promise<Device> {\n    const props: Required<CreateDeviceProps> = {...Luma.defaultProps, ...props_};\n\n    const adapter = this.selectAdapter(props.type, props.adapters);\n    if (!adapter) {\n      throw new Error(ERROR_MESSAGE);\n    }\n\n    // Wait for page to load so that CanvasContext's can access the DOM.\n    if (props.waitForPageLoad) {\n      await adapter.pageLoaded;\n    }\n\n    return await adapter.create(props);\n  }\n\n  /**\n   * Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice).\n   * @param handle Externally created WebGL context or WebGPU device\n   */\n  async attachDevice(handle: unknown, props: AttachDeviceProps): Promise<Device> {\n    const type = this._getTypeFromHandle(handle, props.adapters);\n\n    const adapter = type && this.selectAdapter(type, props.adapters);\n    if (!adapter) {\n      throw new Error(ERROR_MESSAGE);\n    }\n\n    return await adapter?.attach?.(handle, props);\n  }\n\n  /**\n   * Global adapter registration.\n   * @deprecated Use props.adapters instead\n   */\n  registerAdapters(adapters: Adapter[]): void {\n    for (const deviceClass of adapters) {\n      this.preregisteredAdapters.set(deviceClass.type, deviceClass);\n    }\n  }\n\n  /** Get type strings for supported Devices */\n  getSupportedAdapters(adapters: Adapter[] = []): string[] {\n    const adapterMap = this._getAdapterMap(adapters);\n    return Array.from(adapterMap)\n      .map(([, adapter]) => adapter)\n      .filter(adapter => adapter.isSupported?.())\n      .map(adapter => adapter.type);\n  }\n\n  /** Get type strings for best available Device */\n  getBestAvailableAdapterType(adapters: Adapter[] = []): 'webgpu' | 'webgl' | 'null' | null {\n    const KNOWN_ADAPTERS: ('webgpu' | 'webgl' | 'null')[] = ['webgpu', 'webgl', 'null'];\n    const adapterMap = this._getAdapterMap(adapters);\n    for (const type of KNOWN_ADAPTERS) {\n      if (adapterMap.get(type)?.isSupported?.()) {\n        return type;\n      }\n    }\n    return null;\n  }\n\n  /** Select adapter of type from registered adapters */\n  selectAdapter(type: string, adapters: Adapter[] = []): Adapter | null {\n    let selectedType: string | null = type;\n    if (type === 'best-available') {\n      selectedType = this.getBestAvailableAdapterType(adapters);\n    }\n\n    const adapterMap = this._getAdapterMap(adapters);\n    return (selectedType && adapterMap.get(selectedType)) || null;\n  }\n\n  /**\n   * Override `HTMLCanvasContext.getCanvas()` to always create WebGL2 contexts with additional WebGL1 compatibility.\n   * Useful when attaching luma to a context from an external library does not support creating WebGL2 contexts.\n   */\n  enforceWebGL2(enforce: boolean = true, adapters: Adapter[] = []): void {\n    const adapterMap = this._getAdapterMap(adapters);\n    const webgl2Adapter = adapterMap.get('webgl');\n    if (!webgl2Adapter) {\n      log.warn('enforceWebGL2: webgl adapter not found')();\n    }\n    (webgl2Adapter as any)?.enforceWebGL2?.(enforce);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated */\n  setDefaultDeviceProps(props: CreateDeviceProps): void {\n    Object.assign(Luma.defaultProps, props);\n  }\n\n  // HELPERS\n\n  /** Convert a list of adapters to a map */\n  protected _getAdapterMap(adapters: Adapter[] = []): Map<string, Adapter> {\n    const map = new Map(this.preregisteredAdapters);\n    for (const adapter of adapters) {\n      map.set(adapter.type, adapter);\n    }\n    return map;\n  }\n\n  /** Get type of a handle (for attachDevice) */\n  protected _getTypeFromHandle(\n    handle: unknown,\n    adapters: Adapter[] = []\n  ): 'webgpu' | 'webgl' | 'null' | null {\n    // TODO - delegate handle identification to adapters\n\n    // WebGL\n    if (handle instanceof WebGL2RenderingContext) {\n      return 'webgl';\n    }\n\n    if (typeof GPUDevice !== 'undefined' && handle instanceof GPUDevice) {\n      return 'webgpu';\n    }\n\n    // TODO - WebGPU does not yet seem to have a stable in-browser API, so we \"sniff\" for members instead\n    if ((handle as any)?.queue) {\n      return 'webgpu';\n    }\n\n    // null\n    if (handle === null) {\n      return 'null';\n    }\n\n    if (handle instanceof WebGLRenderingContext) {\n      log.warn('WebGL1 is not supported', handle)();\n    } else {\n      log.warn('Unknown handle type', handle)();\n    }\n\n    return null;\n  }\n}\n\n/**\n * Entry point to the luma.gl GPU abstraction\n * Register WebGPU and/or WebGL adapters (controls application bundle size)\n * Run-time selection of the first available Device\n */\nexport const luma = new Luma();\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {StatsManager, lumaStats} from '../utils/stats-manager';\nimport {log} from '../utils/log';\nimport {uid} from '../utils/uid';\nimport type {VertexFormat, VertexFormatInfo} from '../shadertypes/vertex-arrays/vertex-formats';\nimport type {TextureFormat, TextureFormatInfo} from '../shadertypes/textures/texture-formats';\nimport type {CanvasContext, CanvasContextProps} from './canvas-context';\nimport type {BufferProps} from './resources/buffer';\nimport {Buffer} from './resources/buffer';\nimport type {RenderPipeline, RenderPipelineProps} from './resources/render-pipeline';\nimport type {ComputePipeline, ComputePipelineProps} from './resources/compute-pipeline';\nimport type {Sampler, SamplerProps} from './resources/sampler';\nimport type {Shader, ShaderProps} from './resources/shader';\nimport type {Texture, TextureProps} from './resources/texture';\nimport type {ExternalTexture, ExternalTextureProps} from './resources/external-texture';\nimport type {Framebuffer, FramebufferProps} from './resources/framebuffer';\nimport type {RenderPass, RenderPassProps} from './resources/render-pass';\nimport type {ComputePass, ComputePassProps} from './resources/compute-pass';\nimport type {CommandEncoder, CommandEncoderProps} from './resources/command-encoder';\nimport type {CommandBuffer} from './resources/command-buffer';\nimport type {VertexArray, VertexArrayProps} from './resources/vertex-array';\nimport type {TransformFeedback, TransformFeedbackProps} from './resources/transform-feedback';\nimport type {QuerySet, QuerySetProps} from './resources/query-set';\n\nimport {getVertexFormatInfo} from '../shadertypes/vertex-arrays/decode-vertex-format';\nimport {textureFormatDecoder} from '../shadertypes/textures/texture-format-decoder';\nimport type {ExternalImage} from '../image-utils/image-types';\nimport {isExternalImage, getExternalImageSize} from '../image-utils/image-types';\n\n/**\n * Identifies the GPU vendor and driver.\n * @note Chrome WebGPU does not provide much information, though more can be enabled with\n * @see https://developer.chrome.com/blog/new-in-webgpu-120#adapter_information_updates\n * chrome://flags/#enable-webgpu-developer-features\n */\nexport type DeviceInfo = {\n  /** Type of device */\n  type: 'webgl' | 'webgpu' | 'null' | 'unknown';\n  /** Vendor (name of GPU vendor, Apple, nVidia etc */\n  vendor: string;\n  /** Renderer (usually driver name) */\n  renderer: string;\n  /** version of driver */\n  version: string;\n  /** family of GPU */\n  gpu: 'nvidia' | 'amd' | 'intel' | 'apple' | 'software' | 'unknown';\n  /** Type of GPU () */\n  gpuType: 'discrete' | 'integrated' | 'cpu' | 'unknown';\n  /** GPU architecture */\n  gpuArchitecture?: string; // 'common-3' on Apple\n  /** GPU driver backend. Can sometimes be sniffed */\n  gpuBackend?: 'opengl' | 'opengles' | 'metal' | 'd3d11' | 'd3d12' | 'vulkan' | 'unknown';\n  /** If this is a fallback adapter */\n  fallback?: boolean;\n  /** Shader language supported by device.createShader() */\n  shadingLanguage: 'wgsl' | 'glsl';\n  /** Highest supported shader language version: GLSL 3.00 = 300, WGSL 1.00 = 100 */\n  shadingLanguageVersion: number;\n};\n\n/** Limits for a device (max supported sizes of resources, max number of bindings etc) */\nexport abstract class DeviceLimits {\n  /** max number of TextureDimension1D */\n  abstract maxTextureDimension1D: number;\n  /** max number of TextureDimension2D */\n  abstract maxTextureDimension2D: number;\n  /** max number of TextureDimension3D */\n  abstract maxTextureDimension3D: number;\n  /** max number of TextureArrayLayers */\n  abstract maxTextureArrayLayers: number;\n  /** max number of BindGroups */\n  abstract maxBindGroups: number;\n  /** max number of DynamicUniformBuffers per PipelineLayout */\n  abstract maxDynamicUniformBuffersPerPipelineLayout: number;\n  /** max number of DynamicStorageBuffers per PipelineLayout */\n  abstract maxDynamicStorageBuffersPerPipelineLayout: number;\n  /** max number of SampledTextures per ShaderStage */\n  abstract maxSampledTexturesPerShaderStage: number;\n  /** max number of Samplers per ShaderStage */\n  abstract maxSamplersPerShaderStage: number;\n  /** max number of StorageBuffers per ShaderStage */\n  abstract maxStorageBuffersPerShaderStage: number;\n  /** max number of StorageTextures per ShaderStage */\n  abstract maxStorageTexturesPerShaderStage: number;\n  /** max number of UniformBuffers per ShaderStage */\n  abstract maxUniformBuffersPerShaderStage: number;\n  /** max number of UniformBufferBindingSize */\n  abstract maxUniformBufferBindingSize: number;\n  /** max number of StorageBufferBindingSize */\n  abstract maxStorageBufferBindingSize: number;\n  /** min UniformBufferOffsetAlignment */\n  abstract minUniformBufferOffsetAlignment: number;\n  /** min StorageBufferOffsetAlignment */\n  abstract minStorageBufferOffsetAlignment: number;\n  /** max number of VertexBuffers */\n  abstract maxVertexBuffers: number;\n  /** max number of VertexAttributes */\n  abstract maxVertexAttributes: number;\n  /** max number of VertexBufferArrayStride */\n  abstract maxVertexBufferArrayStride: number;\n  /** max number of InterStageShaderComponents */\n  abstract maxInterStageShaderVariables: number;\n  /** max number of ComputeWorkgroupStorageSize */\n  abstract maxComputeWorkgroupStorageSize: number;\n  /** max number of ComputeInvocations per Workgroup */\n  abstract maxComputeInvocationsPerWorkgroup: number;\n  /** max ComputeWorkgroupSizeX */\n  abstract maxComputeWorkgroupSizeX: number;\n  /** max ComputeWorkgroupSizeY */\n  abstract maxComputeWorkgroupSizeY: number;\n  /** max ComputeWorkgroupSizeZ */\n  abstract maxComputeWorkgroupSizeZ: number;\n  /** max ComputeWorkgroupsPerDimension */\n  abstract maxComputeWorkgroupsPerDimension: number;\n}\n\n/** Set-like class for features (lets apps check for WebGL / WebGPU extensions) */\nexport class DeviceFeatures {\n  protected features: Set<DeviceFeature>;\n  protected disabledFeatures?: Partial<Record<DeviceFeature, boolean>>;\n\n  constructor(\n    features: DeviceFeature[] = [],\n    disabledFeatures: Partial<Record<DeviceFeature, boolean>>\n  ) {\n    this.features = new Set<DeviceFeature>(features);\n    this.disabledFeatures = disabledFeatures || {};\n  }\n\n  *[Symbol.iterator](): IterableIterator<DeviceFeature> {\n    yield* this.features;\n  }\n\n  has(feature: DeviceFeature): boolean {\n    return !this.disabledFeatures?.[feature] && this.features.has(feature);\n  }\n}\n\n/** Device feature names */\nexport type DeviceFeature =\n  | WebGPUDeviceFeature\n  | WebGLDeviceFeature\n  | WebGLCompressedTextureFeatures;\n// | ChromeExperimentalFeatures\n\n/** Chrome-specific extensions. Expected to eventually become standard features. */\n// export type ChromeExperimentalFeatures = ;\n\nexport type WebGPUDeviceFeature =\n  | 'depth-clip-control'\n  | 'depth32float-stencil8'\n  | 'texture-compression-bc'\n  | 'texture-compression-bc-sliced-3d'\n  | 'texture-compression-etc2'\n  | 'texture-compression-astc'\n  | 'texture-compression-astc-sliced-3d'\n  | 'timestamp-query'\n  | 'indirect-first-instance'\n  | 'shader-f16'\n  | 'rg11b10ufloat-renderable' // Is the rg11b10ufloat texture format renderable?\n  | 'bgra8unorm-storage' // Can the bgra8unorm texture format be used in storage buffers?\n  | 'float32-filterable' // Is the float32 format filterable?\n  | 'float32-blendable' // Is the float32 format blendable?\n  | 'clip-distances'\n  | 'dual-source-blending'\n  | 'subgroups';\n// | 'depth-clamping' // removed from the WebGPU spec...\n// | 'pipeline-statistics-query' // removed from the WebGPU spec...\n\nexport type WebGLDeviceFeature =\n  // webgl extension features\n  | 'timer-query-webgl' // unify with WebGPU timestamp-query?\n  | 'compilation-status-async-webgl' // Non-blocking shader compile/link status query available\n  | 'provoking-vertex-webgl' // parameters.provokingVertex\n  | 'polygon-mode-webgl' // parameters.polygonMode and parameters.polygonOffsetLine\n\n  // GLSL extension features\n  | 'shader-noperspective-interpolation-webgl' // Vertex outputs & fragment inputs can have a `noperspective` interpolation qualifier.\n  | 'shader-conservative-depth-webgl' // GLSL `gl_FragDepth` qualifiers `depth_unchanged` etc can enable early depth test\n  | 'shader-clip-cull-distance-webgl' // Makes gl_ClipDistance and gl_CullDistance available in shaders\n\n  // texture rendering\n  | 'float32-renderable-webgl'\n  | 'float16-renderable-webgl'\n  | 'rgb9e5ufloat-renderable-webgl'\n  | 'snorm8-renderable-webgl'\n  | 'norm16-renderable-webgl'\n  | 'snorm16-renderable-webgl'\n\n  // texture filtering\n  | 'float16-filterable-webgl'\n  | 'texture-filterable-anisotropic-webgl'\n\n  // texture storage bindings\n  | 'bgra8unorm-storage'\n\n  // texture blending\n  | 'texture-blend-float-webgl';\n\ntype WebGLCompressedTextureFeatures =\n  | 'texture-compression-bc5-webgl'\n  | 'texture-compression-bc7-webgl'\n  | 'texture-compression-etc1-webgl'\n  | 'texture-compression-pvrtc-webgl'\n  | 'texture-compression-atc-webgl';\n\n/** Texture format capabilities that have been checked against a specific device */\nexport type DeviceTextureFormatCapabilities = {\n  format: TextureFormat;\n  /** Can the format be created and sampled?*/\n  create: boolean;\n  /** Is the format renderable. */\n  render: boolean;\n  /** Is the format filterable. */\n  filter: boolean;\n  /** Is the format blendable. */\n  blend: boolean;\n  /** Is the format storeable. */\n  store: boolean;\n};\n\n/** Device properties */\nexport type DeviceProps = {\n  /** string id for debugging. Stored on the object, used in logging and set on underlying GPU objects when feasible. */\n  id?: string;\n  /** Properties for creating a default canvas context */\n  createCanvasContext?: CanvasContextProps | true;\n  /** Control which type of GPU is preferred on systems with both integrated and discrete GPU. Defaults to \"high-performance\" / discrete GPU. */\n  powerPreference?: 'default' | 'high-performance' | 'low-power';\n  /** Hints that device creation should fail if no hardware GPU is available (if the system performance is \"low\"). */\n  failIfMajorPerformanceCaveat?: boolean;\n\n  /** WebGL specific: Properties passed through to WebGL2RenderingContext creation: `canvas.getContext('webgl2', props.webgl)` */\n  webgl?: WebGLContextProps;\n\n  // CALLBACKS\n\n  /** Error handler. If it returns a probe logger style function, it will be called at the site of the error to optimize console error links. */\n  onError?: (error: Error, context?: unknown) => unknown;\n  /** Called when the size of a CanvasContext's canvas changes */\n  onResize?: (ctx: CanvasContext, info: {oldPixelSize: [number, number]}) => unknown;\n  /** Called when the absolute position of a CanvasContext's canvas changes. Must set `CanvasContextProps.trackPosition: true` */\n  onPositionChange?: (ctx: CanvasContext, info: {oldPosition: [number, number]}) => unknown;\n  /** Called when the visibility of a CanvasContext's canvas changes */\n  onVisibilityChange?: (ctx: CanvasContext) => unknown;\n  /** Called when the device pixel ratio of a CanvasContext's canvas changes */\n  onDevicePixelRatioChange?: (ctx: CanvasContext, info: {oldRatio: number}) => unknown;\n\n  // DEBUG SETTINGS\n\n  /** Turn on implementation defined checks that slow down execution but help break where errors occur */\n  debug?: boolean;\n  /** Show shader source in browser? The default is `'error'`, meaning that logs are shown when shader compilation has errors */\n  debugShaders?: 'never' | 'errors' | 'warnings' | 'always';\n  /** Renders a small version of updated Framebuffers into the primary canvas context. Can be set in console luma.log.set('debug-framebuffers', true) */\n  debugFramebuffers?: boolean;\n  /** Traces resource caching, reuse, and destroys in the PipelineFactory */\n  debugFactories?: boolean;\n  /** WebGL specific - Trace WebGL calls (instruments WebGL2RenderingContext at the expense of performance). Can be set in console luma.log.set('debug-webgl', true)  */\n  debugWebGL?: boolean;\n  /** WebGL specific - Initialize the SpectorJS WebGL debugger. Can be set in console luma.log.set('debug-spectorjs', true)  */\n  debugSpectorJS?: boolean;\n  /** WebGL specific - SpectorJS URL. Override if CDN is down or different SpectorJS version is desired. */\n  debugSpectorJSUrl?: string;\n\n  // EXPERIMENTAL SETTINGS - subject to change\n\n  /** adapter.create() returns the existing Device if the provided canvas' WebGL context is already associated with a Device.  */\n  _reuseDevices?: boolean;\n  /** WebGPU specific - Request a Device with the highest limits supported by platform. On WebGPU devices can be created with minimal limits. */\n  _requestMaxLimits?: boolean;\n  /** Disable specific features */\n  _disabledFeatures?: Partial<Record<DeviceFeature, boolean>>;\n  /** WebGL specific - Initialize all features on startup */\n  _initializeFeatures?: boolean;\n  /** Enable shader caching (via ShaderFactory) */\n  _cacheShaders?: boolean;\n  /** Enable shader caching (via PipelineFactory) */\n  _cachePipelines?: boolean;\n  /** Never destroy cached shaders and pipelines */\n  _cacheDestroyPolicy?: 'unused' | 'never';\n\n  /** @deprecated Internal, Do not use directly! Use `luma.attachDevice()` to attach to pre-created contexts/devices. */\n  _handle?: unknown; // WebGL2RenderingContext | GPUDevice | null;\n};\n\n/** WebGL independent copy of WebGLContextAttributes */\ntype WebGLContextProps = {\n  /** indicates if the canvas contains an alpha buffer. */\n  alpha?: boolean;\n  /** hints the user agent to reduce the latency by desynchronizing the canvas paint cycle from the event loop */\n  desynchronized?: boolean;\n  /** indicates whether or not to perform anti-aliasing. */\n  antialias?: boolean;\n  /** indicates that the render target has a stencil buffer of at least `8` bits. */\n  stencil?: boolean;\n  /** indicates that the drawing buffer has a depth buffer of at least 16 bits. */\n  depth?: boolean;\n  /** indicates if a context will be created if the system performance is low or if no hardware GPU is available. */\n  failIfMajorPerformanceCaveat?: boolean;\n  /** Selects GPU */\n  powerPreference?: 'default' | 'high-performance' | 'low-power';\n  /** page compositor will assume the drawing buffer contains colors with pre-multiplied alpha. */\n  premultipliedAlpha?: boolean;\n  /** buffers will not be cleared and will preserve their values until cleared or overwritten by the author. */\n  preserveDrawingBuffer?: boolean;\n};\n\n/**\n * Create and attach devices for a specific backend. Currently static methods on each device\n */\nexport interface DeviceFactory {\n  // new (props: DeviceProps): Device; Constructor isn't used\n  type: string;\n  isSupported(): boolean;\n  create(props: DeviceProps): Promise<Device>;\n  attach?(handle: unknown): Device;\n}\n\n/**\n * WebGPU Device/WebGL context abstraction\n */\nexport abstract class Device {\n  static defaultProps: Required<DeviceProps> = {\n    id: null!,\n    powerPreference: 'high-performance',\n    failIfMajorPerformanceCaveat: false,\n    createCanvasContext: undefined!,\n    // WebGL specific\n    webgl: {},\n\n    // Callbacks\n    // eslint-disable-next-line handle-callback-err\n    onError: (error: Error, context: unknown) => {},\n    onResize: (context: CanvasContext, info: {oldPixelSize: [number, number]}) => {\n      const [width, height] = context.getDevicePixelSize();\n      log.log(1, `${context} resized => ${width}x${height}px`)();\n    },\n    onPositionChange: (context: CanvasContext, info: {oldPosition: [number, number]}) => {\n      const [left, top] = context.getPosition();\n      log.log(1, `${context} repositioned => ${left},${top}`)();\n    },\n    onVisibilityChange: (context: CanvasContext) =>\n      log.log(1, `${context} Visibility changed ${context.isVisible}`)(),\n    onDevicePixelRatioChange: (context: CanvasContext, info: {oldRatio: number}) =>\n      log.log(1, `${context} DPR changed ${info.oldRatio} => ${context.devicePixelRatio}`)(),\n\n    // Debug flags\n    debug: log.get('debug') || undefined!,\n    debugShaders: log.get('debug-shaders') || undefined!,\n    debugFramebuffers: Boolean(log.get('debug-framebuffers')),\n    debugFactories: Boolean(log.get('debug-factories')),\n    debugWebGL: Boolean(log.get('debug-webgl')),\n    debugSpectorJS: undefined!, // Note: log setting is queried by the spector.js code\n    debugSpectorJSUrl: undefined!,\n\n    // Experimental\n    _reuseDevices: false,\n    _requestMaxLimits: true,\n    _cacheShaders: false,\n    _cachePipelines: false,\n    _cacheDestroyPolicy: 'unused',\n    // TODO - Change these after confirming things work as expected\n    _initializeFeatures: true,\n    _disabledFeatures: {\n      'compilation-status-async-webgl': true\n    },\n\n    // INTERNAL\n    _handle: undefined!\n  };\n\n  get [Symbol.toStringTag](): string {\n    return 'Device';\n  }\n\n  toString(): string {\n    return `Device(${this.id})`;\n  }\n\n  /** id of this device, primarily for debugging */\n  readonly id: string;\n  /** type of this device */\n  abstract readonly type: 'webgl' | 'webgpu' | 'null' | 'unknown';\n  abstract readonly handle: unknown;\n  abstract commandEncoder: CommandEncoder;\n\n  /** A copy of the device props  */\n  readonly props: Required<DeviceProps>;\n  /** Available for the application to store data on the device */\n  userData: {[key: string]: unknown} = {};\n  /** stats */\n  readonly statsManager: StatsManager = lumaStats;\n  /** An abstract timestamp used for change tracking */\n  timestamp: number = 0;\n\n  /** True if this device has been reused during device creation (app has multiple references) */\n  _reused: boolean = false;\n  /** Used by other luma.gl modules to store data on the device */\n  _lumaData: {[key: string]: unknown} = {};\n\n  // Capabilities\n\n  /** Information about the device (vendor, versions etc) */\n  abstract info: DeviceInfo;\n  /** Optional capability discovery */\n  abstract features: DeviceFeatures;\n  /** WebGPU style device limits */\n  abstract get limits(): DeviceLimits;\n\n  // Texture helpers\n\n  /** Optimal TextureFormat for displaying 8-bit depth, standard dynamic range content on this system. */\n  abstract preferredColorFormat: 'rgba8unorm' | 'bgra8unorm';\n  /** Default depth format used on this system */\n  abstract preferredDepthFormat: 'depth16' | 'depth24plus' | 'depth32float';\n\n  protected _textureCaps: Partial<Record<TextureFormat, DeviceTextureFormatCapabilities>> = {};\n\n  constructor(props: DeviceProps) {\n    this.props = {...Device.defaultProps, ...props};\n    this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());\n  }\n\n  abstract destroy(): void;\n\n  getVertexFormatInfo(format: VertexFormat): VertexFormatInfo {\n    return getVertexFormatInfo(format);\n  }\n\n  isVertexFormatSupported(format: VertexFormat): boolean {\n    return true;\n  }\n\n  /** Returns information about a texture format, such as data type, channels, bits per channel, compression etc */\n  getTextureFormatInfo(format: TextureFormat): TextureFormatInfo {\n    return textureFormatDecoder.getInfo(format);\n  }\n\n  /** Determines what operations are supported on a texture format on this particular device (checks against supported device features) */\n  getTextureFormatCapabilities(format: TextureFormat): DeviceTextureFormatCapabilities {\n    let textureCaps = this._textureCaps[format];\n    if (!textureCaps) {\n      const capabilities = this._getDeviceTextureFormatCapabilities(format);\n      textureCaps = this._getDeviceSpecificTextureFormatCapabilities(capabilities);\n      this._textureCaps[format] = textureCaps;\n    }\n    return textureCaps;\n  }\n\n  /** Return the implementation specific alignment for a texture format. 1 on WebGL, 256 on WebGPU */\n  abstract getTextureByteAlignment(): number;\n\n  /** Calculates the number of mip levels for a texture of width, height and in case of 3d textures only, depth */\n  getMipLevelCount(width: number, height: number, depth3d: number = 1): number {\n    const maxSize = Math.max(width, height, depth3d);\n    return 1 + Math.floor(Math.log2(maxSize));\n  }\n\n  /** Check if data is an external image */\n  isExternalImage(data: unknown): data is ExternalImage {\n    return isExternalImage(data);\n  }\n\n  /** Get the size of an external image */\n  getExternalImageSize(data: ExternalImage): {width: number; height: number} {\n    return getExternalImageSize(data);\n  }\n\n  /** Check if device supports a specific texture format (creation and `nearest` sampling) */\n  isTextureFormatSupported(format: TextureFormat): boolean {\n    return this.getTextureFormatCapabilities(format).create;\n  }\n\n  /** Check if linear filtering (sampler interpolation) is supported for a specific texture format */\n  isTextureFormatFilterable(format: TextureFormat): boolean {\n    return this.getTextureFormatCapabilities(format).filter;\n  }\n\n  /** Check if device supports rendering to a framebuffer color attachment of a specific texture format */\n  isTextureFormatRenderable(format: TextureFormat): boolean {\n    return this.getTextureFormatCapabilities(format).render;\n  }\n\n  /** Check if a specific texture format is GPU compressed */\n  isTextureFormatCompressed(format: TextureFormat): boolean {\n    return textureFormatDecoder.isCompressed(format);\n  }\n\n  // DEBUG METHODS\n\n  pushDebugGroup(groupLabel: string): void {\n    this.commandEncoder.pushDebugGroup(groupLabel);\n  }\n\n  popDebugGroup(): void {\n    this.commandEncoder?.popDebugGroup();\n  }\n\n  insertDebugMarker(markerLabel: string): void {\n    this.commandEncoder?.insertDebugMarker(markerLabel);\n  }\n\n  // Device loss\n\n  /** `true` if device is already lost */\n  abstract get isLost(): boolean;\n\n  /** Promise that resolves when device is lost */\n  abstract readonly lost: Promise<{reason: 'destroyed'; message: string}>;\n\n  /**\n   * Trigger device loss.\n   * @returns `true` if context loss could actually be triggered.\n   * @note primarily intended for testing how application reacts to device loss\n   */\n  loseDevice(): boolean {\n    return false;\n  }\n\n  /** A monotonic counter for tracking buffer and texture updates */\n  incrementTimestamp(): number {\n    return this.timestamp++;\n  }\n\n  /**\n   * Reports Device errors in a way that optimizes for developer experience / debugging.\n   * - Logs so that the console error links directly to the source code that generated the error.\n   * - Includes the object that reported the error in the log message, even if the error is asynchronous.\n   *\n   * Conventions when calling reportError():\n   * - Always call the returned function - to ensure error is logged, at the error site\n   * - Follow with a call to device.debug() - to ensure that the debugger breaks at the error site\n   *\n   * @param error - the error to report. If needed, just create a new Error object with the appropriate message.\n   * @param context - pass `this` as context, otherwise it may not be available in the debugger for async errors.\n   * @returns the logger function returned by device.props.onError() so that it can be called from the error site.\n   *\n   * @example\n   *   device.reportError(new Error(...), this)();\n   *   device.debug();\n   */\n  reportError(error: Error, context: unknown, ...args: unknown[]): () => unknown {\n    // Call the error handler\n    const isHandled = this.props.onError(error, context);\n    if (!isHandled) {\n      // Note: Returns a function that must be called: `device.reportError(...)()`\n      return log.error(error.message, context, ...args);\n    }\n    return () => {};\n  }\n\n  /** Break in the debugger - if device.props.debug is true */\n  debug(): void {\n    if (this.props.debug) {\n      // @ts-ignore\n      debugger; // eslint-disable-line\n    } else {\n      // TODO(ibgreen): Does not appear to be printed in the console\n      const message = `\\\n'Type luma.log.set({debug: true}) in console to enable debug breakpoints',\nor create a device with the 'debug: true' prop.`;\n      log.once(0, message)();\n    }\n  }\n\n  // Canvas context\n\n  /** Default / primary canvas context. Can be null as WebGPU devices can be created without a CanvasContext */\n  abstract canvasContext: CanvasContext | null;\n\n  /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */\n  getDefaultCanvasContext(): CanvasContext {\n    if (!this.canvasContext) {\n      throw new Error('Device has no default CanvasContext. See props.createCanvasContext');\n    }\n    return this.canvasContext;\n  }\n\n  /** Creates a new CanvasContext (WebGPU only) */\n  abstract createCanvasContext(props?: CanvasContextProps): CanvasContext;\n\n  /** Call after rendering a frame (necessary e.g. on WebGL OffscreenCanvas) */\n  abstract submit(commandBuffer?: CommandBuffer): void;\n\n  // Resource creation\n\n  /** Create a buffer */\n  abstract createBuffer(props: BufferProps | ArrayBuffer | ArrayBufferView): Buffer;\n\n  /** Create a texture */\n  abstract createTexture(props: TextureProps): Texture;\n\n  /** Create a temporary texture view of a video source */\n  abstract createExternalTexture(props: ExternalTextureProps): ExternalTexture;\n\n  /** Create a sampler */\n  abstract createSampler(props: SamplerProps): Sampler;\n\n  /** Create a Framebuffer. Must have at least one attachment. */\n  abstract createFramebuffer(props: FramebufferProps): Framebuffer;\n\n  /** Create a shader */\n  abstract createShader(props: ShaderProps): Shader;\n\n  /** Create a render pipeline (aka program) */\n  abstract createRenderPipeline(props: RenderPipelineProps): RenderPipeline;\n\n  /** Create a compute pipeline (aka program). WebGPU only. */\n  abstract createComputePipeline(props: ComputePipelineProps): ComputePipeline;\n\n  /** Create a vertex array */\n  abstract createVertexArray(props: VertexArrayProps): VertexArray;\n\n  abstract createCommandEncoder(props?: CommandEncoderProps): CommandEncoder;\n\n  /** Create a transform feedback (immutable set of output buffer bindings). WebGL only. */\n  abstract createTransformFeedback(props: TransformFeedbackProps): TransformFeedback;\n\n  abstract createQuerySet(props: QuerySetProps): QuerySet;\n\n  /** Create a RenderPass using the default CommandEncoder */\n  beginRenderPass(props?: RenderPassProps): RenderPass {\n    return this.commandEncoder.beginRenderPass(props);\n  }\n\n  /** Create a ComputePass using the default CommandEncoder*/\n  beginComputePass(props?: ComputePassProps): ComputePass {\n    return this.commandEncoder.beginComputePass(props);\n  }\n\n  /**\n   * Determines what operations are supported on a texture format, checking against supported device features\n   * Subclasses override to apply additional checks\n   */\n  protected abstract _getDeviceSpecificTextureFormatCapabilities(\n    format: DeviceTextureFormatCapabilities\n  ): DeviceTextureFormatCapabilities;\n\n  // DEPRECATED METHODS\n\n  /** @deprecated Use getDefaultCanvasContext() */\n  getCanvasContext(): CanvasContext {\n    return this.getDefaultCanvasContext();\n  }\n\n  // WebGL specific HACKS - enables app to remove webgl import\n  // Use until we have a better way to handle these\n\n  /** @deprecated - will be removed - should use command encoder */\n  readPixelsToArrayWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      sourceAttachment?: number;\n      target?: Uint8Array | Uint16Array | Float32Array;\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Uint8Array | Uint16Array | Float32Array {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use command encoder */\n  readPixelsToBufferWebGL(\n    source: Framebuffer | Texture,\n    options?: {\n      sourceX?: number;\n      sourceY?: number;\n      sourceFormat?: number;\n      target?: Buffer; // A new Buffer object is created when not provided.\n      targetByteOffset?: number; // byte offset in buffer object\n      // following parameters are auto deduced if not provided\n      sourceWidth?: number;\n      sourceHeight?: number;\n      sourceType?: number;\n    }\n  ): Buffer {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\n  setParametersWebGL(parameters: any): void {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\n  getParametersWebGL(parameters: any): void {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */\n  withParametersWebGL(parameters: any, func: any): any {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use clear arguments in RenderPass */\n  clearWebGL(options?: {framebuffer?: Framebuffer; color?: any; depth?: any; stencil?: any}): void {\n    throw new Error('not implemented');\n  }\n\n  /** @deprecated - will be removed - should use for debugging only */\n  resetWebGL(): void {\n    throw new Error('not implemented');\n  }\n\n  // IMPLEMENTATION\n\n  /** Helper to get the canvas context props */\n  static _getCanvasContextProps(props: DeviceProps): CanvasContextProps | undefined {\n    return props.createCanvasContext === true ? {} : props.createCanvasContext;\n  }\n\n  protected _getDeviceTextureFormatCapabilities(\n    format: TextureFormat\n  ): DeviceTextureFormatCapabilities {\n    const genericCapabilities = textureFormatDecoder.getCapabilities(format);\n\n    // Check standard features\n    const checkFeature = (feature: DeviceFeature | boolean | undefined) =>\n      (typeof feature === 'string' ? this.features.has(feature) : feature) ?? true;\n\n    const supported = checkFeature(genericCapabilities.create);\n    return {\n      format,\n      create: supported,\n      render: supported && checkFeature(genericCapabilities.render),\n      filter: supported && checkFeature(genericCapabilities.filter),\n      blend: supported && checkFeature(genericCapabilities.blend),\n      store: supported && checkFeature(genericCapabilities.store)\n    } as const satisfies DeviceTextureFormatCapabilities;\n  }\n\n  /** Subclasses use this to support .createBuffer() overloads */\n  protected _normalizeBufferProps(props: BufferProps | ArrayBuffer | ArrayBufferView): BufferProps {\n    if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // TODO(ibgreen) - fragile, as this is done before we merge with default options\n    // inside the Buffer constructor\n\n    const newProps = {...props};\n    // Deduce indexType\n    const usage = props.usage || 0;\n    if (usage & Buffer.INDEX) {\n      if (!props.indexType) {\n        if (props.data instanceof Uint32Array) {\n          newProps.indexType = 'uint32';\n        } else if (props.data instanceof Uint16Array) {\n          newProps.indexType = 'uint16';\n        }\n      }\n      if (!newProps.indexType) {\n        throw new Error('indices buffer content must be of type uint16 or uint32');\n      }\n    }\n\n    return newProps;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Stats} from '@probe.gl/stats';\n\n/**\n * Helper class managing a collection of probe.gl stats objects\n */\nexport class StatsManager {\n  stats = new Map();\n\n  getStats(name: string): Stats {\n    return this.get(name);\n  }\n\n  get(name: string): Stats {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\n/** Global stats for all luma.gl devices */\nexport const lumaStats: StatsManager = new StatsManager();\n", "export {default as Stats} from './lib/stats';\nexport {default as Stat} from './lib/stat';\n\n// UTILITIES\nexport {default as _getHiResTimestamp} from './utils/hi-res-timestamp';\n", "// probe.gl, MIT license\n\nimport Stat from './stat';\n\ntype TableEntry = {\n  time: number;\n  count: number;\n  average: number;\n  hz: number;\n};\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n\n  getTable(): Record<string, TableEntry> {\n    const table: Record<string, TableEntry> = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat: Stat | {name: string, type?: string}): Stat {\n    const {name, type} = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}\n", "import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string | undefined;\n  sampleSize: number = 1;\n  time: number = 0;\n  count: number = 0;\n  samples: number = 0;\n  lastTiming: number = 0;\n  lastSampleTime: number = 0;\n  lastSampleCount: number = 0;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function getHiResTimestamp(): number {\n  let timestamp;\n  // Get best timer available.\n  if (typeof window !== 'undefined' && window.performance) {\n    timestamp = window.performance.now();\n  } else if (typeof process !== 'undefined' && process.hrtime) {\n    const timeParts = process.hrtime();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Log} from '@probe.gl/log';\n\n/** Global log instance */\nexport const log: Log = new Log({id: 'luma.gl'});\n", "import {Log} from './log';\n\n// DEFAULT EXPORT IS A LOG INSTANCE\nexport default new Log({id: '@probe.gl/log'});\n\n// LOGGING\nexport {Log} from './log';\nexport {COLOR} from './utils/color';\n\n// UTILITIES\nexport {addColor} from './utils/color';\nexport {leftPad, rightPad} from './utils/formatters';\nexport {autobind} from './utils/autobind';\nexport {LocalStorage} from './utils/local-storage';\nexport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\nimport './init';\n", "// probe.gl, MIT license\n\n/* eslint-disable no-console,prefer-rest-params */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n/** \"Global\" log configuration settings */\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: unknown;\n};\n\n/** Options when logging a message */\ntype LogOptions = {\n  method?: Function;\n  time?: boolean;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogFunction = () => void;\n\ntype Table = Record<string, any>;\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nconst DEFAULT_LOG_CONFIGURATION: Required<LogConfiguration> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(\n      `__probe-${this.id}__`,\n      DEFAULT_LOG_CONFIGURATION\n    );\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    if (!condition) {\n      throw new Error(message || 'Assertion failed');\n    }\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args: unknown[]): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args: unknown[]): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args: unknown[]): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args: unknown[]): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args: unknown[]): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args: unknown[]): LogFunction;\n  once(logLevel, message?) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      return this._getLogFunction(\n        logLevel,\n        table,\n        console.table || noop,\n        (columns && [columns]) as unknown as IArguments,\n        {\n          tag: getTableHeader(table)\n        }\n      );\n    }\n    return noop;\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments | undefined;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n", "// Extract injected version from package.json (injected by babel plugin)\n// @ts-expect-error\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\n// ENVIRONMENT\nexport {self, window, global, document, process, console} from './lib/globals';\nexport {isBrowser} from './lib/is-browser';\nexport {getBrowser, isMobile} from './lib/get-browser';\nexport {isElectron} from './lib/is-electron';\n\n// ENVIRONMENT'S ASSERT IS 5-15KB, SO WE PROVIDE OUR OWN\nexport {assert} from './utils/assert';\n\n// TODO - wish we could just export a constant\n// export const isBrowser = checkIfBrowser();\n", "// Do not name these variables the same as the global objects - will break bundling\nconst global_ = globalThis;\nconst window_ = globalThis as unknown as Window;\nconst document_ = globalThis.document || ({} as Document);\nconst process_ = globalThis.process || {};\nconst console_ = globalThis.console;\nconst navigator_ = globalThis.navigator || ({} as Navigator);\n\nexport {\n  global_ as global,\n  global_ as self,\n  window_ as window,\n  document_ as document,\n  process_ as process,\n  console_ as console,\n  navigator_ as navigator\n};\n", "// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport {isElectron} from './is-electron';\n\n/** Check if in browser by duck-typing Node context */\nexport function isBrowser(): boolean {\n  const isNode =\n    // @ts-expect-error\n    typeof process === 'object' && String(process) === '[object process]' && !process?.browser;\n  return !isNode || isElectron();\n}\n", "// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* eslint-disable complexity */\nexport function isElectron(mockUserAgent?: string): boolean {\n  // Renderer process\n  // @ts-expect-error\n  if (typeof window !== 'undefined' && window.process?.type === 'renderer') {\n    return true;\n  }\n  // Main process\n  // eslint-disable-next-line\n  if (typeof process !== 'undefined' && Boolean(process.versions?.['electron'])) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  const realUserAgent = typeof navigator !== 'undefined' && navigator.userAgent;\n  const userAgent = mockUserAgent || realUserAgent;\n  return Boolean(userAgent && userAgent.indexOf('Electron') >= 0);\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport {isBrowser} from './is-browser';\nimport {isElectron} from './is-electron';\nimport {navigator} from './globals';\n\ndeclare global {\n  var chrome: boolean; // eslint-disable-line no-var\n  var safari: boolean; // eslint-disable-line no-var\n  var mozInnerScreenX: number; // eslint-disable-line no-var\n}\n\nexport function isMobile(): boolean {\n  return typeof globalThis.orientation !== 'undefined';\n}\n\n// Simple browser detection\n// `mockUserAgent` parameter allows user agent to be overridden for testing\n/* eslint-disable complexity */\nexport function getBrowser(\n  mockUserAgent?: string\n): 'Node' | 'Electron' | 'Chrome' | 'Firefox' | 'Safari' | 'Edge' | 'Unknown' {\n  if (!mockUserAgent && !isBrowser()) {\n    return 'Node';\n  }\n  if (isElectron(mockUserAgent)) {\n    return 'Electron';\n  }\n\n  const userAgent = mockUserAgent || navigator.userAgent || '';\n\n  // NOTE: Order of tests matter, as many agents list Chrome etc.\n  if (userAgent.indexOf('Edge') > -1) {\n    return 'Edge';\n  }\n  if (globalThis.chrome) {\n    return 'Chrome';\n  }\n  if (globalThis.safari) {\n    return 'Safari';\n  }\n  if (globalThis.mozInnerScreenX) {\n    return 'Firefox';\n  }\n  return 'Unknown';\n}\n", "export function assert(condition: unknown, message?: string) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "// probe.gl, MIT license\n\nexport type StorageType = 'sessionStorage' | 'localStorage';\n\nfunction getStorage(type: StorageType): Storage | null {\n  try {\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport class LocalStorage<Configuration extends {}> {\n  storage: Storage | null;\n  id: string;\n  config: Required<Configuration>;\n\n  constructor(\n    id: string,\n    defaultConfig: Required<Configuration>,\n    type: StorageType = 'sessionStorage'\n  ) {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n\n  getConfiguration(): Required<Configuration> {\n    return this.config;\n  }\n\n  setConfiguration(configuration: Configuration): void {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n", "// probe.gl, MIT license\n\nexport type FormatValueOptions = {\n  isInteger?: boolean;\n  maxElts?: number;\n  size?: number;\n};\n\n/**\n * Format time\n */\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, options: FormatValueOptions = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = options;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, options);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v: any, options: FormatValueOptions) {\n  const {maxElts = 16, size = 1} = options;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], options);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n", "import {isBrowser} from '@probe.gl/env';\n\nexport enum COLOR {\n  BLACK = 30,\n  RED = 31,\n  GREEN = 32,\n  YELLOW = 33,\n  BLUE = 34,\n  MAGENTA = 35,\n  CYAN = 36,\n  WHITE = 37,\n\n  BRIGHT_BLACK = 90,\n  BRIGHT_RED = 91,\n  BRIGHT_GREEN = 92,\n  BRIGHT_YELLOW = 93,\n  BRIGHT_BLUE = 94,\n  BRIGHT_MAGENTA = 95,\n  BRIGHT_CYAN = 96,\n  BRIGHT_WHITE = 97\n}\n\nconst BACKGROUND_INCREMENT = 10;\n\nfunction getColor(color: string | COLOR): number {\n  if (typeof color !== 'string') {\n    return color;\n  }\n  color = color.toUpperCase();\n  return COLOR[color] || COLOR.WHITE;\n}\n\nexport function addColor(\n  string: string,\n  color: string | COLOR,\n  background?: string | COLOR\n): string {\n  if (!isBrowser && typeof string === 'string') {\n    if (color) {\n      const colorCode = getColor(color);\n      string = `\\u001b[${colorCode}m${string}\\u001b[39m`;\n    }\n    if (background) {\n      // background colors values are +10\n      const colorCode = getColor(background);\n      string = `\\u001b[${colorCode + BACKGROUND_INCREMENT}m${string}\\u001b[49m`;\n    }\n  }\n  return string;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Binds the \"this\" argument of all functions on a class instance to the instance\n * @param obj - class instance (typically a react component)\n */\nexport function autobind(obj: object, predefined = ['constructor']): void {\n  const proto = Object.getPrototypeOf(obj);\n  const propNames = Object.getOwnPropertyNames(proto);\n\n  const object = obj as Record<string, unknown>;\n  for (const key of propNames) {\n    const value = object[key];\n    if (typeof value === 'function') {\n      if (!predefined.find((name) => key === name)) {\n        object[key] = value.bind(obj);\n      }\n    }\n  }\n}\n", "export default function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "// probe.gl, MIT license\n\nimport {window, process, isBrowser} from '@probe.gl/env';\n\n/** Get best timer available. */\nexport function getHiResTimestamp() {\n  let timestamp;\n  if (isBrowser() && window.performance) {\n    timestamp = window?.performance?.now?.();\n  } else if ('hrtime' in process) {\n    // @ts-ignore\n    const timeParts = process?.hrtime?.();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "// @ts-nocheck\n/* eslint-disable */\nglobalThis.probe = {};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst uidCounters: Record<string, number> = {};\n\n/**\n * Returns a UID.\n * @param id= - Identifier base name\n * @return uid\n **/\nexport function uid(id: string = 'id'): string {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\n/** Callback for Buffer.mapAndReadAsync */\nexport type BufferMapCallback<T> = (arrayBuffer: ArrayBuffer, lifetime: 'mapped' | 'copied') => T;\n\nexport type BufferProps = ResourceProps & {\n  /** Supply a handle to connect to an existing device-specific buffer */\n  handle?: WebGLBuffer;\n  /** Specifies how this buffer can be used */\n  usage?: number;\n  /** Length in bytes of memory to be allocated. If not specified, `byteLength` of  `props.data` will be used. */\n  byteLength?: number;\n  /** Byte offset into the newly created Buffer to store data at */\n  byteOffset?: number;\n  /** If props.usage includes Buffer.INDEX */\n  indexType?: 'uint16' | 'uint32';\n  /** Data to initialize the buffer with. */\n  data?: ArrayBuffer | ArrayBufferView | null;\n  /** Callback to initialize data without copy */\n  onMapped?: BufferMapCallback<void>;\n};\n\n/** Abstract GPU buffer */\nexport abstract class Buffer extends Resource<BufferProps> {\n  /** Index buffer */\n  static INDEX = 0x0010;\n  /** Vertex buffer */\n  static VERTEX = 0x0020;\n  /** Uniform buffer */\n  static UNIFORM = 0x0040;\n  /** Storage buffer */\n  static STORAGE = 0x0080;\n  static INDIRECT = 0x0100;\n  static QUERY_RESOLVE = 0x0200;\n\n  // Usage Flags\n  static MAP_READ = 0x01;\n  static MAP_WRITE = 0x02;\n  static COPY_SRC = 0x0004;\n  static COPY_DST = 0x0008;\n\n  override get [Symbol.toStringTag](): string {\n    return 'Buffer';\n  }\n\n  /** The usage with which this buffer was created */\n  readonly usage: number;\n  /** For index buffers, whether indices are 16 or 32 bit */\n  readonly indexType?: 'uint16' | 'uint32';\n  /** Length of buffer in bytes */\n  abstract byteLength: number;\n  /** \"Time\" of last update, can be used to check if redraw is needed */\n  updateTimestamp: number;\n\n  constructor(device: Device, props: BufferProps) {\n    const deducedProps = {...props};\n\n    // Deduce indexType\n    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {\n      if (props.data instanceof Uint32Array) {\n        deducedProps.indexType = 'uint32';\n      } else if (props.data instanceof Uint16Array) {\n        deducedProps.indexType = 'uint16';\n      }\n    }\n\n    // Remove data from props before storing, we don't want to hold on to a big chunk of memory\n    delete deducedProps.data;\n\n    super(device, deducedProps, Buffer.defaultProps);\n\n    this.usage = deducedProps.usage || 0;\n    this.indexType = deducedProps.indexType;\n\n    // TODO - perhaps this should be set on async write completion?\n    this.updateTimestamp = device.incrementTimestamp();\n  }\n\n  /**\n   * Create a copy of this Buffer with new byteLength, with same props but of the specified size.\n   * @note Does not copy contents of the cloned Buffer.\n   */\n  clone(props: {byteLength: number}): Buffer {\n    return this.device.createBuffer({...this.props, ...props});\n  }\n\n  /** Write data to buffer */\n  abstract write(\n    data: ArrayBufferLike | ArrayBufferView | SharedArrayBuffer,\n    byteOffset?: number\n  ): void;\n\n  abstract mapAndWriteAsync(\n    onMapped: BufferMapCallback<void | Promise<void>>,\n    byteOffset?: number,\n    byteLength?: number\n  ): Promise<void>;\n\n  /** Reads data asynchronously, returns a copy of the buffer data */\n  abstract readAsync(byteOffset?: number, byteLength?: number): Promise<Uint8Array>;\n\n  /** Maps buffer data to CPU memory. Mapped memory is only accessible in the callback */\n  abstract mapAndReadAsync<T>(\n    onMapped: BufferMapCallback<T>,\n    byteOffset?: number,\n    byteLength?: number\n  ): Promise<T>;\n\n  /** Read data synchronously. @note WebGL2 only */\n  abstract readSyncWebGL(byteOffset?: number, byteLength?: number): Uint8Array;\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  /** Max amount of debug data saved. Two vec4's */\n  static DEBUG_DATA_MAX_LENGTH = 32;\n\n  /** A partial CPU-side copy of the data in this buffer, for debugging purposes */\n  debugData: ArrayBuffer = new ArrayBuffer(0);\n\n  /** This doesn't handle partial non-zero offset updates correctly */\n  protected _setDebugData(\n    data: ArrayBufferView | ArrayBufferLike | null,\n    byteOffset: number,\n    byteLength: number\n  ): void {\n    const arrayBuffer: ArrayBufferLike | null = ArrayBuffer.isView(data) ? data.buffer : data;\n    const debugDataLength = Math.min(\n      data ? data.byteLength : byteLength,\n      Buffer.DEBUG_DATA_MAX_LENGTH\n    );\n    if (arrayBuffer === null) {\n      this.debugData = new ArrayBuffer(debugDataLength);\n    } else if (byteOffset === 0 && byteLength === arrayBuffer.byteLength) {\n      this.debugData = arrayBuffer.slice(0, debugDataLength);\n    } else {\n      this.debugData = arrayBuffer.slice(byteOffset, byteOffset + debugDataLength);\n    }\n  }\n\n  static override defaultProps: Required<BufferProps> = {\n    ...Resource.defaultProps,\n    usage: 0, // Buffer.COPY_DST | Buffer.COPY_SRC\n    byteLength: 0,\n    byteOffset: 0,\n    data: null,\n    indexType: 'uint16',\n    onMapped: undefined!\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {uid} from '../../utils/uid';\n\nexport type ResourceProps = {\n  /** Name of resource, mainly for debugging purposes. A unique name will be assigned if not provided */\n  id?: string;\n  /** Handle for the underlying resources (WebGL object or WebGPU handle) */\n  handle?: any;\n  /** User provided data stored on this resource  */\n  userData?: {[key: string]: any};\n};\n\n/**\n * Base class for GPU (WebGPU/WebGL) Resources\n */\nexport abstract class Resource<Props extends ResourceProps> {\n  /** Default properties for resource */\n  static defaultProps: Required<ResourceProps> = {\n    id: 'undefined',\n    handle: undefined,\n    userData: undefined!\n  };\n\n  abstract get [Symbol.toStringTag](): string;\n\n  toString(): string {\n    return `${this[Symbol.toStringTag] || this.constructor.name}:\"${this.id}\"`;\n  }\n\n  /** props.id, for debugging. */\n  id: string;\n  readonly props: Required<Props>;\n  readonly userData: Record<string, unknown> = {};\n  abstract readonly device: Device;\n  abstract readonly handle: unknown;\n  private _device: Device;\n\n  /** Whether this resource has been destroyed */\n  destroyed: boolean = false;\n  /** For resources that allocate GPU memory */\n  private allocatedBytes: number = 0;\n  /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created \"sub\" resources. */\n  private _attachedResources = new Set<Resource<ResourceProps>>();\n\n  /**\n   * Create a new Resource. Called from Subclass\n   */\n  constructor(device: Device, props: Props, defaultProps: Required<Props>) {\n    if (!device) {\n      throw new Error('no device');\n    }\n    this._device = device;\n    this.props = selectivelyMerge<Props>(props, defaultProps);\n\n    const id =\n      this.props.id !== 'undefined' ? (this.props.id as string) : uid(this[Symbol.toStringTag]);\n    this.props.id = id;\n    this.id = id;\n    this.userData = this.props.userData || {};\n\n    this.addStats();\n  }\n\n  /**\n   * destroy can be called on any resource to release it before it is garbage collected.\n   */\n  destroy(): void {\n    this.destroyResource();\n  }\n\n  /** @deprecated Use destroy() */\n  delete(): this {\n    this.destroy();\n    return this;\n  }\n\n  /**\n   * Combines a map of user props and default props, only including props from defaultProps\n   * @returns returns a map of overridden default props\n   */\n  getProps(): object {\n    return this.props;\n  }\n\n  // ATTACHED RESOURCES\n\n  /**\n   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed\n   * Called automatically when sub resources are auto created but can be called by application\n   */\n  attachResource(resource: Resource<ResourceProps>): void {\n    this._attachedResources.add(resource);\n  }\n\n  /**\n   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.\n   */\n  detachResource(resource: Resource<ResourceProps>): void {\n    this._attachedResources.delete(resource);\n  }\n\n  /**\n   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.\n   */\n  destroyAttachedResource(resource: Resource<ResourceProps>): void {\n    if (this._attachedResources.delete(resource)) {\n      resource.destroy();\n    }\n  }\n\n  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */\n  destroyAttachedResources(): void {\n    for (const resource of Object.values(this._attachedResources)) {\n      resource.destroy();\n    }\n    // don't remove while we are iterating\n    this._attachedResources = new Set<Resource<ResourceProps>>();\n  }\n\n  // PROTECTED METHODS\n\n  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */\n  protected destroyResource(): void {\n    this.destroyAttachedResources();\n    this.removeStats();\n    this.destroyed = true;\n  }\n\n  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */\n  protected removeStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  /** Called by subclass to track memory allocations */\n  protected trackAllocatedMemory(bytes: number, name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.allocatedBytes = bytes;\n  }\n\n  /** Called by subclass to track memory deallocations */\n  protected trackDeallocatedMemory(name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').subtractCount(this.allocatedBytes);\n    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);\n    this.allocatedBytes = 0;\n  }\n\n  /** Called by resource constructor to track object creation */\n  private addStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n}\n\n/**\n * Combines a map of user props and default props, only including props from defaultProps\n * @param props\n * @param defaultProps\n * @returns returns a map of overridden default props\n */\nfunction selectivelyMerge<Props>(props: Props, defaultProps: Required<Props>): Required<Props> {\n  const mergedProps = {...defaultProps};\n  for (const key in props) {\n    if (props[key] !== undefined) {\n      mergedProps[key] = props[key];\n    }\n  }\n  return mergedProps;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '../../types';\nimport type {NormalizedDataType, PrimitiveDataType, SignedDataType} from '../data-types/data-types';\nimport type {VertexFormat, VertexFormatInfo} from './vertex-formats';\nimport {getDataTypeInfo, getDataType, getNormalizedDataType} from '../data-types/decode-data-types';\n\n/**\n * Decodes a vertex format, returning type, components, byte  length and flags (integer, signed, normalized)\n */\nexport function getVertexFormatInfo(format: VertexFormat): VertexFormatInfo {\n  // Strip the -webgl ending if present\n  let webglOnly: boolean | undefined;\n  if (format.endsWith('-webgl')) {\n    format.replace('-webgl', '');\n    webglOnly = true;\n  }\n  // split components from type\n  const [type_, count] = format.split('x');\n  const type = type_ as NormalizedDataType;\n  const components = (count ? parseInt(count) : 1) as 1 | 2 | 3 | 4;\n  // decode the type\n  const decodedType = getDataTypeInfo(type);\n  const result: VertexFormatInfo = {\n    type,\n    components,\n    byteLength: decodedType.byteLength * components,\n    integer: decodedType.integer,\n    signed: decodedType.signed,\n    normalized: decodedType.normalized\n  };\n  if (webglOnly) {\n    result.webglOnly = true;\n  }\n  return result;\n}\n\n/** Build a vertex format from a signed data type and a component */\nexport function makeVertexFormat(\n  signedDataType: SignedDataType,\n  components: 1 | 2 | 3 | 4,\n  normalized?: boolean\n): VertexFormat {\n  const dataType: NormalizedDataType = normalized\n    ? getNormalizedDataType(signedDataType)\n    : signedDataType;\n\n  switch (dataType) {\n    // TODO - Special cases for WebGL (not supported on WebGPU), overrides the check below\n    case 'unorm8':\n      if (components === 1) {\n        return 'unorm8';\n      }\n      if (components === 3) {\n        return 'unorm8x3-webgl';\n      }\n      return `${dataType}x${components}`;\n\n    case 'snorm8':\n    case 'uint8':\n    case 'sint8':\n    // WebGPU 8 bit formats must be aligned to 16 bit boundaries');\n    // fall through\n    case 'uint16':\n    case 'sint16':\n    case 'unorm16':\n    case 'snorm16':\n    case 'float16':\n      // WebGPU 16 bit formats must be aligned to 32 bit boundaries\n      if (components === 1 || components === 3) {\n        throw new Error(`size: ${components}`);\n      }\n      return `${dataType}x${components}`;\n\n    default:\n      return components === 1 ? dataType : `${dataType}x${components}`;\n  }\n}\n\n/** Get the vertex format for an attribute with TypedArray and size */\nexport function getVertexFormatFromAttribute(\n  typedArray: TypedArray,\n  size: number,\n  normalized?: boolean\n): VertexFormat {\n  if (!size || size > 4) {\n    throw new Error(`size ${size}`);\n  }\n\n  const components = size as 1 | 2 | 3 | 4;\n  const signedDataType = getDataType(typedArray);\n  return makeVertexFormat(signedDataType, components, normalized);\n}\n\n/** Return a \"default\" vertex format for a certain shader data type\n The simplest vertex format that matches the shader attribute's data type */\n\nexport function getCompatibleVertexFormat(opts: {\n  primitiveType: PrimitiveDataType;\n  components: 1 | 2 | 3 | 4;\n}): VertexFormat {\n  let vertexType: NormalizedDataType;\n  switch (opts.primitiveType) {\n    case 'f32':\n      vertexType = 'float32';\n      break;\n    case 'i32':\n      vertexType = 'sint32';\n      break;\n    case 'u32':\n      vertexType = 'uint32';\n      break;\n    case 'f16':\n      return opts.components <= 2 ? 'float16x2' : 'float16x4';\n  }\n\n  // TODO logic does not work for float16\n  if (opts.components === 1) {\n    return vertexType;\n  }\n  return `${vertexType}x${opts.components}`;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray, TypedArrayConstructor} from '../../types';\nimport {PrimitiveDataType, SignedDataType, NormalizedDataType, DataTypeInfo} from './data-types';\n\n/**\n * Gets info about a data type constant (signed or normalized)\n * @returns underlying primitive / signed types, byte length, normalization, integer, signed flags\n */\nexport function getDataTypeInfo(type: NormalizedDataType): DataTypeInfo {\n  const [signedType, primitiveType, byteLength] = NORMALIZED_TYPE_MAP[type];\n  const normalized: boolean = type.includes('norm');\n  const integer: boolean = !normalized && !type.startsWith('float');\n  const signed: boolean = type.startsWith('s');\n  return {\n    signedType,\n    primitiveType,\n    byteLength,\n    normalized,\n    integer,\n    signed\n  };\n}\n\n/** Build a vertex format from a signed data type and a component */\nexport function getNormalizedDataType(signedDataType: SignedDataType): NormalizedDataType {\n  const dataType: NormalizedDataType = signedDataType;\n  // prettier-ignore\n  switch (dataType) {\n    case 'uint8': return 'unorm8';\n    case 'sint8': return 'snorm8';\n    case 'uint16': return 'unorm16';\n    case 'sint16': return 'snorm16';\n    default: return dataType;\n  }\n}\n\n/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */\nexport function alignTo(size: number, count: number): number {\n  // prettier-ignore\n  switch (count) {\n    case 1: return size; // Pad upwards to even multiple of 2\n    case 2: return size + (size % 2); // Pad upwards to even multiple of 2\n    default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n  }\n}\n\n/** Returns the VariableShaderType that corresponds to a typed array */\nexport function getDataType(arrayOrType: TypedArray | TypedArrayConstructor): SignedDataType {\n  const Constructor = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  if (Constructor === Uint8ClampedArray) {\n    return 'uint8';\n  }\n  const info = Object.values(NORMALIZED_TYPE_MAP).find(entry => Constructor === entry[4]);\n  if (!info) {\n    throw new Error(Constructor.name);\n  }\n  return info[0];\n}\n\n/** Returns the TypedArray that corresponds to a shader data type */\nexport function getTypedArrayConstructor(type: NormalizedDataType): TypedArrayConstructor {\n  const [, , , , Constructor] = NORMALIZED_TYPE_MAP[type];\n  return Constructor;\n}\n\nconst NORMALIZED_TYPE_MAP: Record<\n  NormalizedDataType,\n  [\n    SignedDataType,\n    PrimitiveDataType,\n    bytes: 1 | 2 | 4,\n    normalized: boolean,\n    arrayConstructor: TypedArrayConstructor\n  ]\n> = {\n  uint8: ['uint8', 'u32', 1, false, Uint8Array],\n  sint8: ['sint8', 'i32', 1, false, Int8Array],\n  unorm8: ['uint8', 'f32', 1, true, Uint8Array],\n  snorm8: ['sint8', 'f32', 1, true, Int8Array],\n  uint16: ['uint16', 'u32', 2, false, Uint16Array],\n  sint16: ['sint16', 'i32', 2, false, Int16Array],\n  unorm16: ['uint16', 'u32', 2, true, Uint16Array],\n  snorm16: ['sint16', 'i32', 2, true, Int16Array],\n  float16: ['float16', 'f16', 2, false, Uint16Array],\n  float32: ['float32', 'f32', 4, false, Float32Array],\n  uint32: ['uint32', 'u32', 4, false, Uint32Array],\n  sint32: ['sint32', 'i32', 4, false, Int32Array]\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NormalizedDataType} from '../data-types/data-types';\nimport {getDataTypeInfo} from '../data-types/decode-data-types';\nimport type {\n  TextureFormat,\n  TextureFormatCompressed,\n  TextureFormatInfo,\n  TextureFormatCapabilities,\n  TextureFormatColor\n} from './texture-formats';\nimport {getTextureFormatDefinition} from './texture-format-table';\n\n// prettier-ignore\nconst COMPRESSED_TEXTURE_FORMAT_PREFIXES = [\n  'bc1', 'bc2', 'bc3', 'bc4', 'bc5', 'bc6', 'bc7', 'etc1', 'etc2', 'eac', 'atc', 'astc', 'pvrtc'\n];\n\nconst RGB_FORMAT_REGEX = /^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;\n\nexport class TextureFormatDecoder {\n  /** Returns information about a texture format, e.g. attatchment type, components, byte length and flags (integer, signed, normalized) */\n  getInfo(format: TextureFormat): TextureFormatInfo {\n    return getTextureFormatInfo(format);\n  }\n\n  /** Checks if a texture format is color */\n  isColor(format: TextureFormat): format is TextureFormatColor {\n    return format.startsWith('rgba') || format.startsWith('bgra') || format.startsWith('rgb');\n  }\n\n  /** Checks if a texture format is depth or stencil */\n  isDepthStencil(format: TextureFormat): boolean {\n    return format.startsWith('depth') || format.startsWith('stencil');\n  }\n\n  /** Checks if a texture format is compressed */\n  isCompressed(format: TextureFormat): format is TextureFormatCompressed {\n    return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some(prefix => (format as string).startsWith(prefix));\n  }\n\n  /**\n   * Returns the \"static\" capabilities of a texture format.\n   * @note Needs to be checked against current device\n   */\n  getCapabilities(format: TextureFormat): TextureFormatCapabilities {\n    const info = getTextureFormatDefinition(format);\n\n    const formatCapabilities: Required<TextureFormatCapabilities> = {\n      format,\n      create: info.f ?? true,\n      render: info.render ?? true,\n      filter: info.filter ?? true,\n      blend: info.blend ?? true,\n      store: info.store ?? true\n    };\n\n    const formatInfo = getTextureFormatInfo(format);\n    const isDepthStencil = format.startsWith('depth') || format.startsWith('stencil');\n    const isSigned = formatInfo?.signed;\n    const isInteger = formatInfo?.integer;\n    const isWebGLSpecific = formatInfo?.webgl;\n\n    // signed formats are not renderable\n    formatCapabilities.render &&= !isSigned;\n    // signed and integer formats are not filterable\n    formatCapabilities.filter &&= !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific;\n\n    return formatCapabilities;\n  }\n}\n\nexport const textureFormatDecoder = new TextureFormatDecoder();\n\n// HELPERS\n\n/**\n * Decodes a texture format, returning e.g. attatchment type, components, byte length and flags (integer, signed, normalized)\n */\nfunction getTextureFormatInfo(format: TextureFormat): TextureFormatInfo {\n  let formatInfo: TextureFormatInfo = getTextureFormatInfoUsingTable(format);\n\n  if (textureFormatDecoder.isCompressed(format)) {\n    formatInfo.channels = 'rgb';\n    formatInfo.components = 3;\n    formatInfo.bytesPerPixel = 1;\n    formatInfo.srgb = false;\n    formatInfo.compressed = true;\n\n    const blockSize = getCompressedTextureBlockSize(format);\n    if (blockSize) {\n      formatInfo.blockWidth = blockSize.blockWidth;\n      formatInfo.blockHeight = blockSize.blockHeight;\n    }\n  }\n\n  // Fill in missing information that can be derived from the format string\n  const matches = RGB_FORMAT_REGEX.exec(format as string);\n  if (matches) {\n    const [, channels, length, type, srgb, suffix] = matches;\n    const dataType = `${type}${length}` as NormalizedDataType;\n    const decodedType = getDataTypeInfo(dataType);\n    const bits = decodedType.byteLength * 8;\n    const components = channels.length as 1 | 2 | 3 | 4;\n    const bitsPerChannel: [number, number, number, number] = [\n      bits,\n      components >= 2 ? bits : 0,\n      components >= 3 ? bits : 0,\n      components >= 4 ? bits : 0\n    ];\n\n    formatInfo = {\n      format,\n      attachment: formatInfo.attachment,\n      dataType: decodedType.signedType,\n      components,\n      channels: channels as 'r' | 'rg' | 'rgb' | 'rgba',\n      integer: decodedType.integer,\n      signed: decodedType.signed,\n      normalized: decodedType.normalized,\n      bitsPerChannel,\n      bytesPerPixel: decodedType.byteLength * channels.length,\n      packed: formatInfo.packed,\n      srgb: formatInfo.srgb\n    };\n\n    if (suffix === '-webgl') {\n      formatInfo.webgl = true;\n    }\n    // dataType - overwritten by decodedType\n    if (srgb === '-srgb') {\n      formatInfo.srgb = true;\n    }\n  }\n\n  if (format.endsWith('-webgl')) {\n    formatInfo.webgl = true;\n  }\n  if (format.endsWith('-srgb')) {\n    formatInfo.srgb = true;\n  }\n\n  return formatInfo;\n}\n\n/** Decode texture format info from the table */\nfunction getTextureFormatInfoUsingTable(format: TextureFormat): TextureFormatInfo {\n  const info = getTextureFormatDefinition(format);\n\n  const bytesPerPixel = info.bytesPerPixel || 1;\n  const bitsPerChannel = info.bitsPerChannel || [8, 8, 8, 8];\n  delete info.bitsPerChannel;\n  delete info.bytesPerPixel;\n  delete info.f;\n  delete info.render;\n  delete info.filter;\n  delete info.blend;\n  delete info.store;\n\n  const formatInfo: TextureFormatInfo = {\n    ...info,\n    format,\n    attachment: info.attachment || 'color',\n    channels: info.channels || 'r',\n    components: (info.components || info.channels?.length || 1) as 1 | 2 | 3 | 4,\n    bytesPerPixel,\n    bitsPerChannel,\n    dataType: info.dataType || 'uint8',\n    srgb: info.srgb ?? false,\n    packed: info.packed ?? false,\n    webgl: info.webgl ?? false,\n    integer: info.integer ?? false,\n    signed: info.signed ?? false,\n    normalized: info.normalized ?? false,\n    compressed: info.compressed ?? false\n  };\n\n  return formatInfo;\n}\n\n/** Parses ASTC block widths from format string */\nfunction getCompressedTextureBlockSize(\n  format: TextureFormatCompressed\n): {blockWidth: number; blockHeight: number} | null {\n  const REGEX = /.*-(\\d+)x(\\d+)-.*/;\n  const matches = REGEX.exec(format as string);\n  if (matches) {\n    const [, blockWidth, blockHeight] = matches;\n    return {blockWidth: Number(blockWidth), blockHeight: Number(blockHeight)};\n  }\n  return null;\n}\n\n/*\n'r8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\n'r8snorm':\t{s: \"float\"}, // \t\t✓\t\t},\n'r8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t},\n'r8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t},\n'rg8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\n'rg8snorm':\t{s: \"float\"}, // \t\t✓\t\t},\n'rg8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t},\n'rg8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t},\n'rgba8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t✓},\n'rgba8unorm-srgb': {s: \"float\"}, // \t✓\t✓\t✓\t},\n'rgba8snorm':\t{s: \"float\"}, // \t\t✓\t\t✓},\n'rgba8uint':\t{s: \"uint\"}, // \t✓\t✓\t\t✓},\n'rgba8sint':\t{s: \"sint\"}, // \t✓\t✓\t\t✓},\n'bgra8unorm':\t{s: \"float\"}, // \t✓\t✓\t✓\t},\n'bgra8unorm-srgb': {s: \"float\"}, // \t✓\t✓\t✓\t},\n// 16-bit per component\t\t\t\t\t\n'r16uint': {s: \"uint\"}, // \t✓\t✓\t\t},\n'r16sint': {s: \"sint\"}, // \t✓\t✓\t\t},\n'r16float': {s: \"float\"}, // \t✓\t✓\t✓\t},\n'rg16uint': {s: \"uint\"}, // \t✓\t✓\t\t},\n'rg16sint': {s: \"sint\"}, // \t✓\t✓\t\t},\n'rg16float': {s: \"float\"}, // \t✓\t✓\t✓\t},\n'rgba16uint': {s: \"uint\"}, // \t✓\t✓\t\t✓},\n'rgba16sint': {s: \"sint\"}, // \t✓\t✓\t\t✓},\n'rgba16float': {s: \"float\"}, // \t✓\t✓\t✓\t✓},\n// 32-bit per component\t\t\t\t\t\n'r32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\n'r32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\n'r32float': {\"unfilterable-float\"\t✓\t✓\t\t✓},\n'rg32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\n'rg32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\n'rg32float': {\"unfilterable-float\"\t✓\t\t\t✓},\n'rgba32uint': {s: \"uint\"}, // \t✓\t\t\t✓},\n'rgba32sint': {s: \"sint\"}, // \t✓\t\t\t✓},\n'rgba32float': {\"unfilterable-float\"\t✓\t\t\t✓},\n// mixed component width\t\t\t\t\t\n'rgb10a2unorm': {s: \"float\"}, // \t✓\t✓\t✓\t}\n'rg11b10ufloat': {s: \"float\"}, // \t\t✓\t\t}\n// Format\tBytes per texel\tAspect\tGPUTextureSampleType\tValid image copy source\tValid image copy destination\n'stencil8': {1 − 4\tstencil\t\"uint\"\t✓}\n'depth16unorm': {2\tdepth\t\"depth\"\t✓}\n'depth24plus': {4\tdepth\t\"depth\"\t✗}\n'depth24plus': {stencil8\t4 − 8\tdepth\t\"depth\"\t✗}\n'stencil': {s: \"uint\"}, // \t✓}\n'depth32float': {4\tdepth\t\"depth\"\t✓\t✗}\n'depth24unorm': {stencil8\t4\tdepth\t\"depth\"\t✗}\n'stencil': {s: \"uint\"}, // \t✓}\n'depth32float': {stencil8}\n\n// Format\tBytes per block\tGPUTextureSampleType\tBlock Size\tFeature\n'rgb9e5ufloat': {c: 4, s: \"float\",\tbpp: 4/(1*1)},\n\n'bc1-rgba-unorm': {c: 4. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\n'bc1-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\n'bc2-rgba-unorm': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\n'bc2-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\n'bc3-rgba-unorm': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\n'bc3-rgba-unorm-srgb': {c: 4. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\n'bc4-r-unorm': {c: 1. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\n'bc4-r-snorm': {c: 1. s: \"float\", bpp: 8/(4 * 4) f: 'texture-compression-bc'},\n'bc5-rg-unorm': {c: 2. s: \"float\", bpp: 16/(4 * 4) f: 'texture-compression-bc'},\n'bc5-rg-snorm': { },\n'bc6h-rgb-ufloat': {\t16 },\n'bc6h-rgb-float': { },\n'bc7-rgba-unorm': {\t16 },\n'bc7-rgba-unorm-srgb': { },\n\n'etc2-rgb8unorm': {\t8\t\"float\"\t4 × 4\ttexture-compression-etc2 },\n'etc2-rgb8unorm-srgb': { },\n'etc2-rgb8a1unorm': {\t8 },\n'etc2-rgb8a1unorm-srgb': { },\n'etc2-rgba8unorm': {\t16 },\n'etc2-rgba8unorm-srgb': { },\n\n'eac-r11unorm': {\t8 },\n'eac-r11snorm': { },\n'eac-rg11unorm': {\t16 },\n'eac-rg11snorm': { },\n\n'astc-4x4-unorm': {\t16\t\"float\"\t4 × 4\ttexture-compression-astc },\n'astc-4x4-unorm-srgb': { },\n'astc-5x4-unorm': {\t16\t5 × 4 },\n'astc-5x4-unorm-srgb': { },\n'astc-5x5-unorm': {\t16\t5 × 5 },\n'astc-5x5-unorm-srgb': { },\n'astc-6x5-unorm': {\t16\t6 × 5 },\n'astc-6x5-unorm-srgb': { },\n'astc-6x6-unorm': {\t16\t6 × 6 },\n'astc-6x6-unorm-srgb': { },\n'astc-8x5-unorm': {\t16\t8 × 5 },\n'astc-8x5-unorm-srgb': { },\n'astc-8x6-unorm': {\t16\t8 × 6 },\n'astc-8x6-unorm-srgb': { },\n'astc-8x8-unorm': {\t16\t8 × 8 },\n'astc-8x8-unorm-srgb': { },\n'astc-10x5-unorm': {\t16\t10 × 5 },\n'astc-10x5-unorm-srgb': { },\n'astc-10x6-unorm': {\t16\t10 × 6 },\n'astc-10x6-unorm-srgb': { },\n'astc-10x8-unorm': {\t16\t10 × 8 },\n'astc-10x8-unorm-srgb': { },\n'astc-10x10-unorm': {\t16\t10 × 10 },\n'astc-10x10-unorm-srgb': { },\n'astc-12x10-unorm': {\t16\t12 × 10 },\n'astc-12x10-unorm-srgb': { },\n'astc-12x12-unorm': {\t16 },\n*/\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  TextureFormat,\n  TextureFormatColorUncompressed,\n  TextureFormatDepthStencil,\n  TextureFeature,\n  TextureFormatInfo,\n  TextureFormatCompressed\n} from './texture-formats';\n/* eslint-disable camelcase */\n\n// Define local device feature strings to optimize minification\nconst texture_compression_bc: TextureFeature = 'texture-compression-bc';\nconst texture_compression_astc: TextureFeature = 'texture-compression-astc';\nconst texture_compression_etc2: TextureFeature = 'texture-compression-etc2';\nconst texture_compression_etc1_webgl: TextureFeature = 'texture-compression-etc1-webgl';\nconst texture_compression_pvrtc_webgl: TextureFeature = 'texture-compression-pvrtc-webgl';\nconst texture_compression_atc_webgl: TextureFeature = 'texture-compression-atc-webgl';\n\nconst float32_renderable: TextureFeature = 'float32-renderable-webgl';\nconst float16_renderable: TextureFeature = 'float16-renderable-webgl';\nconst rgb9e5ufloat_renderable: TextureFeature = 'rgb9e5ufloat-renderable-webgl';\nconst snorm8_renderable: TextureFeature = 'snorm8-renderable-webgl';\nconst norm16_renderable: TextureFeature = 'norm16-renderable-webgl';\nconst snorm16_renderable: TextureFeature = 'snorm16-renderable-webgl';\n\nconst float32_filterable: TextureFeature = 'float32-filterable';\nconst float16_filterable: TextureFeature = 'float16-filterable-webgl';\n\n/** https://www.w3.org/TR/webgpu/#texture-format-caps */\n\n/** Internal type representing texture capabilities */\ntype TextureFormatDefinition = Partial<TextureFormatInfo> & {\n  /** for compressed texture formats */\n  f?: TextureFeature;\n  /** renderable if feature is present. false means the spec does not support this format */\n  render?: TextureFeature | false;\n  /** filterable if feature is present. false means the spec does not support this format */\n  filter?: TextureFeature | false;\n  blend?: TextureFeature | false;\n  store?: TextureFeature | false;\n\n  /** (bytes per pixel), for memory usage calculations. */\n  b?: number;\n  /** channels */\n  c?: number;\n  bpp?: number;\n  /** packed */\n  p?: number;\n\n  /** If not supported on WebGPU */\n  wgpu?: false;\n};\n\nexport function getTextureFormatDefinition(format: TextureFormat): TextureFormatDefinition {\n  const info = TEXTURE_FORMAT_TABLE[format];\n  if (!info) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return info;\n}\n\nexport function getTextureFormatTable(): Readonly<Record<TextureFormat, TextureFormatDefinition>> {\n  return TEXTURE_FORMAT_TABLE;\n}\n\n// prettier-ignore\nconst TEXTURE_FORMAT_COLOR_DEPTH_TABLE: Readonly<Record<TextureFormatColorUncompressed | TextureFormatDepthStencil, TextureFormatDefinition>> = {\n  // 8-bit formats\n  'r8unorm': {},\n  'rg8unorm': {},\n  'rgb8unorm-webgl': {},\n  'rgba8unorm': {},\n  'rgba8unorm-srgb': {},\n\n  'r8snorm': {render: snorm8_renderable},\n  'rg8snorm': {render: snorm8_renderable},\n  'rgb8snorm-webgl': {},\n  'rgba8snorm': {render: snorm8_renderable},\n\n  'r8uint': {},\n  'rg8uint': {},\n  'rgba8uint': {},\n\n  'r8sint': {},\n  'rg8sint': {},\n  'rgba8sint': {},\n\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n\n\n  'r16unorm': {f: norm16_renderable},\n  'rg16unorm': {render: norm16_renderable},\n  'rgb16unorm-webgl': {f: norm16_renderable}, // rgb not renderable\n  'rgba16unorm': {render: norm16_renderable},\n\n  'r16snorm': {f: snorm16_renderable},\n  'rg16snorm': {render: snorm16_renderable},\n  'rgb16snorm-webgl': {f: norm16_renderable}, // rgb not renderable\n  'rgba16snorm': {render: snorm16_renderable},\n\n  'r16uint': {},\n  'rg16uint': {},\n  'rgba16uint': {},\n\n  'r16sint': {},\n  'rg16sint': {},\n  'rgba16sint': {},\n\n  'r16float': {render: float16_renderable, filter: 'float16-filterable-webgl'},\n  'rg16float': {render: float16_renderable, filter: float16_filterable},\n  'rgba16float': {render: float16_renderable, filter: float16_filterable},\n\n  'r32uint': {},\n  'rg32uint': {},\n  'rgba32uint': {},\n\n  'r32sint': {},\n  'rg32sint': {},\n  'rgba32sint': {},\n\n  'r32float': {render: float32_renderable, filter: float32_filterable},\n  'rg32float': {render: false, filter: float32_filterable},\n  'rgb32float-webgl': {render: float32_renderable, filter: float32_filterable},\n  'rgba32float': {render: float32_renderable, filter: float32_filterable},\n\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {channels: 'rgba', bitsPerChannel: [4, 4, 4, 4], packed: true},\n  'rgb565unorm-webgl': {channels: 'rgb', bitsPerChannel: [5, 6, 5, 0], packed: true},\n  'rgb5a1unorm-webgl': {channels: 'rgba', bitsPerChannel: [5, 5, 5, 1], packed: true},\n\n  // Packed 32 bit formats\n  'rgb9e5ufloat': {channels: 'rgb', packed: true, render: rgb9e5ufloat_renderable}, // , filter: true},\n  'rg11b10ufloat': {channels: 'rgb', bitsPerChannel: [11, 11, 10, 0], packed: true, p: 1,render: float32_renderable},\n  'rgb10a2unorm': {channels: 'rgba',  bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1},\n  'rgb10a2uint': {channels: 'rgba',  bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1},\n\n  // Depth/stencil Formats\n  \n  // Depth and stencil formats\n  stencil8: {attachment: 'stencil', bitsPerChannel: [8, 0, 0, 0], dataType: 'uint8'},\n  'depth16unorm': {attachment: 'depth',  bitsPerChannel: [16, 0, 0, 0], dataType: 'uint16'},\n  'depth24plus': {attachment: 'depth', bitsPerChannel: [24, 0, 0, 0], dataType: 'uint32'},\n  'depth32float': {attachment: 'depth', bitsPerChannel: [32, 0, 0, 0], dataType: 'float32'},\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {attachment: 'depth-stencil', bitsPerChannel: [24, 8, 0, 0], packed: true},\n  // \"depth32float-stencil8\" feature\n  'depth32float-stencil8': {attachment: 'depth-stencil', bitsPerChannel: [32, 8, 0, 0], packed: true},\n};\n\n// prettier-ignore\nconst TEXTURE_FORMAT_COMPRESSED_TABLE: Readonly<Record<TextureFormatCompressed, TextureFormatDefinition>> = {\n\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n\n  'bc1-rgb-unorm-webgl': {f: texture_compression_bc},\n  'bc1-rgb-unorm-srgb-webgl': {f: texture_compression_bc},\n\n  'bc1-rgba-unorm': {f: texture_compression_bc},\n  'bc1-rgba-unorm-srgb': {f: texture_compression_bc},\n  'bc2-rgba-unorm': {f: texture_compression_bc},\n  'bc2-rgba-unorm-srgb': {f: texture_compression_bc},\n  'bc3-rgba-unorm': {f: texture_compression_bc},\n  'bc3-rgba-unorm-srgb': {f: texture_compression_bc},\n  'bc4-r-unorm': {f: texture_compression_bc},\n  'bc4-r-snorm': {f: texture_compression_bc},\n  'bc5-rg-unorm': {f: texture_compression_bc},\n  'bc5-rg-snorm': {f: texture_compression_bc},\n  'bc6h-rgb-ufloat': {f: texture_compression_bc},\n  'bc6h-rgb-float': {f: texture_compression_bc},\n  'bc7-rgba-unorm': {f: texture_compression_bc},\n  'bc7-rgba-unorm-srgb': {f: texture_compression_bc},\n\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n\n  'etc2-rgb8unorm': {f: texture_compression_etc2},\n  'etc2-rgb8unorm-srgb': {f: texture_compression_etc2},\n  'etc2-rgb8a1unorm': {f: texture_compression_etc2},\n  'etc2-rgb8a1unorm-srgb': {f: texture_compression_etc2},\n  'etc2-rgba8unorm': {f: texture_compression_etc2},\n  'etc2-rgba8unorm-srgb': {f: texture_compression_etc2},\n\n  'eac-r11unorm': {f: texture_compression_etc2},\n  'eac-r11snorm': {f: texture_compression_etc2},\n  'eac-rg11unorm': {f: texture_compression_etc2},\n  'eac-rg11snorm': {f: texture_compression_etc2},\n\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n\n  'astc-4x4-unorm': {f: texture_compression_astc},\n  'astc-4x4-unorm-srgb': {f: texture_compression_astc},\n  'astc-5x4-unorm': {f: texture_compression_astc},\n  'astc-5x4-unorm-srgb': {f: texture_compression_astc},\n  'astc-5x5-unorm': {f: texture_compression_astc},\n  'astc-5x5-unorm-srgb': {f: texture_compression_astc},\n  'astc-6x5-unorm': {f: texture_compression_astc},\n  'astc-6x5-unorm-srgb': {f: texture_compression_astc},\n  'astc-6x6-unorm': {f: texture_compression_astc},\n  'astc-6x6-unorm-srgb': {f: texture_compression_astc},\n  'astc-8x5-unorm': {f: texture_compression_astc},\n  'astc-8x5-unorm-srgb': {f: texture_compression_astc},\n  'astc-8x6-unorm': {f: texture_compression_astc},\n  'astc-8x6-unorm-srgb': {f: texture_compression_astc},\n  'astc-8x8-unorm': {f: texture_compression_astc},\n  'astc-8x8-unorm-srgb': {f: texture_compression_astc},\n  'astc-10x5-unorm': {f: texture_compression_astc},\n  'astc-10x5-unorm-srgb': {f: texture_compression_astc},\n  'astc-10x6-unorm': {f: texture_compression_astc},\n  'astc-10x6-unorm-srgb': {f: texture_compression_astc},\n  'astc-10x8-unorm': {f: texture_compression_astc},\n  'astc-10x8-unorm-srgb': {f: texture_compression_astc},\n  'astc-10x10-unorm': {f: texture_compression_astc},\n  'astc-10x10-unorm-srgb': {f: texture_compression_astc},\n  'astc-12x10-unorm': {f: texture_compression_astc},\n  'astc-12x10-unorm-srgb': {f: texture_compression_astc},\n  'astc-12x12-unorm': {f: texture_compression_astc},\n  'astc-12x12-unorm-srgb': {f: texture_compression_astc},\n\n  // WEBGL_compressed_texture_pvrtc\n\n  'pvrtc-rgb4unorm-webgl': {f: texture_compression_pvrtc_webgl},\n  'pvrtc-rgba4unorm-webgl': {f: texture_compression_pvrtc_webgl},\n  'pvrtc-rbg2unorm-webgl': {f: texture_compression_pvrtc_webgl},\n  'pvrtc-rgba2unorm-webgl': {f: texture_compression_pvrtc_webgl},\n\n  // WEBGL_compressed_texture_etc1\n\n  'etc1-rbg-unorm-webgl': {f: texture_compression_etc1_webgl},\n\n  // WEBGL_compressed_texture_atc\n\n  'atc-rgb-unorm-webgl': {f: texture_compression_atc_webgl},\n  'atc-rgba-unorm-webgl': {f: texture_compression_atc_webgl},\n  'atc-rgbai-unorm-webgl': {f: texture_compression_atc_webgl}\n};\n\nexport const TEXTURE_FORMAT_TABLE: Readonly<Record<TextureFormat, TextureFormatDefinition>> = {\n  ...TEXTURE_FORMAT_COLOR_DEPTH_TABLE,\n  ...TEXTURE_FORMAT_COMPRESSED_TABLE\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * Built-in data types that can be used to initialize textures\n * @note ImageData can be used for contiguous 8 bit data via Uint8ClampedArray\n */\nexport type ExternalImage =\n  | ImageBitmap\n  | ImageData\n  | HTMLImageElement\n  | HTMLVideoElement\n  | VideoFrame\n  | HTMLCanvasElement\n  | OffscreenCanvas;\n\nexport type ExternalImageData = {\n  data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView;\n  byteOffset?: number;\n  bytesPerRow?: number;\n  rowsPerImage?: number;\n};\n\n/** Check if data is an external image */\nexport function isExternalImage(data: unknown): data is ExternalImage {\n  return (\n    (typeof ImageData !== 'undefined' && data instanceof ImageData) ||\n    (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) ||\n    (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) ||\n    (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) ||\n    (typeof VideoFrame !== 'undefined' && data instanceof VideoFrame) ||\n    (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) ||\n    (typeof OffscreenCanvas !== 'undefined' && data instanceof OffscreenCanvas)\n  );\n}\n\n/** Determine size (width and height) of provided image data */\nexport function getExternalImageSize(data: ExternalImage): {width: number; height: number} {\n  if (\n    (typeof ImageData !== 'undefined' && data instanceof ImageData) ||\n    (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) ||\n    (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) ||\n    (typeof OffscreenCanvas !== 'undefined' && data instanceof OffscreenCanvas)\n  ) {\n    return {width: data.width, height: data.height};\n  }\n  if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n    return {width: data.naturalWidth, height: data.naturalHeight};\n  }\n  if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n    return {width: data.videoWidth, height: data.videoHeight};\n  }\n  if (typeof VideoFrame !== 'undefined' && data instanceof VideoFrame) {\n    // TODO: is this the right choice for width and height?\n    return {width: data.displayWidth, height: data.displayHeight};\n  }\n  throw new Error('Unknown image type');\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {isBrowser} from '@probe.gl/env';\nimport {Device, DeviceProps} from './device';\n\n/**\n * Create and attach devices for a specific backend.\n */\nexport abstract class Adapter {\n  // new (props: DeviceProps): Device; Constructor isn't used\n  abstract type: string;\n  /** Check if this backend is supported */\n  abstract isSupported(): boolean;\n  /** Check if the given handle is a valid device handle for this backend */\n  abstract isDeviceHandle(handle: unknown): boolean;\n  /** Create a new device for this backend */\n  abstract create(props: DeviceProps): Promise<Device>;\n  /** Attach a Device to a valid handle for this backend (GPUDevice, WebGL2RenderingContext etc) */\n  abstract attach(handle: unknown, props: DeviceProps): Promise<Device>;\n\n  /**\n   * Page load promise\n   * Resolves when the DOM is loaded.\n   * @note Since are be limitations on number of `load` event listeners,\n   * it is recommended avoid calling this accessor until actually needed.\n   * I.e. we don't call it unless you know that you will be looking up a string in the DOM.\n   */\n  get pageLoaded(): Promise<void> {\n    return getPageLoadPromise();\n  }\n}\n\n// HELPER FUNCTIONS\n\nconst isPage: boolean = isBrowser() && typeof document !== 'undefined';\nconst isPageLoaded: () => boolean = () => isPage && document.readyState === 'complete';\nlet pageLoadPromise: Promise<void> | null = null;\n\n/** Returns a promise that resolves when the page is loaded */\nfunction getPageLoadPromise(): Promise<void> {\n  if (!pageLoadPromise) {\n    if (isPageLoaded() || typeof window === 'undefined') {\n      pageLoadPromise = Promise.resolve();\n    } else {\n      pageLoadPromise = new Promise(resolve => window.addEventListener('load', () => resolve()));\n    }\n  }\n  return pageLoadPromise;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {isBrowser} from '@probe.gl/env';\nimport type {Device} from './device';\nimport type {Framebuffer} from './resources/framebuffer';\nimport type {TextureFormatDepthStencil} from '../shadertypes/textures/texture-formats';\nimport {uid} from '../utils/uid';\nimport {withResolvers} from '../utils/promise-utils';\n\n/** Properties for a CanvasContext */\nexport type CanvasContextProps = {\n  /** Identifier, for debugging */\n  id?: string;\n  /** If a canvas not supplied, one will be created and added to the DOM. If a string, a canvas with that id will be looked up in the DOM */\n  canvas?: HTMLCanvasElement | OffscreenCanvas | string | null;\n  /** If new canvas is created, it will be created in the specified container, otherwise is appended as a child of document.body */\n  container?: HTMLElement | string | null;\n  /** Width in pixels of the canvas - used when creating a new canvas */\n  width?: number;\n  /** Height in pixels of the canvas - used when creating a new canvas */\n  height?: number;\n  /** Visibility (only used if new canvas is created). */\n  visible?: boolean;\n  /** Whether to size the drawing buffer to the pixel size during auto resize. If a number is provided it is used as a static pixel ratio */\n  useDevicePixels?: boolean | number;\n  /** Whether to track window resizes. */\n  autoResize?: boolean;\n  /** @see https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/configure#alphamode */\n  alphaMode?: 'opaque' | 'premultiplied';\n  /** @see https://developer.mozilla.org/en-US/docs/Web/API/GPUCanvasContext/configure#colorspace */\n  colorSpace?: 'srgb'; // GPUPredefinedColorSpace\n  /** Whether to track position changes. Calls this.device.onPositionChange */\n  trackPosition?: boolean;\n};\n\nexport type MutableCanvasContextProps = {\n  /** Whether to size the drawing buffer to the pixel size during auto resize. If a number is provided it is used as a static pixel ratio */\n  useDevicePixels?: boolean | number;\n};\n\n/**\n * Manages a canvas. Supports both HTML or offscreen canvas\n * - Creates a new canvas or looks up a canvas from the DOM\n * - Provides check for DOM loaded\n * @todo commit() @see https://github.com/w3ctag/design-reviews/issues/288\n * @todo transferControlToOffscreen: @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen\n */\nexport abstract class CanvasContext {\n  static isHTMLCanvas(canvas: unknown): canvas is HTMLCanvasElement {\n    return typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement;\n  }\n\n  static isOffscreenCanvas(canvas: unknown): canvas is OffscreenCanvas {\n    return typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas;\n  }\n\n  static defaultProps: Required<CanvasContextProps> = {\n    id: undefined!,\n    canvas: null,\n    width: 800,\n    height: 600,\n    useDevicePixels: true,\n    autoResize: true,\n    container: null,\n    visible: true,\n    alphaMode: 'opaque',\n    colorSpace: 'srgb',\n    trackPosition: false\n  };\n\n  abstract readonly device: Device;\n  abstract readonly handle: unknown;\n  readonly id: string;\n\n  readonly props: Required<CanvasContextProps>;\n  readonly canvas: HTMLCanvasElement | OffscreenCanvas;\n  /** Handle to HTML canvas */\n  readonly htmlCanvas?: HTMLCanvasElement;\n  /** Handle to wrapped OffScreenCanvas */\n  readonly offscreenCanvas?: OffscreenCanvas;\n  readonly type: 'html-canvas' | 'offscreen-canvas' | 'node';\n\n  /** Promise that resolved once the resize observer has updated the pixel size */\n  initialized: Promise<void>;\n  isInitialized: boolean = false;\n\n  /** Visibility is automatically updated (via an IntersectionObserver) */\n  isVisible: boolean = true;\n\n  /** Width of canvas in CSS units (tracked by a ResizeObserver) */\n  cssWidth: number;\n  /** Height of canvas in CSS units (tracked by a ResizeObserver) */\n  cssHeight: number;\n\n  /** Device pixel ratio. Automatically updated via media queries */\n  devicePixelRatio: number;\n  /** Exact width of canvas in physical pixels (tracked by a ResizeObserver) */\n  devicePixelWidth: number;\n  /** Exact height of canvas in physical pixels (tracked by a ResizeObserver) */\n  devicePixelHeight: number;\n\n  /** Width of drawing buffer: automatically tracks this.pixelWidth if props.autoResize is true */\n  drawingBufferWidth: number;\n  /** Height of drawing buffer: automatically tracks this.pixelHeight if props.autoResize is true */\n  drawingBufferHeight: number;\n\n  protected _initializedResolvers = withResolvers<void>();\n  protected readonly _resizeObserver: ResizeObserver | undefined;\n  protected readonly _intersectionObserver: IntersectionObserver | undefined;\n  protected _position: [number, number];\n  protected destroyed = false;\n\n  abstract get [Symbol.toStringTag](): string;\n\n  toString(): string {\n    return `${this[Symbol.toStringTag]}(${this.id})`;\n  }\n\n  constructor(props?: CanvasContextProps) {\n    this.props = {...CanvasContext.defaultProps, ...props};\n    props = this.props;\n\n    this.initialized = this._initializedResolvers.promise;\n\n    // Create a canvas element if needed\n    if (!isBrowser()) {\n      // TODO - does this prevent app from using jsdom style polyfills?\n      this.canvas = {width: props.width || 1, height: props.height || 1} as OffscreenCanvas;\n    } else if (!props.canvas) {\n      this.canvas = createCanvasElement(props);\n    } else if (typeof props.canvas === 'string') {\n      this.canvas = getCanvasFromDOM(props.canvas);\n    } else {\n      this.canvas = props.canvas;\n    }\n\n    if (CanvasContext.isHTMLCanvas(this.canvas)) {\n      this.id = props.id || this.canvas.id;\n      this.type = 'html-canvas';\n      this.htmlCanvas = this.canvas;\n    } else if (CanvasContext.isOffscreenCanvas(this.canvas)) {\n      this.id = props.id || 'offscreen-canvas';\n      this.type = 'offscreen-canvas';\n      this.offscreenCanvas = this.canvas;\n    } else {\n      // TODO - Node.js support is currently untested (was used for headless-gl in luma v8)\n      this.id = props.id || 'node-canvas-context';\n      this.type = 'node';\n    }\n\n    // Initialize size variables to some sane values (these will be updated by ResizeObserver)\n    this.cssWidth = this.htmlCanvas?.clientWidth || this.canvas.width;\n    this.cssHeight = this.htmlCanvas?.clientHeight || this.canvas.height;\n    this.devicePixelWidth = this.canvas.width;\n    this.devicePixelHeight = this.canvas.height;\n    this.drawingBufferWidth = this.canvas.width;\n    this.drawingBufferHeight = this.canvas.height;\n    this.devicePixelRatio = globalThis.devicePixelRatio || 1;\n    this._position = [0, 0];\n\n    if (CanvasContext.isHTMLCanvas(this.canvas)) {\n      // Track visibility changes\n      this._intersectionObserver = new IntersectionObserver(entries =>\n        this._handleIntersection(entries)\n      );\n      this._intersectionObserver.observe(this.canvas);\n\n      // Track size changes\n      this._resizeObserver = new ResizeObserver(entries => this._handleResize(entries));\n      try {\n        this._resizeObserver.observe(this.canvas, {box: 'device-pixel-content-box'});\n      } catch {\n        // Safari fallback\n        this._resizeObserver.observe(this.canvas, {box: 'content-box'});\n      }\n\n      // Track device pixel ratio changes.\n      // Defer call to after construction completes to ensure `this.device` is available.\n      setTimeout(() => this._observeDevicePixelRatio(), 0);\n\n      // Track top/left position changes\n      if (this.props.trackPosition) {\n        this._trackPosition();\n      }\n    }\n  }\n\n  destroy() {\n    this.destroyed = true;\n  }\n\n  setProps(props: MutableCanvasContextProps): this {\n    if ('useDevicePixels' in props) {\n      this.props.useDevicePixels = props.useDevicePixels || false;\n      this._updateDrawingBufferSize();\n    }\n    return this;\n  }\n\n  /** Returns a framebuffer with properly resized current 'swap chain' textures */\n  abstract getCurrentFramebuffer(options?: {\n    depthStencilFormat?: TextureFormatDepthStencil | false;\n  }): Framebuffer;\n\n  // SIZE METHODS\n\n  /**\n   * Returns the size covered by the canvas in CSS pixels\n   * @note This can be different from the actual device pixel size of a canvas due to DPR scaling, and rounding to integer pixels\n   * @note This is independent of the canvas' internal drawing buffer size (.width, .height).\n   */\n  getCSSSize(): [number, number] {\n    return [this.cssWidth, this.cssHeight];\n  }\n\n  getPosition() {\n    return this._position;\n  }\n\n  /**\n   * Returns the size covered by the canvas in actual device pixels.\n   * @note This can be different from the 'CSS' size of a canvas due to DPR scaling, and rounding to integer pixels\n   * @note This is independent of the canvas' internal drawing buffer size (.width, .height).\n   */\n  getDevicePixelSize(): [number, number] {\n    return [this.devicePixelWidth, this.devicePixelHeight];\n  }\n\n  /** Get the drawing buffer size (number of pixels GPU is rendering into, can be different from CSS size) */\n  getDrawingBufferSize(): [number, number] {\n    return [this.drawingBufferWidth, this.drawingBufferHeight];\n  }\n\n  /** Returns the biggest allowed framebuffer size. @todo Allow the application to limit this? */\n  getMaxDrawingBufferSize(): [number, number] {\n    const maxTextureDimension = this.device.limits.maxTextureDimension2D;\n    return [maxTextureDimension, maxTextureDimension];\n  }\n\n  /** Update the canvas drawing buffer size. Called automatically if props.autoResize is true. */\n  setDrawingBufferSize(width: number, height: number) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n\n    this.drawingBufferWidth = width;\n    this.drawingBufferHeight = height;\n  }\n\n  /**\n   * Returns the current DPR (number of physical pixels per CSS pixel), if props.useDevicePixels is true\n   * @note This can be a fractional (non-integer) number, e.g. when the user zooms in the browser.\n   * @note This function handles the non-HTML canvas cases\n   */\n  getDevicePixelRatio(): number {\n    const dpr = typeof window !== 'undefined' && window.devicePixelRatio;\n    return dpr || 1;\n  }\n\n  // DEPRECATED METHODS\n\n  /**\n   * Maps CSS pixel position to device pixel position\n   */\n  cssToDevicePixels(\n    cssPixel: [number, number],\n    yInvert: boolean = true\n  ): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } {\n    const ratio = this.cssToDeviceRatio();\n    const [width, height] = this.getDrawingBufferSize();\n    return scalePixels(cssPixel, ratio, width, height, yInvert);\n  }\n\n  /** @deprecated - use .getDevicePixelSize() */\n  getPixelSize() {\n    return this.getDevicePixelSize();\n  }\n\n  /** @deprecated - TODO which values should we use for aspect */\n  getAspect(): number {\n    const [width, height] = this.getDevicePixelSize();\n    return width / height;\n  }\n\n  /** @deprecated Returns multiplier need to convert CSS size to Device size */\n  cssToDeviceRatio(): number {\n    try {\n      const [drawingBufferWidth] = this.getDrawingBufferSize();\n      const [cssWidth] = this.getCSSSize();\n      return cssWidth ? drawingBufferWidth / cssWidth : 1;\n    } catch {\n      return 1;\n    }\n  }\n\n  /** @deprecated Use canvasContext.setDrawingBufferSize() */\n  resize(size: {width: number; height: number}): void {\n    this.setDrawingBufferSize(size.width, size.height);\n  }\n\n  // SUBCLASS OVERRIDES\n\n  /**\n   * Performs platform specific updates (WebGPU vs WebGL)\n   * Can be called after changes to size or props,\n   * to give implementation an opportunity to update configurations.\n   */\n  protected abstract _updateDevice(): void;\n\n  // IMPLEMENTATION\n\n  /**\n   * Allows subclass constructor to override the canvas id for auto created canvases.\n   * This can really help when debugging DOM in apps that create multiple devices\n   */\n  protected _setAutoCreatedCanvasId(id: string) {\n    if (this.htmlCanvas?.id === 'lumagl-auto-created-canvas') {\n      this.htmlCanvas.id = id;\n    }\n  }\n\n  /** reacts to an observed intersection */\n  protected _handleIntersection(entries: IntersectionObserverEntry[]) {\n    const entry = entries.find(entry_ => entry_.target === this.canvas);\n    if (!entry) {\n      return;\n    }\n    // TODO - store intersection rectangle?\n    const isVisible = entry.isIntersecting;\n    if (this.isVisible !== isVisible) {\n      this.isVisible = isVisible;\n      this.device.props.onVisibilityChange(this);\n    }\n  }\n\n  /**\n   * Reacts to an observed resize by using the most accurate pixel size information the browser can provide\n   * @see https://web.dev/articles/device-pixel-content-box\n   * @see https://webgpufundamentals.org/webgpu/lessons/webgpu-resizing-the-canvas.html\n   */\n  protected _handleResize(entries: ResizeObserverEntry[]) {\n    const entry = entries.find(entry_ => entry_.target === this.canvas);\n    if (!entry) {\n      return;\n    }\n\n    // Update CSS size using content box size\n    this.cssWidth = entry.contentBoxSize[0].inlineSize;\n    this.cssHeight = entry.contentBoxSize[0].blockSize;\n\n    // Update our drawing buffer size variables, saving the old values for logging\n    const oldPixelSize = this.getDevicePixelSize();\n\n    // Use the most accurate drawing buffer size information the current browser can provide\n    // Note: content box sizes are guaranteed to be integers\n    // Note: Safari falls back to contentBoxSize\n    const devicePixelWidth =\n      entry.devicePixelContentBoxSize?.[0].inlineSize ||\n      entry.contentBoxSize[0].inlineSize * devicePixelRatio;\n\n    const devicePixelHeight =\n      entry.devicePixelContentBoxSize?.[0].blockSize ||\n      entry.contentBoxSize[0].blockSize * devicePixelRatio;\n\n    // Make sure we don't overflow the maximum supported texture size\n    const [maxDevicePixelWidth, maxDevicePixelHeight] = this.getMaxDrawingBufferSize();\n    this.devicePixelWidth = Math.max(1, Math.min(devicePixelWidth, maxDevicePixelWidth));\n    this.devicePixelHeight = Math.max(1, Math.min(devicePixelHeight, maxDevicePixelHeight));\n\n    this._updateDrawingBufferSize();\n\n    // Inform the device\n    this.device.props.onResize(this, {oldPixelSize});\n  }\n\n  protected _updateDrawingBufferSize() {\n    // Update the canvas drawing buffer size\n    if (this.props.autoResize) {\n      if (typeof this.props.useDevicePixels === 'number') {\n        const dpr = this.props.useDevicePixels;\n        this.setDrawingBufferSize(this.cssWidth * dpr, this.cssHeight * dpr);\n      } else if (this.props.useDevicePixels) {\n        this.setDrawingBufferSize(this.devicePixelWidth, this.devicePixelHeight);\n      } else {\n        this.setDrawingBufferSize(this.cssWidth, this.cssHeight);\n      }\n\n      // Inform the subclass\n      this._updateDevice();\n    }\n\n    // Resolve the initialized promise\n    this._initializedResolvers.resolve();\n    this.isInitialized = true;\n\n    this.updatePosition();\n  }\n\n  /** Monitor DPR changes */\n  _observeDevicePixelRatio() {\n    const oldRatio = this.devicePixelRatio;\n    this.devicePixelRatio = window.devicePixelRatio;\n\n    this.updatePosition();\n\n    // Inform the device\n    this.device.props.onDevicePixelRatioChange(this, {oldRatio});\n    // Set up a one time query against the current resolution.\n    matchMedia(`(resolution: ${this.devicePixelRatio}dppx)`).addEventListener(\n      'change',\n      () => this._observeDevicePixelRatio(),\n      {once: true}\n    );\n  }\n\n  /** Start tracking positions with a timer */\n  _trackPosition(intervalMs: number = 100): void {\n    const intervalId = setInterval(() => {\n      if (this.destroyed) {\n        clearInterval(intervalId);\n      } else {\n        this.updatePosition();\n      }\n    }, intervalMs);\n  }\n\n  /**\n   * Calculated the absolute position of the canvas\n   * @note - getBoundingClientRect() is normally cheap but can be expensive\n   * if called before browser has finished a reflow. Should not be the case here.\n   */\n  updatePosition() {\n    const newRect = this.htmlCanvas?.getBoundingClientRect();\n    if (newRect) {\n      // We only track position since we rely on the more precise ResizeObserver for size\n      const position: [number, number] = [newRect.left, newRect.top];\n      this._position ??= position;\n      const positionChanged =\n        position[0] !== this._position[0] || position[1] !== this._position[1];\n      if (positionChanged) {\n        const oldPosition = this._position;\n        this._position = position;\n        this.device.props.onPositionChange?.(this, {oldPosition});\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/** Get a container element from a string or DOM element */\nfunction getContainer(container: HTMLElement | string | null): HTMLElement {\n  if (typeof container === 'string') {\n    const element = document.getElementById(container);\n    if (!element) {\n      throw new Error(`${container} is not an HTML element`);\n    }\n    return element;\n  }\n  if (container) {\n    return container;\n  }\n  return document.body;\n}\n\n/** Get a Canvas element from DOM id */\nfunction getCanvasFromDOM(canvasId: string): HTMLCanvasElement {\n  const canvas = document.getElementById(canvasId);\n  if (!CanvasContext.isHTMLCanvas(canvas)) {\n    throw new Error('Object is not a canvas element');\n  }\n  return canvas;\n}\n\n/** Create a new canvas */\nfunction createCanvasElement(props: CanvasContextProps) {\n  const {width, height} = props;\n  const newCanvas = document.createElement('canvas');\n  newCanvas.id = uid('lumagl-auto-created-canvas');\n  newCanvas.width = width || 1;\n  newCanvas.height = height || 1;\n  newCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  newCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  if (!props?.visible) {\n    newCanvas.style.visibility = 'hidden';\n  }\n  // Insert the canvas in the DOM\n  const container = getContainer(props?.container || null);\n  container.insertBefore(newCanvas, container.firstChild);\n\n  return newCanvas;\n}\n\n/**\n * Scales pixels linearly, handles edge cases\n * @param pixel\n * @param ratio\n * @param width\n * @param height\n * @param yInvert\n * @returns\n */\nfunction scalePixels(\n  pixel: [number, number],\n  ratio: number,\n  width: number,\n  height: number,\n  yInvert: boolean\n): {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n} {\n  const point = pixel;\n\n  const x = scaleX(point[0], ratio, width);\n  let y = scaleY(point[1], ratio, height, yInvert);\n\n  // Find boundaries of next pixel to provide valid range of device pixel locations\n\n  let t = scaleX(point[0] + 1, ratio, width);\n  // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary\n  const xHigh = t === width - 1 ? t : t - 1;\n\n  t = scaleY(point[1] + 1, ratio, height, yInvert);\n  let yHigh;\n  if (yInvert) {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    t = t === 0 ? t : t + 1;\n    // swap y and yHigh\n    yHigh = y;\n    y = t;\n  } else {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    yHigh = t === height - 1 ? t : t - 1;\n    // y remains same\n  }\n  return {\n    x,\n    y,\n    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.\n    width: Math.max(xHigh - x + 1, 1),\n    height: Math.max(yHigh - y + 1, 1)\n  };\n}\n\nfunction scaleX(x: number, ratio: number, width: number): number {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  const r = Math.min(Math.round(x * ratio), width - 1);\n  return r;\n}\n\nfunction scaleY(y: number, ratio: number, height: number, yInvert: boolean): number {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  return yInvert\n    ? Math.max(0, height - 1 - Math.round(y * ratio))\n    : Math.min(Math.round(y * ratio), height - 1);\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// TODO - replace with Promise.withResolvers once we upgrade TS baseline\nexport function withResolvers<T>(): {\n  promise: Promise<T>;\n  resolve: (t: T) => void;\n  reject: (error: Error) => void;\n} {\n  let resolve: (t: T) => void;\n  let reject: (error: Error) => void;\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  // @ts-expect-error - in fact these are no used before initialized\n  return {promise, resolve, reject};\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray} from '@math.gl/types';\nimport type {Device} from '../device';\nimport type {TextureFormat} from '../../shadertypes/textures/texture-formats';\nimport type {TextureView, TextureViewProps} from './texture-view';\nimport {Resource, ResourceProps} from './resource';\nimport {Sampler, SamplerProps} from './sampler';\nimport {ExternalImage} from '../../image-utils/image-types';\nimport {log} from '../../utils/log';\n\n/** Options for Texture.copyExternalImage */\nexport type CopyExternalImageOptions = {\n  /** Image */\n  image: ExternalImage;\n  /** Copy from image x offset (default 0) */\n  sourceX?: number;\n  /** Copy from image y offset (default 0) */\n  sourceY?: number;\n  /** Copy area width (default 1) */\n  width?: number;\n  /** Copy area height (default 1) */\n  height?: number;\n  /** Copy depth, number of layers/depth slices(default 1) */\n  depth?: number;\n  /** Start copying into offset x (default 0) */\n  x?: number;\n  /** Start copying into offset y (default 0) */\n  y?: number;\n  /** Start copying into layer / depth slice z (default 0) */\n  z?: number;\n  /** Which mip-level to copy into (default 0) */\n  mipLevel?: number;\n  /** When copying into depth stencil textures (default 'all') */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  /** Specific color space of image data */\n  colorSpace?: 'srgb';\n  /** load as premultiplied alpha  */\n  premultipliedAlpha?: boolean;\n  /** Whether to flip the image vertically */\n  flipY?: boolean;\n};\n\n/** Options for copyImageData */\nexport type CopyImageDataOptions = {\n  /** Data to copy (array of bytes) */\n  data: ArrayBuffer | SharedArrayBuffer | ArrayBufferView;\n  /** Offset into the data (in addition to any offset built-in to the ArrayBufferView) */\n  byteOffset?: number;\n  /** The stride, in bytes, between the beginning of each texel block row and the subsequent texel block row. Required if there are multiple texel block rows (i.e. the copy height or depth is more than one block). */\n  bytesPerRow?: number;\n  /** Number or rows per image (needed if multiple images are being set) */\n  rowsPerImage?: number;\n  /** Start copying into offset x (default 0) */\n  x?: number;\n  /** Start copying into offset y (default 0) */\n  y?: number;\n  /** Start copying from depth layer z (default 0) */\n  z?: number;\n  /** Which mip-level to copy into (default 0) */\n  mipLevel?: number;\n  /** When copying into depth stencil textures (default 'all') */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n};\n\nconst BASE_DIMENSIONS: Record<string, '1d' | '2d' | '3d'> = {\n  '1d': '1d',\n  '2d': '2d',\n  '2d-array': '2d',\n  cube: '2d',\n  'cube-array': '2d',\n  '3d': '3d'\n};\n\n/** Texture properties */\nexport type TextureProps = ResourceProps & {\n  /** @deprecated Use AsyncTexture to create textures with data. */\n  data?: ExternalImage | TypedArray | null;\n  /** Dimension of this texture. Defaults to '2d' */\n  dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** The format (bit layout) of the textures pixel data */\n  format?: TextureFormat;\n  /** Width in texels */\n  width: number;\n  /** Width in texels */\n  height: number;\n  /** Number of depth layers */\n  depth?: number;\n  /** How this texture will be used. Defaults to TEXTURE | COPY_DST | RENDER_ATTACHMENT */\n  usage?: number;\n  /** How many mip levels */\n  mipLevels?: number;\n  /** Multi sampling */\n  samples?: number;\n\n  /** Sampler (or SamplerProps) for the default sampler for this texture. Used if no sampler provided. Note that other samplers can still be used. */\n  sampler?: Sampler | SamplerProps;\n  /** Props for the default TextureView for this texture. Note that other views can still be created and used. */\n  view?: TextureViewProps;\n};\n\n/**\n * Abstract Texture interface\n * Texture Object\n * https://gpuweb.github.io/gpuweb/#gputexture\n */\nexport abstract class Texture extends Resource<TextureProps> {\n  /** The texture can be bound for use as a sampled texture in a shader */\n  static SAMPLE = 0x04;\n  /** The texture can be bound for use as a storage texture in a shader */\n  static STORAGE = 0x08;\n  /** The texture can be used as a color or depth/stencil attachment in a render pass */\n  static RENDER = 0x10;\n  /** The texture can be used as the source of a copy operation */\n  static COPY_SRC = 0x01;\n  /** he texture can be used as the destination of a copy or write operation */\n  static COPY_DST = 0x02;\n\n  /** @deprecated Use Texture.SAMPLE */\n  static TEXTURE = 0x04;\n  /** @deprecated Use Texture.RENDER */\n  static RENDER_ATTACHMENT = 0x10;\n\n  /** dimension of this texture */\n  readonly dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** base dimension of this texture */\n  readonly baseDimension: '1d' | '2d' | '3d';\n  /** format of this texture */\n  readonly format: TextureFormat;\n  /** width in pixels of this texture */\n  width: number;\n  /** height in pixels of this texture */\n  height: number;\n  /** depth of this texture */\n  depth: number;\n  /** mip levels in this texture */\n  mipLevels: number;\n  /** Default sampler for this texture */\n  abstract sampler: Sampler;\n  /** Default view for this texture */\n  abstract view: TextureView;\n\n  /** \"Time\" of last update. Monotonically increasing timestamp. TODO move to AsyncTexture? */\n  updateTimestamp: number;\n\n  override get [Symbol.toStringTag](): string {\n    return 'Texture';\n  }\n\n  override toString(): string {\n    return `Texture(${this.id},${this.format},${this.width}x${this.height})`;\n  }\n\n  /** Do not use directly. Create with device.createTexture() */\n  constructor(device: Device, props: TextureProps) {\n    props = Texture.normalizeProps(device, props);\n    super(device, props, Texture.defaultProps);\n    this.dimension = this.props.dimension;\n    this.baseDimension = BASE_DIMENSIONS[this.dimension];\n    this.format = this.props.format;\n\n    // Size\n    this.width = this.props.width;\n    this.height = this.props.height;\n    this.depth = this.props.depth;\n    this.mipLevels = this.props.mipLevels;\n\n    // Calculate size, if not provided\n    if (this.props.width === undefined || this.props.height === undefined) {\n      if (device.isExternalImage(props.data)) {\n        const size = device.getExternalImageSize(props.data);\n        this.width = size?.width || 1;\n        this.height = size?.height || 1;\n      } else {\n        this.width = 1;\n        this.height = 1;\n        if (this.props.width === undefined || this.props.height === undefined) {\n          log.warn(\n            `${this} created with undefined width or height. This is deprecated. Use AsyncTexture instead.`\n          )();\n        }\n      }\n    }\n\n    // TODO - perhaps this should be set on async write completion?\n    this.updateTimestamp = device.incrementTimestamp();\n  }\n\n  /** Set sampler props associated with this texture */\n  setSampler(sampler: Sampler | SamplerProps): void {\n    this.sampler = sampler instanceof Sampler ? sampler : this.device.createSampler(sampler);\n  }\n  /** Create a texture view for this texture */\n  abstract createView(props: TextureViewProps): TextureView;\n  /** Copy an image (e.g an ImageBitmap) into the texture */\n  abstract copyExternalImage(options: CopyExternalImageOptions): {width: number; height: number};\n  /** Copy raw image data (bytes) into the texture */\n  abstract copyImageData(options: CopyImageDataOptions): void;\n  /** Generate mipmaps (WebGL only) */\n  abstract generateMipmapsWebGL(): void;\n\n  /**\n   * Create a new texture with the same parameters and optionally a different size\n   * @note Textures are immutable and cannot be resized after creation, but we can create a similar texture with the same parameters but a new size.\n   * @note Does not copy contents of the texture\n   */\n  clone(size?: {width: number; height: number}): Texture {\n    return this.device.createTexture({...this.props, ...size});\n  }\n\n  /** Ensure we have integer coordinates */\n  protected static normalizeProps(device: Device, props: TextureProps): TextureProps {\n    const newProps = {...props};\n\n    // Ensure we have integer coordinates\n    const {width, height} = newProps;\n    if (typeof width === 'number') {\n      newProps.width = Math.max(1, Math.ceil(width));\n    }\n    if (typeof height === 'number') {\n      newProps.height = Math.max(1, Math.ceil(height));\n    }\n    return newProps;\n  }\n\n  // HELPERS\n\n  /** Initialize texture with supplied props */\n  // eslint-disable-next-line max-statements\n  _initializeData(data: TextureProps['data']): void {\n    // Store opts for accessors\n\n    if (this.device.isExternalImage(data)) {\n      this.copyExternalImage({\n        image: data,\n        width: this.width,\n        height: this.height,\n        depth: this.depth,\n        mipLevel: 0,\n        x: 0,\n        y: 0,\n        z: 0,\n        aspect: 'all',\n        colorSpace: 'srgb',\n        premultipliedAlpha: false,\n        flipY: false\n      });\n    } else if (data) {\n      this.copyImageData({\n        data,\n        // width: this.width,\n        // height: this.height,\n        // depth: this.depth,\n        mipLevel: 0,\n        x: 0,\n        y: 0,\n        z: 0,\n        aspect: 'all'\n      });\n    }\n  }\n\n  _normalizeCopyImageDataOptions(options_: CopyImageDataOptions): Required<CopyImageDataOptions> {\n    const {width, height, depth} = this;\n    const options = {...Texture.defaultCopyDataOptions, width, height, depth, ...options_};\n\n    const info = this.device.getTextureFormatInfo(this.format);\n    if (!options_.bytesPerRow && !info.bytesPerPixel) {\n      throw new Error(`bytesPerRow must be provided for texture format ${this.format}`);\n    }\n    options.bytesPerRow = options_.bytesPerRow || width * (info.bytesPerPixel || 4);\n    options.rowsPerImage = options_.rowsPerImage || height;\n\n    // WebGL will error if we try to copy outside the bounds of the texture\n    // options.width = Math.min(options.width, this.width - options.x);\n    // options.height = Math.min(options.height, this.height - options.y);\n    return options;\n  }\n\n  _normalizeCopyExternalImageOptions(\n    options_: CopyExternalImageOptions\n  ): Required<CopyExternalImageOptions> {\n    const size = this.device.getExternalImageSize(options_.image);\n    const options = {...Texture.defaultCopyExternalImageOptions, ...size, ...options_};\n    // WebGL will error if we try to copy outside the bounds of the texture\n    options.width = Math.min(options.width, this.width - options.x);\n    options.height = Math.min(options.height, this.height - options.y);\n    return options;\n  }\n\n  /** Default options */\n  static override defaultProps: Required<TextureProps> = {\n    ...Resource.defaultProps,\n    data: null,\n    dimension: '2d',\n    format: 'rgba8unorm',\n    usage: Texture.TEXTURE | Texture.RENDER_ATTACHMENT | Texture.COPY_DST,\n    width: undefined!,\n    height: undefined!,\n    depth: 1,\n    mipLevels: 1,\n    samples: undefined!,\n    sampler: {},\n    view: undefined!\n  };\n\n  protected static defaultCopyDataOptions: Required<CopyImageDataOptions> = {\n    data: undefined!,\n    byteOffset: 0,\n    bytesPerRow: undefined!,\n    rowsPerImage: undefined!,\n    mipLevel: 0,\n    x: 0,\n    y: 0,\n    z: 0,\n    aspect: 'all'\n  };\n\n  /** Default options */\n  protected static defaultCopyExternalImageOptions: Required<CopyExternalImageOptions> = {\n    image: undefined!,\n    sourceX: 0,\n    sourceY: 0,\n    width: undefined!,\n    height: undefined!,\n    depth: 1,\n    mipLevel: 0,\n    x: 0,\n    y: 0,\n    z: 0,\n    aspect: 'all',\n    colorSpace: 'srgb',\n    premultipliedAlpha: false,\n    flipY: false\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {CompareFunction} from '../types/parameters';\nimport {Resource, ResourceProps} from './resource';\n\n/** Edge values sampling mode */\nexport type SamplerAddressMode = 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n\n/** Sampler filtering mode */\nexport type SamplerFilterMode = 'nearest' | 'linear';\n\n/**\n * Properties for initializing a sampler\n */\nexport type SamplerProps = ResourceProps & {\n  /** Comparison / shadow samplers are used with depth textures. See the `Sampler.compare` field */\n  type?: 'color-sampler' | 'comparison-sampler';\n  /** Edge value sampling in X direction */\n  addressModeU?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n  /** Edge value sampling in Y direction */\n  addressModeV?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n  /** Edge value sampling in Z direction */\n  addressModeW?: 'clamp-to-edge' | 'repeat' | 'mirror-repeat';\n\n  /** Magnification: the area of the fragment in texture space is smaller than a texel */\n  magFilter?: 'nearest' | 'linear';\n  /** Minification: the area of the fragment in texture space is larger than a texel */\n  minFilter?: 'nearest' | 'linear';\n  /** mipmapping: select between multiple mipmaps based on angle and size of the texture relative to the screen. */\n  mipmapFilter?: 'none' | 'nearest' | 'linear';\n  /** Affects the mipmap image selection */\n  lodMinClamp?: number;\n  /** Affects the mipmap image selection */\n  lodMaxClamp?: number;\n  /** Maximum number of samples that can be taken of the texture during any one texture fetch */\n  maxAnisotropy?: number;\n  /** How to compare reference values provided in shader shadow sampler calls with those pulled from the texture */\n  compare?: CompareFunction;\n};\n\nexport type SamplerParameters = Omit<SamplerProps, keyof ResourceProps>;\n\n/** Immutable Sampler object */\nexport abstract class Sampler extends Resource<SamplerProps> {\n  static override defaultProps: Required<SamplerProps> = {\n    ...Resource.defaultProps,\n    type: 'color-sampler',\n    addressModeU: 'clamp-to-edge',\n    addressModeV: 'clamp-to-edge',\n    addressModeW: 'clamp-to-edge',\n    magFilter: 'nearest',\n    minFilter: 'nearest',\n    mipmapFilter: 'none',\n    lodMinClamp: 0,\n    lodMaxClamp: 32, // Per WebGPU spec\n    compare: 'less-equal',\n    maxAnisotropy: 1\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'Sampler';\n  }\n\n  constructor(device: Device, props: SamplerProps) {\n    props = Sampler.normalizeProps(device, props);\n    super(device, props, Sampler.defaultProps);\n  }\n\n  protected static normalizeProps(device: Device, props: SamplerProps): SamplerProps {\n    return props;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport type {Texture} from './texture';\nimport type {TextureFormat} from '../../shadertypes/textures/texture-formats';\nimport {Resource, ResourceProps} from './resource';\n\n/** Properties for initializing a texture view */\nexport type TextureViewProps = ResourceProps & {\n  /** The format of the texture view. Must be either the format of the texture or one of the viewFormats specified during its creation. */\n  format?: TextureFormat;\n  /** The dimension to view the texture as. */\n  dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** Which aspect(s) of the texture are accessible to the texture view. default \"all\"*/\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  /** The first (most detailed) mipmap level accessible to the texture view.  default 0*/\n  baseMipLevel?: number;\n  /** How many mipmap levels, starting with baseMipLevel, are accessible to the texture view. */\n  mipLevelCount: number;\n  /** The index of the first array layer accessible to the texture view. default 0 */\n  baseArrayLayer?: number;\n  /** How many array layers, starting with baseArrayLayer, are accessible to the texture view. */\n  arrayLayerCount: number;\n};\n\n/** Immutable TextureView object */\nexport abstract class TextureView extends Resource<TextureViewProps> {\n  abstract texture: Texture;\n\n  override get [Symbol.toStringTag](): string {\n    return 'TextureView';\n  }\n\n  /** Should not be constructed directly. Use `texture.createView(props)` */\n  constructor(device: Device, props: TextureViewProps & {texture: Texture}) {\n    super(device, props, TextureView.defaultProps);\n  }\n\n  static override defaultProps: Required<TextureViewProps> = {\n    ...Resource.defaultProps,\n    format: undefined!,\n    dimension: undefined!,\n    aspect: 'all',\n    baseMipLevel: 0,\n    mipLevelCount: undefined!,\n    baseArrayLayer: 0,\n    arrayLayerCount: undefined!\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\nexport type ExternalTextureProps = ResourceProps & {\n  source: HTMLVideoElement; //  | null;\n  colorSpace?: 'srgb';\n};\nexport abstract class ExternalTexture extends Resource<ExternalTextureProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'ExternalTexture';\n  }\n\n  constructor(device: Device, props: ExternalTextureProps) {\n    super(device, props, ExternalTexture.defaultProps);\n  }\n\n  static override defaultProps: Required<ExternalTextureProps> = {\n    ...Resource.defaultProps,\n    source: undefined!,\n    colorSpace: 'srgb'\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n// import { log } from '../../utils/log';\nimport {uid} from '../../utils/uid';\nimport {CompilerMessage} from '../types/compiler-message';\nimport {formatCompilerLog} from '../../adapter-utils/format-compiler-log';\n\n/**\n * Properties for a Shader\n */\nexport type ShaderProps = ResourceProps & {\n  /** Shader language (defaults to auto) */\n  language?: 'glsl' | 'wgsl' | 'auto';\n  /** Which stage are we compiling? Required for GLSL. Ignored for WGSL. */\n  stage?: 'vertex' | 'fragment' | 'compute';\n  /** Shader source code */\n  source: string;\n  /** Optional shader source map (WebGPU only) */\n  sourceMap?: string | null;\n  /** Optional shader entry point (WebGPU only) */\n  entryPoint?: string;\n  /** Show shader source in browser? Overrides the device.props.debugShaders setting */\n  debugShaders?: 'never' | 'errors' | 'warnings' | 'always';\n};\n\n/**\n * Immutable Shader object\n * In WebGPU the handle can be copied between threads\n */\nexport abstract class Shader extends Resource<ShaderProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'Shader';\n  }\n\n  /** The stage of this shader */\n  readonly stage: 'vertex' | 'fragment' | 'compute';\n  /** The source code of this shader */\n  readonly source: string;\n  /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */\n  compilationStatus: 'pending' | 'success' | 'error' = 'pending';\n\n  /** Create a new Shader instance */\n  constructor(device: Device, props: ShaderProps) {\n    props = {...props, debugShaders: props.debugShaders || device.props.debugShaders || 'errors'};\n    super(device, {id: getShaderIdFromProps(props), ...props}, Shader.defaultProps);\n    this.stage = this.props.stage;\n    this.source = this.props.source;\n  }\n\n  abstract get asyncCompilationStatus(): Promise<'pending' | 'success' | 'error'>;\n\n  /** Get compiler log asynchronously */\n  abstract getCompilationInfo(): Promise<readonly CompilerMessage[]>;\n\n  /** Get compiler log synchronously (WebGL only) */\n  getCompilationInfoSync(): readonly CompilerMessage[] | null {\n    return null;\n  }\n\n  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */\n  getTranslatedSource(): string | null {\n    return null;\n  }\n\n  // PORTABLE HELPERS\n\n  /** In browser logging of errors */\n  async debugShader(): Promise<void> {\n    const trigger = this.props.debugShaders;\n    switch (trigger) {\n      case 'never':\n        return;\n      case 'errors':\n        // On WebGL - Don't extract the log unless errors\n        if (this.compilationStatus === 'success') {\n          return;\n        }\n        break;\n      case 'warnings':\n      case 'always':\n        break;\n    }\n\n    const messages = await this.getCompilationInfo();\n    if (trigger === 'warnings' && messages?.length === 0) {\n      return;\n    }\n    this._displayShaderLog(messages, this.id);\n  }\n\n  // PRIVATE\n\n  /**\n   * In-browser UI logging of errors\n   * TODO - this HTML formatting code should not be in Device, should be pluggable\n   */\n  protected _displayShaderLog(messages: readonly CompilerMessage[], shaderId: string): void {\n    // Return if under Node.js / incomplete `document` polyfills\n    if (typeof document === 'undefined' || !document?.createElement) {\n      return;\n    }\n\n    const shaderName: string = shaderId; // getShaderName(this.source) || ;\n    const shaderTitle: string = `${this.stage} shader \"${shaderName}\"`;\n    let htmlLog = formatCompilerLog(messages, this.source, {showSourceCode: 'all', html: true});\n    // Show translated source if available\n    const translatedSource = this.getTranslatedSource();\n    if (translatedSource) {\n      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style=\"user-select:text;\"><pre>${translatedSource}</pre></code>`;\n    }\n    // Make it clickable so we can copy to clipboard\n    const button = document.createElement('Button');\n    button.innerHTML = `\n<h1>Compilation error in ${shaderTitle}</h1><br /><br />\n<code style=\"user-select:text;\"><pre>\n${htmlLog}\n</pre></code>`;\n    button.style.top = '10px';\n    button.style.left = '10px';\n    button.style.position = 'absolute';\n    button.style.zIndex = '9999';\n    button.style.width = '100%';\n    button.style.textAlign = 'left';\n    document.body.appendChild(button);\n\n    const errors = document.getElementsByClassName('luma-compiler-log-error');\n    errors[0]?.scrollIntoView();\n\n    // TODO - add a small embedded copy button (instead of main button)\n    button.onclick = () => {\n      // const source = this.source.replaceAll('\\n', '<br />');\n      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;\n      navigator.clipboard.writeText(dataURI);\n    };\n\n    // TODO - add a small embedded close button\n  }\n\n  static override defaultProps: Required<ShaderProps> = {\n    ...Resource.defaultProps,\n    language: 'auto',\n    stage: undefined!,\n    source: '',\n    sourceMap: null,\n    entryPoint: 'main',\n    debugShaders: undefined!\n  };\n}\n\n// HELPERS\n\n/** Deduce an id, from shader source, or supplied id, or shader type */\nfunction getShaderIdFromProps(props: ShaderProps): string {\n  return getShaderName(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);\n}\n\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nfunction getShaderName(shader: string, defaultName: string = 'unnamed'): string {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = SHADER_NAME_REGEXP.exec(shader);\n  return match ? match[1] : defaultName;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompilerMessage} from '../adapter/types/compiler-message';\n\n/** @returns annotated errors or warnings */\nexport function formatCompilerLog(\n  shaderLog: readonly CompilerMessage[],\n  source: string,\n  options?: {\n    /** Include source code in the log. Either just the lines before issues or all source code */\n    showSourceCode?: 'no' | 'issues' | 'all';\n    html?: boolean;\n  }\n): string {\n  let formattedLog = '';\n  const lines = source.split(/\\r?\\n/);\n  const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);\n\n  switch (options?.showSourceCode || 'no') {\n    case 'all':\n      // Parse the error - note: browser and driver dependent\n      let currentMessage = 0;\n      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {\n        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);\n        while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {\n          const message = log[currentMessage++];\n          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n            ...options,\n            inlineSource: false\n          });\n        }\n      }\n      // Print any remaining messages\n      while (log.length > currentMessage) {\n        const message = log[currentMessage++];\n        formattedLog += formatCompilerMessage(message, [], 0, {\n          ...options,\n          inlineSource: false\n        });\n      }\n      return formattedLog;\n\n    case 'issues':\n    case 'no':\n      // Parse the error - note: browser and driver dependent\n      for (const message of shaderLog) {\n        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n          inlineSource: options?.showSourceCode !== 'no'\n        });\n      }\n      return formattedLog;\n  }\n}\n\n// Helpers\n\n/** Format one message */\nfunction formatCompilerMessage(\n  message: CompilerMessage,\n  lines: readonly string[],\n  lineNum: number,\n  options: {\n    inlineSource?: boolean;\n    html?: boolean;\n  }\n): string {\n  if (options?.inlineSource) {\n    const numberedLines = getNumberedLines(lines, lineNum);\n    // If we got error position on line add a `^^^` indicator on next line\n    const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\\n` : '';\n    return `\n${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}\n\n`;\n  }\n  const color = message.type === 'error' ? 'red' : '#8B4000'; // dark orange\n  return options?.html\n    ? `<div class='luma-compiler-log-error' style=\"color:${color};\"><b> ${message.type.toUpperCase()}: ${\n        message.message\n      }</b></div>`\n    : `${message.type.toUpperCase()}: ${message.message}`;\n}\n\nfunction getNumberedLines(\n  lines: readonly string[],\n  lineNum: number,\n  options?: {html?: boolean}\n): string {\n  let numberedLines = '';\n  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {\n    const sourceLine = lines[lineIndex - 1];\n    if (sourceLine !== undefined) {\n      numberedLines += getNumberedLine(sourceLine, lineNum, options);\n    }\n  }\n  return numberedLines;\n}\n\nfunction getNumberedLine(line: string, lineNum: number, options?: {html?: boolean}): string {\n  const escapedLine = options?.html ? escapeHTML(line) : line;\n  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\\n'}`;\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string: string, paddedLength: number): string {\n  let result = '';\n  for (let i = string.length; i < paddedLength; ++i) {\n    result += ' ';\n  }\n  return result + string;\n}\n\nfunction escapeHTML(unsafe: string): string {\n  return unsafe\n    .replaceAll('&', '&amp;')\n    .replaceAll('<', '&lt;')\n    .replaceAll('>', '&gt;')\n    .replaceAll('\"', '&quot;')\n    .replaceAll(\"'\", '&#039;');\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  TextureFormatColor,\n  TextureFormatDepthStencil,\n  TextureFormat\n} from '../../shadertypes/textures/texture-formats';\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\nimport {Texture} from './texture';\nimport {TextureView} from './texture-view';\nimport {log} from '../../utils/log';\n\nexport type FramebufferProps = ResourceProps & {\n  width?: number;\n  height?: number;\n  colorAttachments?: (TextureView | Texture | TextureFormatColor)[];\n  depthStencilAttachment?: (TextureView | Texture | TextureFormatDepthStencil) | null;\n};\n\n/**\n * Create new textures with correct size for all attachments.\n * @note resize() destroys existing textures (if size has changed).\n */\nexport abstract class Framebuffer extends Resource<FramebufferProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'Framebuffer';\n  }\n\n  /** Width of all attachments in this framebuffer */\n  width: number;\n  /** Height of all attachments in this framebuffer */\n  height: number;\n  /** Color attachments */\n  abstract colorAttachments: TextureView[];\n  /** Depth-stencil attachment, if provided */\n  abstract depthStencilAttachment: TextureView | null;\n\n  constructor(device: Device, props: FramebufferProps = {}) {\n    super(device, props, Framebuffer.defaultProps);\n    this.width = this.props.width;\n    this.height = this.props.height;\n  }\n\n  /**\n   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.\n   * @note Does not copy contents of the attached textures.\n   */\n  clone(size?: {width: number; height: number}): Framebuffer {\n    const colorAttachments = this.colorAttachments.map(colorAttachment =>\n      colorAttachment.texture.clone(size)\n    );\n\n    const depthStencilAttachment =\n      this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);\n\n    return this.device.createFramebuffer({...this.props, colorAttachments, depthStencilAttachment});\n  }\n\n  /**\n   * Resizes all attachments\n   * @note resize() destroys existing textures (if size has changed).\n   * @deprecated Use framebuffer.clone()\n   */\n  resize(size: {width: number; height: number}): void;\n  resize(size: [width: number, height: number]): void;\n  resize(): void;\n  resize(size?: {width: number; height: number} | [width: number, height: number]): void {\n    let updateSize: boolean = !size;\n    if (size) {\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\n      updateSize = updateSize || height !== this.height || width !== this.width;\n      this.width = width;\n      this.height = height;\n    }\n    if (updateSize) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\n      this.resizeAttachments(this.width, this.height);\n    }\n  }\n\n  /** Auto creates any textures */\n  protected autoCreateAttachmentTextures(): void {\n    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {\n      throw new Error('Framebuffer has noattachments');\n    }\n\n    this.colorAttachments = this.props.colorAttachments.map((attachment, index) => {\n      if (typeof attachment === 'string') {\n        const texture = this.createColorTexture(attachment, index);\n        this.attachResource(texture);\n        return texture.view;\n      }\n      if (attachment instanceof Texture) {\n        return attachment.view;\n      }\n      return attachment;\n    });\n\n    const attachment = this.props.depthStencilAttachment;\n    if (attachment) {\n      if (typeof attachment === 'string') {\n        const texture = this.createDepthStencilTexture(attachment);\n        this.attachResource(texture);\n        this.depthStencilAttachment = texture.view;\n      } else if (attachment instanceof Texture) {\n        this.depthStencilAttachment = attachment.view;\n      } else {\n        this.depthStencilAttachment = attachment;\n      }\n    }\n  }\n\n  /** Create a color texture */\n  protected createColorTexture(format: TextureFormat, index: number): Texture {\n    return this.device.createTexture({\n      id: `${this.id}-color-attachment-${index}`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n      // TODO deprecated? - luma.gl v8 compatibility\n      sampler: {\n        magFilter: 'linear',\n        minFilter: 'linear'\n      }\n    });\n  }\n\n  /** Create depth stencil texture */\n  protected createDepthStencilTexture(format: TextureFormat): Texture {\n    return this.device.createTexture({\n      id: `${this.id}-depth-stencil-attachment`,\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height\n    });\n  }\n\n  /**\n   * Default implementation of resize\n   * Creates new textures with correct size for all attachments.\n   * and destroys existing textures if owned\n   */\n  protected resizeAttachments(width: number, height: number): void {\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      if (this.colorAttachments[i]) {\n        const resizedTexture = this.colorAttachments[i].texture.clone({\n          width,\n          height\n        });\n        this.destroyAttachedResource(this.colorAttachments[i]);\n        this.colorAttachments[i] = resizedTexture.view;\n        this.attachResource(resizedTexture.view);\n      }\n    }\n\n    if (this.depthStencilAttachment) {\n      const resizedTexture = this.depthStencilAttachment.texture.clone({\n        width,\n        height\n      });\n      this.destroyAttachedResource(this.depthStencilAttachment);\n      this.depthStencilAttachment = resizedTexture.view;\n      this.attachResource(resizedTexture);\n    }\n\n    this.updateAttachments();\n  }\n\n  /** Implementation is expected to update any underlying binding (WebGL framebuffer attachment) */\n  protected abstract updateAttachments(): void;\n\n  static override defaultProps: Required<FramebufferProps> = {\n    ...Resource.defaultProps,\n    width: 1,\n    height: 1,\n    colorAttachments: [], // ['rgba8unorm'],\n    depthStencilAttachment: null // 'depth24plus-stencil8'\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport type {UniformValue} from '../types/uniforms';\nimport type {PrimitiveTopology, RenderPipelineParameters} from '../types/parameters';\nimport type {ShaderLayout, Binding} from '../types/shader-layout';\nimport type {BufferLayout} from '../types/buffer-layout';\nimport type {\n  TextureFormatColor,\n  TextureFormatDepthStencil\n} from '@luma.gl/core/shadertypes/textures/texture-formats';\nimport type {Shader} from './shader';\nimport type {RenderPass} from './render-pass';\nimport {Resource, ResourceProps} from './resource';\nimport {VertexArray} from './vertex-array';\nimport {TransformFeedback} from './transform-feedback';\n\nexport type RenderPipelineProps = ResourceProps & {\n  // Shaders and shader layout\n\n  /** Compiled vertex shader */\n  vs?: Shader | null;\n  /** Name of vertex shader stage main function (defaults to 'main'). WGSL only */\n  vertexEntryPoint?: string; //\n  /** Constant values to apply to compiled vertex shader. Do not require re-compilation. (WGSL only) */\n  vsConstants?: Record<string, number>; // WGSL only\n  /** Compiled fragment shader */\n  fs?: Shader | null;\n  /** Name of fragment shader stage main function (defaults to 'main'). WGSL only */\n  fragmentEntryPoint?: string; // WGSL only\n  /** Constant values to apply to compiled fragment shader. Do not require re-compilation. (WGSL only) */\n  fsConstants?: Record<string, number>;\n\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\n  shaderLayout?: ShaderLayout | null;\n  /** Describes the buffers accepted by this pipeline and how they are mapped to shader attributes. */\n  bufferLayout?: BufferLayout[]; // Record<string, Omit<BufferLayout, 'name'>\n\n  /** Determines how vertices are read from the 'vertex' attributes */\n  topology?: PrimitiveTopology;\n\n  // color attachment information (needed on WebGPU)\n\n  /** Color attachments expected by this pipeline. Defaults to [device.preferredColorFormat]. Array needs not be contiguous. */\n  colorAttachmentFormats?: (TextureFormatColor | null)[];\n  /** Depth attachment expected by this pipeline. Defaults to device.preferredDepthFormat, if depthWriteEnables parameter is set */\n  depthStencilAttachmentFormat?: TextureFormatDepthStencil;\n\n  /** Parameters that are controlled by pipeline */\n  parameters?: RenderPipelineParameters;\n\n  // Dynamic bindings (TODO - pipelines should be immutable, move to RenderPass)\n\n  /** Buffers, Textures, Samplers for the shader bindings */\n  bindings?: Record<string, Binding>;\n  /** @deprecated uniforms (WebGL only) */\n  uniforms?: Record<string, UniformValue>;\n};\n\n/**\n * A compiled and linked shader program\n */\nexport abstract class RenderPipeline extends Resource<RenderPipelineProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'RenderPipeline';\n  }\n\n  abstract readonly vs: Shader;\n  abstract readonly fs: Shader | null;\n\n  /** The merged layout */\n  shaderLayout: ShaderLayout;\n  /** Buffer map describing buffer interleaving etc */\n  readonly bufferLayout: BufferLayout[];\n  /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */\n  linkStatus: 'pending' | 'success' | 'error' = 'pending';\n  /** The hash of the pipeline */\n  hash: string = '';\n\n  constructor(device: Device, props: RenderPipelineProps) {\n    super(device, props, RenderPipeline.defaultProps);\n    this.shaderLayout = this.props.shaderLayout!;\n    this.bufferLayout = this.props.bufferLayout || [];\n  }\n\n  /** Set bindings (stored on pipeline and set before each call) */\n  abstract setBindings(\n    bindings: Record<string, Binding>,\n    options?: {disableWarnings?: boolean}\n  ): void;\n\n  /** Draw call. Returns false if the draw call was aborted (due to resources still initializing) */\n  abstract draw(options: {\n    /** Render pass to draw into (targeting screen or framebuffer) */\n    renderPass?: RenderPass;\n    /** Parameters to be set during draw call. Note that most parameters can only be overridden in WebGL. */\n    parameters?: RenderPipelineParameters;\n    /** Topology. Note can only be overridden in WebGL. */\n    topology?: PrimitiveTopology;\n    /** vertex attributes */\n    vertexArray: VertexArray;\n    /** Use instanced rendering? */\n    isInstanced?: boolean;\n    /** Number of \"rows\" in 'instance' buffers */\n    instanceCount?: number;\n    /** Number of \"rows\" in 'vertex' buffers */\n    vertexCount?: number;\n    /** Number of \"rows\" in index buffer */\n    indexCount?: number;\n    /** First vertex to draw from */\n    firstVertex?: number;\n    /** First index to draw from */\n    firstIndex?: number;\n    /** First instance to draw from */\n    firstInstance?: number;\n    baseVertex?: number;\n    /** Transform feedback. WebGL only. */\n    transformFeedback?: TransformFeedback;\n  }): boolean;\n\n  static override defaultProps: Required<RenderPipelineProps> = {\n    ...Resource.defaultProps,\n\n    vs: null,\n    vertexEntryPoint: 'vertexMain',\n    vsConstants: {},\n\n    fs: null,\n    fragmentEntryPoint: 'fragmentMain',\n    fsConstants: {},\n\n    shaderLayout: null,\n    bufferLayout: [],\n    topology: 'triangle-list',\n\n    colorAttachmentFormats: undefined!,\n    depthStencilAttachmentFormat: undefined!,\n\n    parameters: {},\n\n    bindings: {},\n    uniforms: {}\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumberArray4, TypedArray} from '@math.gl/types';\nimport type {Device} from '../device';\nimport type {RenderPassParameters} from '../types/parameters';\n// import {Binding} from '../types/shader-layout';\nimport {Resource, ResourceProps} from './resource';\nimport {Framebuffer} from './framebuffer';\nimport {QuerySet} from './query-set';\n\n/**\n * Properties for a RenderPass instance is a required parameter to all draw calls.\n */\nexport type RenderPassProps = ResourceProps & {\n  /** Framebuffer specifies which textures to render into. Default gets framebuffer from canvas context. */\n  framebuffer?: Framebuffer | null;\n  /** Control viewport, scissor rect, blend constant and stencil ref */\n  parameters?: RenderPassParameters;\n\n  // TODO - API needs to be able to control multiple render targets\n\n  /** Clear value for color attachment, or false to preserve the previous value */\n  clearColor?: NumberArray4 | TypedArray | false;\n  /** Experimental: Clear color values for multiple color attachments. Must specify typed arrays. props.clearColor will be ignored. */\n  clearColors?: (TypedArray | false)[];\n  /** Clear value for depth attachment (true === `1`), or false to preserve the previous value. Must be between 0.0 (near) and 1.0 (far), inclusive. */\n  clearDepth?: number | false;\n  /** Clear value for stencil attachment (true === `0`), or false to preserve the previous value. Converted to the type and number of LSBs as the number of bits in the stencil aspect */\n  clearStencil?: number | false;\n\n  /** Indicates that the depth component is read only. */\n  depthReadOnly?: boolean;\n  /** Indicates that the stencil component is read only. */\n  stencilReadOnly?: boolean;\n\n  /** Whether to disable / discard the output of the rasterizer */\n  discard?: boolean;\n\n  /** QuerySet to write begin/end timestamps to */\n  occlusionQuerySet?: QuerySet;\n  /** QuerySet to write begin/end timestamps to */\n  timestampQuerySet?: QuerySet;\n  /** QuerySet index to write begin timestamp to. No timestamp is written if not provided. */\n  beginTimestampIndex?: number;\n  /** QuerySet index to write end timestamp to. No timestamp is written if not provided. */\n  endTimestampIndex?: number;\n};\n\n/**\n * A RenderPass instance is a required parameter to all draw calls.\n *\n * It holds a combination of\n * - render targets (specified via a framebuffer)\n * - clear colors, read/write, discard information for the framebuffer attachments\n * - a couple of mutable parameters ()\n */\nexport abstract class RenderPass extends Resource<RenderPassProps> {\n  /** TODO - should be [0, 0, 0, 0], update once deck.gl tests run clean */\n  static defaultClearColor: [number, number, number, number] = [0, 0, 0, 1];\n  /** Depth 1.0 represents the far plance */\n  static defaultClearDepth = 1;\n  /** Clears all stencil bits */\n  static defaultClearStencil = 0;\n\n  override get [Symbol.toStringTag](): string {\n    return 'RenderPass';\n  }\n\n  constructor(device: Device, props: RenderPassProps) {\n    props = RenderPass.normalizeProps(device, props);\n    super(device, props, RenderPass.defaultProps);\n  }\n\n  /** Call when rendering is done in this pass. */\n  abstract end(): void;\n\n  /** A few parameters can be changed at any time (viewport, scissorRect, blendColor, stencilReference) */\n  abstract setParameters(parameters: RenderPassParameters): void;\n\n  // executeBundles(bundles: Iterable<GPURenderBundle>): void;\n\n  /** Being an occlusion query. Value will be stored in the occlusionQuerySet at the index. Occlusion queries cannot be nested. */\n  abstract beginOcclusionQuery(queryIndex: number): void;\n  /** End an occlusion query. Stores result in the index specified in beginOcclusionQuery. */\n  abstract endOcclusionQuery(): void;\n\n  /** Begins a labeled debug group containing subsequent commands */\n  abstract pushDebugGroup(groupLabel: string): void;\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\n  abstract popDebugGroup(): void;\n  /** Marks a point in a stream of commands with a label */\n  abstract insertDebugMarker(markerLabel: string): void;\n\n  protected static normalizeProps(device: Device, props: RenderPassProps): RenderPassProps {\n    return props;\n  }\n\n  /** Default properties for RenderPass */\n  static override defaultProps: Required<RenderPassProps> = {\n    ...Resource.defaultProps,\n    framebuffer: null,\n    parameters: undefined!,\n    clearColor: RenderPass.defaultClearColor,\n    clearColors: undefined!,\n    clearDepth: RenderPass.defaultClearDepth,\n    clearStencil: RenderPass.defaultClearStencil,\n    depthReadOnly: false,\n    stencilReadOnly: false,\n    discard: false,\n\n    occlusionQuerySet: undefined!,\n    timestampQuerySet: undefined!,\n    beginTimestampIndex: undefined!,\n    endTimestampIndex: undefined!\n  };\n}\n\n// TODO - Can we align WebGL implementation with WebGPU API?\n// In WebGPU the following methods are on the renderpass instead of the renderpipeline\n// luma.gl keeps them on the pipeline for now, but that has some issues.\n\n// abstract setPipeline(pipeline: RenderPipeline): void {}\n// abstract setIndexBuffer()\n// abstract setVertexBuffer(slot: number, buffer: Buffer, offset: number): void;\n// abstract setBindings(bindings: Record<string, Binding>): void;\n// abstract setParameters(parameters: RenderPassParameters);\n// abstract draw(options: {\n// abstract drawIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): void;\n// abstract drawIndexedIndirect(indirectBuffer: GPUBuffer, indirectOffset: number): void;\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Resource, ResourceProps} from './resource';\nimport type {ComputeShaderLayout, Binding} from '../types/shader-layout';\nimport type {Device} from '../device';\nimport type {Shader} from './shader';\n\n/**\n * Properties for a compute pipeline\n */\nexport type ComputePipelineProps = ResourceProps & {\n  handle?: unknown;\n  /** Compiled shader object */\n  shader: Shader;\n  /** The entry point, defaults to main */\n  entryPoint?: string;\n  /** These are WGSL constant values - different from GLSL defines in that shader does not need to be recompiled */\n  constants?: Record<string, number>;\n  /** Describes the attributes and bindings exposed by the pipeline shader(s). */\n  shaderLayout?: ComputeShaderLayout | null;\n};\n\n/**\n * A compiled and linked shader program for compute\n */\nexport abstract class ComputePipeline extends Resource<ComputePipelineProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'ComputePipeline';\n  }\n\n  hash: string = '';\n  /** The merged shader layout */\n  shaderLayout: ComputeShaderLayout;\n\n  constructor(device: Device, props: ComputePipelineProps) {\n    super(device, props, ComputePipeline.defaultProps);\n    this.shaderLayout = props.shaderLayout!;\n  }\n\n  /**\n   * @todo Use renderpass.setBindings() ?\n   * @todo Do we want to expose BindGroups in the API and remove this?\n   */\n  abstract setBindings(bindings: Record<string, Binding>): void;\n\n  static override defaultProps: Required<ComputePipelineProps> = {\n    ...Resource.defaultProps,\n    shader: undefined!,\n    entryPoint: undefined!,\n    constants: {},\n    shaderLayout: undefined!\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Resource, ResourceProps} from './resource';\nimport {ComputePipeline} from './compute-pipeline';\nimport type {Device} from '../device';\nimport {Buffer} from './buffer';\nimport {QuerySet} from './query-set';\n\nexport type ComputePassProps = ResourceProps & {\n  /** QuerySet to write beging/end timestamps to */\n  timestampQuerySet?: QuerySet;\n  /** QuerySet index to write begin timestamp to. No timestamp is written if not provided. */\n  beginTimestampIndex?: number;\n  /** QuerySet index to write end timestamp to. No timestamp is written if not provided. */\n  endTimestampIndex?: number;\n};\n\nexport abstract class ComputePass extends Resource<ComputePassProps> {\n  constructor(device: Device, props: ComputePassProps) {\n    super(device, props, ComputePass.defaultProps);\n  }\n\n  abstract override destroy(): void;\n\n  abstract end(): void;\n\n  abstract setPipeline(pipeline: ComputePipeline): void;\n\n  /** Sets an array of bindings (uniform buffers, samplers, textures, ...) */\n  // abstract setBindings(bindings: Binding[]): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param x X dimension of the grid of workgroups to dispatch.\n   * @param y Y dimension of the grid of workgroups to dispatch.\n   * @param z Z dimension of the grid of workgroups to dispatch.\n   */\n  abstract dispatch(x: number, y?: number, z?: number): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param indirectBuffer buffer must be a tightly packed block of three 32-bit unsigned integer values (12 bytes total), given in the same order as the arguments for dispatch()\n   * @param indirectOffset\n   */\n  abstract dispatchIndirect(indirectBuffer: Buffer, indirectOffset?: number): void;\n\n  /** Begins a labeled debug group containing subsequent commands */\n  abstract pushDebugGroup(groupLabel: string): void;\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\n  abstract popDebugGroup(): void;\n  /** Marks a point in a stream of commands with a label */\n  abstract insertDebugMarker(markerLabel: string): void;\n\n  static override defaultProps: Required<ComputePassProps> = {\n    ...Resource.defaultProps,\n    timestampQuerySet: undefined!,\n    beginTimestampIndex: undefined!,\n    endTimestampIndex: undefined!\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'ComputePass';\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// import type {TypedArray} from '@math.gl/types';\nimport {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\nimport {Buffer} from './buffer';\nimport {Texture} from './texture';\nimport {QuerySet} from './query-set';\nimport type {RenderPass, RenderPassProps} from './render-pass';\nimport type {ComputePass, ComputePassProps} from './compute-pass';\nimport type {CommandBuffer, CommandBufferProps} from './command-buffer';\n\n// WEBGPU COMMAND ENCODER OPERATIONS\n\nexport type CopyBufferToBufferOptions = {\n  sourceBuffer: Buffer;\n  sourceOffset?: number;\n  destinationBuffer: Buffer;\n  destinationOffset?: number;\n  size: number;\n};\n\nexport type CopyBufferToTextureOptions = {\n  sourceBuffer: Buffer;\n  byteOffset?: number;\n  destinationTexture: Texture;\n  mipLevel?: number; //  = 0;\n  origin?: [number, number, number] | number[];\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  bytesPerRow: number;\n  rowsPerImage: number;\n  size: [number, number, number] | number[];\n};\n\nexport type CopyTextureToBufferOptions = {\n  /** Texture to copy to/from. */\n  sourceTexture: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  mipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from.\n   * Together with `copySize`, defines the full copy sub-region.\n   */\n  /** Defines which aspects of the texture to copy to/from. */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  /** Width to copy */\n  width?: number;\n  height?: number;\n  depthOrArrayLayers?: number;\n  origin?: number[];\n\n  /** Destination buffer */\n  destinationBuffer: Buffer;\n  /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */\n  byteOffset?: number;\n  /**\n   * The stride, in bytes, between the beginning of each block row and the subsequent block row.\n   * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).\n   */\n  bytesPerRow?: number;\n  /**\n   * Number of block rows per single image of the texture.\n   * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.\n   * Required if there are multiple images (i.e. the copy depth is more than one).\n   */\n  rowsPerImage?: number;\n};\n\nexport type CopyTextureToTextureOptions = {\n  /** Texture to copy to/from. */\n  sourceTexture: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  mipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */\n  origin?: number[];\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  /** Texture to copy to/from. */\n  destinationTexture: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  destinationMipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */\n  destinationOrigin?: number[];\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\n  destinationAspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  /** Width to copy */\n  width?: number;\n  height?: number;\n  depthOrArrayLayers?: number;\n};\n\n// ADDITIONAL COMMAND ENCODER OPERATIONS DEFINED BY LUMA.GL\n\n/** Options for clearing a texture mip level */\nexport type ClearTextureOptions = {\n  /** Texture to Clear. */\n  texture: Texture;\n  /**  Mip-map level of the texture clear. (Default 0) */\n  mipLevel?: number;\n  /** Defines which aspects of the Texture to clear. */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n};\n\n// export type WriteBufferOptions = {\n//   buffer: Buffer;\n//   bufferOffset?: number;\n//   data: BufferSource;\n//   dataOffset?: number;\n//   size?: number;\n// };\n\n// export type WriteTextureOptions = {\n//   destination: Texture;\n//   mipLevel?: number; //  = 0;\n//   origin?: [number, number, number] | number[];\n//   aspect?: 'all' | 'stencil-only' | 'depth-only';\n//   data: BufferSource;\n//   // dataLayout;\n//   offset: number;\n//   bytesPerRow: number;\n//   rowsPerImage: number;\n//   size: [number, number, number] | number[];\n// };\n\nexport type CommandEncoderProps = ResourceProps & {\n  measureExecutionTime?: boolean;\n};\n\n/**\n * Encodes commands to queue that can be executed later\n */\nexport abstract class CommandEncoder extends Resource<CommandEncoderProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'CommandEncoder';\n  }\n\n  constructor(device: Device, props: CommandEncoderProps) {\n    super(device, props, CommandEncoder.defaultProps);\n  }\n\n  /** Completes recording of the commands sequence */\n  abstract finish(props?: CommandBufferProps): CommandBuffer;\n\n  /** Create a RenderPass using the default CommandEncoder */\n  abstract beginRenderPass(props?: RenderPassProps): RenderPass;\n\n  /** Create a ComputePass using the default CommandEncoder*/\n  abstract beginComputePass(props?: ComputePassProps): ComputePass;\n\n  /** Add a command that that copies data from a sub-region of a Buffer to a sub-region of another Buffer. */\n  abstract copyBufferToBuffer(options: CopyBufferToBufferOptions): void;\n\n  /** Add a command that copies data from a sub-region of a GPUBuffer to a sub-region of one or multiple continuous texture subresources. */\n  abstract copyBufferToTexture(options: CopyBufferToTextureOptions): void;\n\n  /** Add a command that copies data from a sub-region of one or multiple continuous texture subresources to a sub-region of a Buffer. */\n  abstract copyTextureToBuffer(options: CopyTextureToBufferOptions): void;\n\n  /** Add a command that copies data from a sub-region of one or multiple contiguous texture subresources to another sub-region of one or multiple continuous texture subresources. */\n  abstract copyTextureToTexture(options: CopyTextureToTextureOptions): void;\n\n  /** Add a command that clears a texture mip level. */\n  // abstract clearTexture(options: ClearTextureOptions): void;\n\n  // abstract readTexture(options: ReadTextureOptions): Promise<TypedArray>;\n\n  /** Reads results from a query set into a GPU buffer. Values are 64 bits so byteLength must be querySet.props.count * 8 */\n  abstract resolveQuerySet(\n    querySet: QuerySet,\n    destination: Buffer,\n    options?: {\n      firstQuery?: number;\n      queryCount?: number;\n      destinationOffset?: number;\n    }\n  ): void;\n\n  /** Begins a labeled debug group containing subsequent commands */\n  abstract pushDebugGroup(groupLabel: string): void;\n  /** Ends the labeled debug group most recently started by pushDebugGroup() */\n  abstract popDebugGroup(): void;\n  /** Marks a point in a stream of commands with a label */\n  abstract insertDebugMarker(markerLabel: string): void;\n\n  // TODO - luma.gl has these on the device, should we align with WebGPU API?\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n\n  static override defaultProps: Required<CommandEncoderProps> = {\n    ...Resource.defaultProps,\n    measureExecutionTime: undefined!\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\n// interface Queue {\n//   submit(commandBuffers);\n\n//   // onSubmittedWorkDone(): Promise<undefined>;\n\n//   writeBuffer(options: WriteBufferOptions): void;\n//   writeTexture(options: WriteTextureOptions): void;\n\n//   // copyExternalImageToTexture(\n//   //   GPUImageCopyExternalImage source,\n//   //   GPUImageCopyTextureTagged destination,\n//   //   GPUExtent3D copySize\n//   // ): void;\n// }\n\nexport type CommandBufferProps = ResourceProps & {};\n\n/**\n * Encodes commands to queue that can be executed later\n */\nexport abstract class CommandBuffer extends Resource<CommandBufferProps> {\n  override get [Symbol.toStringTag](): string {\n    return 'CommandBuffer';\n  }\n\n  constructor(device: Device, props: CommandBufferProps) {\n    super(device, props, CommandBuffer.defaultProps);\n  }\n\n  static override defaultProps: Required<CommandBufferProps> = {\n    ...Resource.defaultProps\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '../../types';\nimport {\n  AttributeInfo,\n  getAttributeInfosByLocation\n} from '../../adapter-utils/get-attribute-from-layouts';\nimport type {Device} from '../device';\nimport type {Buffer} from './buffer';\nimport type {RenderPass} from './render-pass';\nimport {Resource, ResourceProps} from './resource';\nimport {ShaderLayout} from '../types/shader-layout';\nimport {BufferLayout} from '../types/buffer-layout';\n\n/** Properties for initializing a VertexArray */\nexport type VertexArrayProps = ResourceProps & {\n  shaderLayout: ShaderLayout;\n  bufferLayout: BufferLayout[];\n};\n\n/**\n * Stores attribute bindings.\n * Makes it easy to share a render pipeline and use separate vertex arrays.\n * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance\n * reducing the number of WebGL calls per draw call.\n * @note On WebGPU this is just a convenience class that collects the bindings.\n */\nexport abstract class VertexArray extends Resource<VertexArrayProps> {\n  static override defaultProps: Required<VertexArrayProps> = {\n    ...Resource.defaultProps,\n    shaderLayout: undefined!,\n    bufferLayout: []\n  };\n\n  override get [Symbol.toStringTag](): string {\n    return 'VertexArray';\n  }\n\n  /** Max number of vertex attributes */\n  readonly maxVertexAttributes: number;\n  /** Attribute infos indexed by location - TODO only needed by webgl module? */\n  protected readonly attributeInfos: AttributeInfo[];\n\n  /** Index buffer */\n  indexBuffer: Buffer | null = null;\n  /** Attributes indexed by buffer slot */\n  attributes: (Buffer | TypedArray | null)[];\n\n  constructor(device: Device, props: VertexArrayProps) {\n    super(device, props, VertexArray.defaultProps);\n    this.maxVertexAttributes = device.limits.maxVertexAttributes;\n    this.attributes = new Array(this.maxVertexAttributes).fill(null);\n    this.attributeInfos = getAttributeInfosByLocation(\n      props.shaderLayout,\n      props.bufferLayout,\n      this.maxVertexAttributes\n    );\n  }\n\n  /** Set attributes (stored on pipeline and set before each call) */\n  abstract setIndexBuffer(indices: Buffer | null): void;\n  /** Set attributes (stored on pipeline and set before each call) */\n  abstract setBuffer(bufferSlot: number, buffer: Buffer | null): void;\n\n  abstract bindBeforeRender(renderPass: RenderPass): void;\n  abstract unbindAfterRender(renderPass: RenderPass): void;\n\n  // DEPRECATED METHODS\n\n  /** @deprecated Set constant attributes (WebGL only) */\n  setConstantWebGL(location: number, value: TypedArray | null): void {\n    this.device.reportError(new Error('constant attributes not supported'), this)();\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '../utils/log';\nimport type {PrimitiveDataType, NormalizedDataType} from '../shadertypes/data-types/data-types';\nimport type {AttributeShaderType} from '../shadertypes/data-types/shader-types';\nimport type {VertexFormat} from '../shadertypes/vertex-arrays/vertex-formats';\nimport {getAttributeShaderTypeInfo} from '../shadertypes/data-types/decode-shader-types';\nimport {\n  getVertexFormatInfo,\n  getCompatibleVertexFormat\n} from '../shadertypes/vertex-arrays/decode-vertex-format';\nimport type {ShaderLayout, AttributeDeclaration} from '../adapter/types/shader-layout';\nimport type {BufferLayout} from '../adapter/types/buffer-layout';\n\n/** Resolved info for a buffer / attribute combination to help backend configure it correctly */\nexport type AttributeInfo = {\n  /** Attribute name */\n  attributeName: string;\n  /** Location in shader */\n  location: number;\n  /** Type / precision used in shader (buffer values may be converted) */\n  shaderType: AttributeShaderType;\n  /** Calculations are done in this type in the shader's attribute declaration */\n  primitiveType: PrimitiveDataType;\n  /** Components refer to the number of components in the shader's attribute declaration */\n  shaderComponents: 1 | 2 | 3 | 4;\n  /** It is the shader attribute declaration that determines whether GPU will process as integer or float */\n  integer: boolean;\n\n  /** BufferName */\n  bufferName: string;\n  /** Format of buffer data */\n  vertexFormat: VertexFormat;\n  /** Memory data type refers to the data type in the buffer */\n  bufferDataType: NormalizedDataType;\n  /** Components refer to the number of components in the buffer's vertex format */\n  bufferComponents: 1 | 2 | 3 | 4;\n  /** Normalization is encoded in the buffer layout's vertex format... */\n  normalized: boolean;\n\n  /** If not specified, the step mode is inferred from the attribute name in the shader (contains string instance) */\n  stepMode: 'vertex' | 'instance';\n\n  /** The byteOffset is encoded in or calculated from the buffer layout */\n  byteOffset: number;\n  /** The byteStride is encoded in or calculated from the buffer layout */\n  byteStride: number;\n};\n\ntype BufferAttributeInfo = {\n  attributeName: string;\n  bufferName: string;\n  stepMode?: 'vertex' | 'instance';\n  vertexFormat: VertexFormat;\n  byteOffset: number;\n  byteStride: number;\n};\n\n/**\n * Map from \"attribute names\" to \"resolved attribute infos\"\n * containing information about both buffer layouts and shader attribute declarations\n */\nexport function getAttributeInfosFromLayouts(\n  shaderLayout: ShaderLayout,\n  bufferLayout: BufferLayout[]\n): Record<string, AttributeInfo> {\n  const attributeInfos: Record<string, AttributeInfo> = {};\n  for (const attribute of shaderLayout.attributes) {\n    const attributeInfo = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);\n    if (attributeInfo) {\n      attributeInfos[attribute.name] = attributeInfo;\n    }\n  }\n  return attributeInfos;\n}\n\n/**\n * Array indexed by \"location\" holding \"resolved attribute infos\"\n */\nexport function getAttributeInfosByLocation(\n  shaderLayout: ShaderLayout,\n  bufferLayout: BufferLayout[],\n  maxVertexAttributes: number = 16\n): AttributeInfo[] {\n  const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);\n  const locationInfos: AttributeInfo[] = new Array(maxVertexAttributes).fill(null);\n  for (const attributeInfo of Object.values(attributeInfos)) {\n    locationInfos[attributeInfo.location] = attributeInfo;\n  }\n  return locationInfos;\n}\n\n/**\n * Get the combined information from a shader layout and a buffer layout for a specific attribute\n */\nfunction getAttributeInfoFromLayouts(\n  shaderLayout: ShaderLayout,\n  bufferLayout: BufferLayout[],\n  name: string\n): AttributeInfo | null {\n  const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name);\n  const bufferMapping: BufferAttributeInfo | null = getAttributeFromBufferLayout(\n    bufferLayout,\n    name\n  );\n\n  // TODO should no longer happen\n  if (!shaderDeclaration) {\n    //  || !bufferMapping\n    return null;\n  }\n\n  const attributeTypeInfo = getAttributeShaderTypeInfo(shaderDeclaration.type);\n  const defaultVertexFormat = getCompatibleVertexFormat(attributeTypeInfo);\n  const vertexFormat = bufferMapping?.vertexFormat || defaultVertexFormat;\n  const vertexFormatInfo = getVertexFormatInfo(vertexFormat);\n\n  return {\n    attributeName: bufferMapping?.attributeName || shaderDeclaration.name,\n    bufferName: bufferMapping?.bufferName || shaderDeclaration.name,\n    location: shaderDeclaration.location,\n    shaderType: shaderDeclaration.type,\n    primitiveType: attributeTypeInfo.primitiveType,\n    shaderComponents: attributeTypeInfo.components,\n    vertexFormat,\n    bufferDataType: vertexFormatInfo.type,\n    bufferComponents: vertexFormatInfo.components,\n    // normalized is a property of the buffer's vertex format\n    normalized: vertexFormatInfo.normalized,\n    // integer is a property of the shader declaration\n    integer: attributeTypeInfo.integer,\n    stepMode: bufferMapping?.stepMode || shaderDeclaration.stepMode || 'vertex',\n    byteOffset: bufferMapping?.byteOffset || 0,\n    byteStride: bufferMapping?.byteStride || 0\n  };\n}\n\nfunction getAttributeFromShaderLayout(\n  shaderLayout: ShaderLayout,\n  name: string\n): AttributeDeclaration | null {\n  const attribute = shaderLayout.attributes.find(attr => attr.name === name);\n  if (!attribute) {\n    log.warn(`shader layout attribute \"${name}\" not present in shader`);\n  }\n  return attribute || null;\n}\n\nfunction getAttributeFromBufferLayout(\n  bufferLayouts: BufferLayout[],\n  name: string\n): BufferAttributeInfo | null {\n  // Check that bufferLayouts are valid (each either has format or attribute)\n  checkBufferLayouts(bufferLayouts);\n\n  let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name);\n  if (bufferLayoutInfo) {\n    return bufferLayoutInfo;\n  }\n\n  bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name);\n  if (bufferLayoutInfo) {\n    return bufferLayoutInfo;\n  }\n\n  // Didn't find...\n  log.warn(`layout for attribute \"${name}\" not present in buffer layout`);\n  return null;\n}\n\n/** Check that bufferLayouts are valid (each either has format or attribute) */\nfunction checkBufferLayouts(bufferLayouts: BufferLayout[]) {\n  for (const bufferLayout of bufferLayouts) {\n    if (\n      (bufferLayout.attributes && bufferLayout.format) ||\n      (!bufferLayout.attributes && !bufferLayout.format)\n    ) {\n      log.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);\n    }\n  }\n}\n\n/** Get attribute from format shorthand if specified */\nfunction getAttributeFromShortHand(\n  bufferLayouts: BufferLayout[],\n  name: string\n): BufferAttributeInfo | null {\n  for (const bufferLayout of bufferLayouts) {\n    if (bufferLayout.format && bufferLayout.name === name) {\n      return {\n        attributeName: bufferLayout.name,\n        bufferName: name,\n        stepMode: bufferLayout.stepMode,\n        vertexFormat: bufferLayout.format,\n        // If offset is needed, use `attributes` field.\n        byteOffset: 0,\n        byteStride: bufferLayout.byteStride || 0\n      };\n    }\n  }\n  return null;\n}\n\n/**\n * Search attribute mappings (e.g. interleaved attributes) for buffer mapping.\n * Not the name of the buffer might be the same as one of the interleaved attributes.\n */\nfunction getAttributeFromAttributesList(\n  bufferLayouts: BufferLayout[],\n  name: string\n): BufferAttributeInfo | null {\n  for (const bufferLayout of bufferLayouts) {\n    let byteStride: number | undefined = bufferLayout.byteStride;\n\n    // Calculate a default byte stride if not provided\n    if (typeof bufferLayout.byteStride !== 'number') {\n      for (const attributeMapping of bufferLayout.attributes || []) {\n        const info = getVertexFormatInfo(attributeMapping.format);\n        // @ts-ignore\n        byteStride += info.byteLength;\n      }\n    }\n\n    const attributeMapping = bufferLayout.attributes?.find(mapping => mapping.attribute === name);\n    if (attributeMapping) {\n      return {\n        attributeName: attributeMapping.attribute,\n        bufferName: bufferLayout.name,\n        stepMode: bufferLayout.stepMode,\n        vertexFormat: attributeMapping.format,\n        byteOffset: attributeMapping.byteOffset,\n        // @ts-ignore\n        byteStride\n      };\n    }\n  }\n\n  return null;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {PrimitiveDataType} from './data-types';\nimport type {\n  VariableShaderType,\n  AttributeShaderType,\n  AttributeShaderTypeInfo,\n  VariableShaderTypeAlias,\n  AttributeShaderTypeAlias\n} from './shader-types';\n\n/** Split a uniform type string into type and components */\nexport function getVariableShaderTypeInfo(format: VariableShaderType): {\n  type: PrimitiveDataType;\n  components: number;\n} {\n  const decoded = UNIFORM_FORMATS[format];\n  return decoded;\n}\n\n/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */\nexport function getAttributeShaderTypeInfo(\n  attributeType: AttributeShaderType\n): AttributeShaderTypeInfo {\n  const [primitiveType, components] = TYPE_INFO[attributeType];\n  const integer: boolean = primitiveType === 'i32' || primitiveType === 'u32';\n  const signed: boolean = primitiveType !== 'u32';\n\n  const byteLength = PRIMITIVE_TYPE_SIZES[primitiveType] * components;\n  return {\n    primitiveType,\n    components,\n    byteLength,\n    integer,\n    signed\n  };\n}\n\nexport function makeShaderAttributeType(\n  primitiveType: PrimitiveDataType,\n  components: 1 | 2 | 3 | 4\n): AttributeShaderType {\n  return components === 1 ? primitiveType : `vec${components}<${primitiveType}>`;\n}\n\nexport function resolveAttributeShaderTypeAlias(\n  alias: AttributeShaderTypeAlias | AttributeShaderType\n): AttributeShaderType {\n  return WGSL_ATTRIBUTE_TYPE_ALIAS_MAP[alias as AttributeShaderTypeAlias] || alias;\n}\n\nexport function resolveVariableShaderTypeAlias(\n  alias: VariableShaderTypeAlias | VariableShaderType\n): VariableShaderType {\n  return WGSL_VARIABLE_TYPE_ALIAS_MAP[alias as VariableShaderTypeAlias] || alias;\n}\n\n// TABLES\n\nconst PRIMITIVE_TYPE_SIZES: Record<PrimitiveDataType, 2 | 4> = {\n  f32: 4,\n  f16: 2,\n  i32: 4,\n  u32: 4\n  // 'bool-webgl': 4,\n};\n\n/** All valid shader attribute types. A table guarantees exhaustive list and fast execution */\nconst TYPE_INFO: Record<AttributeShaderType, [PrimitiveDataType, components: 1 | 2 | 3 | 4]> = {\n  f32: ['f32', 1],\n  'vec2<f32>': ['f32', 2],\n  'vec3<f32>': ['f32', 3],\n  'vec4<f32>': ['f32', 4],\n  f16: ['f16', 1],\n  'vec2<f16>': ['f16', 2],\n  'vec3<f16>': ['f16', 3],\n  'vec4<f16>': ['f16', 4],\n  i32: ['i32', 1],\n  'vec2<i32>': ['i32', 2],\n  'vec3<i32>': ['i32', 3],\n  'vec4<i32>': ['i32', 4],\n  u32: ['u32', 1],\n  'vec2<u32>': ['u32', 2],\n  'vec3<u32>': ['u32', 3],\n  'vec4<u32>': ['u32', 4]\n};\n\n/** @todo These tables are quite big, consider parsing type strings instead */\nconst UNIFORM_FORMATS: Record<VariableShaderType, {type: PrimitiveDataType; components: number}> = {\n  f32: {type: 'f32', components: 1},\n  f16: {type: 'f16', components: 1},\n  i32: {type: 'i32', components: 1},\n  u32: {type: 'u32', components: 1},\n  // 'bool-webgl': {type: 'bool-webgl', components: 1},\n  'vec2<f32>': {type: 'f32', components: 2},\n  'vec3<f32>': {type: 'f32', components: 3},\n  'vec4<f32>': {type: 'f32', components: 4},\n  'vec2<f16>': {type: 'f16', components: 2},\n  'vec3<f16>': {type: 'f16', components: 3},\n  'vec4<f16>': {type: 'f16', components: 4},\n  'vec2<i32>': {type: 'i32', components: 2},\n  'vec3<i32>': {type: 'i32', components: 3},\n  'vec4<i32>': {type: 'i32', components: 4},\n  'vec2<u32>': {type: 'u32', components: 2},\n  'vec3<u32>': {type: 'u32', components: 3},\n  'vec4<u32>': {type: 'u32', components: 4},\n\n  'mat2x2<f32>': {type: 'f32', components: 4},\n  'mat2x3<f32>': {type: 'f32', components: 6},\n  'mat2x4<f32>': {type: 'f32', components: 8},\n  'mat3x2<f32>': {type: 'f32', components: 6},\n  'mat3x3<f32>': {type: 'f32', components: 9},\n  'mat3x4<f32>': {type: 'f32', components: 12},\n  'mat4x2<f32>': {type: 'f32', components: 8},\n  'mat4x3<f32>': {type: 'f32', components: 12},\n  'mat4x4<f32>': {type: 'f32', components: 16},\n\n  'mat2x2<f16>': {type: 'f16', components: 4},\n  'mat2x3<f16>': {type: 'f16', components: 6},\n  'mat2x4<f16>': {type: 'f16', components: 8},\n  'mat3x2<f16>': {type: 'f16', components: 6},\n  'mat3x3<f16>': {type: 'f16', components: 9},\n  'mat3x4<f16>': {type: 'f16', components: 12},\n  'mat4x2<f16>': {type: 'f16', components: 8},\n  'mat4x3<f16>': {type: 'f16', components: 12},\n  'mat4x4<f16>': {type: 'f16', components: 16},\n\n  'mat2x2<i32>': {type: 'i32', components: 4},\n  'mat2x3<i32>': {type: 'i32', components: 6},\n  'mat2x4<i32>': {type: 'i32', components: 8},\n  'mat3x2<i32>': {type: 'i32', components: 6},\n  'mat3x3<i32>': {type: 'i32', components: 9},\n  'mat3x4<i32>': {type: 'i32', components: 12},\n  'mat4x2<i32>': {type: 'i32', components: 8},\n  'mat4x3<i32>': {type: 'i32', components: 12},\n  'mat4x4<i32>': {type: 'i32', components: 16},\n\n  'mat2x2<u32>': {type: 'u32', components: 4},\n  'mat2x3<u32>': {type: 'u32', components: 6},\n  'mat2x4<u32>': {type: 'u32', components: 8},\n  'mat3x2<u32>': {type: 'u32', components: 6},\n  'mat3x3<u32>': {type: 'u32', components: 9},\n  'mat3x4<u32>': {type: 'u32', components: 12},\n  'mat4x2<u32>': {type: 'u32', components: 8},\n  'mat4x3<u32>': {type: 'u32', components: 12},\n  'mat4x4<u32>': {type: 'u32', components: 16}\n};\n\n/**  Predeclared aliases @see https://www.w3.org/TR/WGSL/#vector-types */\nexport const WGSL_ATTRIBUTE_TYPE_ALIAS_MAP: Record<AttributeShaderTypeAlias, AttributeShaderType> =\n  {\n    vec2i: 'vec2<i32>',\n    vec3i: 'vec3<i32>',\n    vec4i: 'vec4<i32>',\n    vec2u: 'vec2<u32>',\n    vec3u: 'vec3<u32>',\n    vec4u: 'vec4<u32>',\n    vec2f: 'vec2<f32>',\n    vec3f: 'vec3<f32>',\n    vec4f: 'vec4<f32>',\n    // Requires the f16 extension.\n    vec2h: 'vec2<f16>',\n    vec3h: 'vec3<f16>',\n    vec4h: 'vec4<f16>'\n  };\n\n/** @todo These tables are quite big, consider parsing alias strings instead */\nexport const WGSL_VARIABLE_TYPE_ALIAS_MAP: Record<VariableShaderTypeAlias, VariableShaderType> = {\n  ...WGSL_ATTRIBUTE_TYPE_ALIAS_MAP,\n  mat2x2f: 'mat2x2<f32>',\n  mat2x3f: 'mat2x3<f32>',\n  mat2x4f: 'mat2x4<f32>',\n  mat3x2f: 'mat3x2<f32>',\n  mat3x3f: 'mat3x3<f32>',\n  mat3x4f: 'mat3x4<f32>',\n  mat4x2f: 'mat4x2<f32>',\n  mat4x3f: 'mat4x3<f32>',\n  mat4x4f: 'mat4x4<f32>',\n\n  mat2x2i: 'mat2x2<i32>',\n  mat2x3i: 'mat2x3<i32>',\n  mat2x4i: 'mat2x4<i32>',\n  mat3x2i: 'mat3x2<i32>',\n  mat3x3i: 'mat3x3<i32>',\n  mat3x4i: 'mat3x4<i32>',\n  mat4x2i: 'mat4x2<i32>',\n  mat4x3i: 'mat4x3<i32>',\n  mat4x4i: 'mat4x4<i32>',\n\n  mat2x2u: 'mat2x2<u32>',\n  mat2x3u: 'mat2x3<u32>',\n  mat2x4u: 'mat2x4<u32>',\n  mat3x2u: 'mat3x2<u32>',\n  mat3x3u: 'mat3x3<u32>',\n  mat3x4u: 'mat3x4<u32>',\n  mat4x2u: 'mat4x2<u32>',\n  mat4x3u: 'mat4x3<u32>',\n  mat4x4u: 'mat4x4<u32>',\n\n  mat2x2h: 'mat2x2<f16>',\n  mat2x3h: 'mat2x3<f16>',\n  mat2x4h: 'mat2x4<f16>',\n  mat3x2h: 'mat3x2<f16>',\n  mat3x3h: 'mat3x3<f16>',\n  mat3x4h: 'mat3x4<f16>',\n  mat4x2h: 'mat4x2<f16>',\n  mat4x3h: 'mat4x3<f16>',\n  mat4x4h: 'mat4x4<f16>'\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {PrimitiveTopology} from '../types/parameters';\nimport {ShaderLayout} from '../types/shader-layout';\nimport type {Buffer} from './buffer';\nimport {Resource, ResourceProps} from './resource';\n\n/** For bindRange */\nexport type BufferRange = {\n  buffer: Buffer;\n  byteOffset?: number;\n  byteLength?: number;\n};\n\n/** Configures a set of output buffers for pipeline (WebGL only) */\nexport type TransformFeedbackProps = ResourceProps & {\n  /** Layout of shader (for varyings) */\n  layout: ShaderLayout;\n  /** Buffer bindings (for varyings) */\n  buffers: Record<string, Buffer | BufferRange>;\n};\n\n/** Holds a set of output buffers for pipeline (WebGL only) */\nexport abstract class TransformFeedback extends Resource<TransformFeedbackProps> {\n  static override defaultProps: Required<TransformFeedbackProps> = {\n    ...Resource.defaultProps,\n    layout: undefined!,\n    buffers: {}\n  };\n\n  get [Symbol.toStringTag](): string {\n    return 'TransformFeedback';\n  }\n\n  constructor(device: Device, props: TransformFeedbackProps) {\n    super(device, props, TransformFeedback.defaultProps);\n  }\n\n  abstract begin(topology?: PrimitiveTopology): void;\n  abstract end(): void;\n\n  abstract setBuffers(buffers: Record<string, Buffer | BufferRange>): void;\n  abstract setBuffer(locationOrName: string | number, bufferOrRange: Buffer | BufferRange): void;\n  abstract getBuffer(locationOrName: string | number): Buffer | BufferRange | null;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\n/**\n * Properties for creating a QuerySet\n * - 'timestamp' - query the GPU timestamp counter at the start and end of render passes\n *   timestamp queries are available if the 'timestamp-query' feature is present.\n * - 'occlusion' - query the number of fragment samples that pass all per-fragment tests for a set of drawing commands\n *   including scissor, sample mask, alpha to coverage, stencil, and depth tests\n */\nexport type QuerySetProps = ResourceProps & {\n  /**\n   * The type of query set\n   * occlusion - query the number of fragment samples that pass all the per-fragment tests for a set of drawing commands, including scissor, sample mask, alpha to coverage, stencil, and depth tests\n   * timestamp - query the GPU timestamp counter at the start and end of render passes\n   */\n  type: 'occlusion' | 'timestamp';\n  /** The number of queries managed by the query set */\n  count: number;\n};\n\n/** Immutable QuerySet object */\nexport abstract class QuerySet extends Resource<QuerySetProps> {\n  get [Symbol.toStringTag](): string {\n    return 'QuerySet';\n  }\n\n  constructor(device: Device, props: QuerySetProps) {\n    super(device, props, QuerySet.defaultProps);\n  }\n\n  static override defaultProps: Required<QuerySetProps> = {\n    ...Resource.defaultProps,\n    type: undefined!,\n    count: undefined!\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Device} from '../device';\nimport {ShaderLayout} from '../types/shader-layout';\nimport {Resource, ResourceProps} from './resource';\n\nexport type PipelineLayoutProps = ResourceProps & {\n  shaderLayout: ShaderLayout;\n};\n\n/** Immutable PipelineLayout object */\nexport abstract class PipelineLayout extends Resource<PipelineLayoutProps> {\n  get [Symbol.toStringTag](): string {\n    return 'PipelineLayout';\n  }\n\n  constructor(device: Device, props: PipelineLayoutProps) {\n    super(device, props, PipelineLayout.defaultProps);\n  }\n\n  static override defaultProps: Required<PipelineLayoutProps> = {\n    ...Resource.defaultProps,\n    shaderLayout: {\n      attributes: [],\n      bindings: []\n    }\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {PrimitiveDataType} from '../shadertypes/data-types/data-types';\nimport type {VariableShaderType} from '../shadertypes/data-types/shader-types';\nimport {alignTo} from '../shadertypes/data-types/decode-data-types';\nimport {getVariableShaderTypeInfo} from '../shadertypes/data-types/decode-shader-types';\n\nimport type {UniformValue} from '../adapter/types/uniforms';\nimport {getScratchArrayBuffer} from '../utils/array-utils-flat';\nimport {isNumberArray} from '../utils/is-array';\nimport {log} from '../utils/log';\n\n/**\n * Smallest buffer size that can be used for uniform buffers.\n * TODO - does this depend on device?\n */\nconst minBufferSize: number = 1024;\n\n/**\n * Std140 layout for uniform buffers\n * Supports manual listing of uniforms\n */\nexport class UniformBufferLayout {\n  readonly layout: Record<string, {offset: number; size: number; type: PrimitiveDataType}> = {};\n\n  /** number of bytes needed for buffer allocation */\n  readonly byteLength: number;\n\n  /** Create a new UniformBufferLayout given a map of attributes. */\n  constructor(\n    uniformTypes: Record<string, VariableShaderType>,\n    uniformSizes: Record<string, number> = {}\n  ) {\n    /** number of 4 byte slots taken */\n    let size: number = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const [key, uniformType] of Object.entries(uniformTypes)) {\n      const typeAndComponents = getVariableShaderTypeInfo(uniformType);\n      const {type, components} = typeAndComponents;\n      // Calculate total count for uniform arrays.\n      const count = components * (uniformSizes?.[key] ?? 1);\n      // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n      size = alignTo(size, count);\n      // Use the aligned size as the offset of the current uniform.\n      const offset = size;\n      // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n      size += count;\n      this.layout[key] = {type, size: count, offset};\n    }\n    size += (4 - (size % 4)) % 4;\n\n    const actualByteLength = size * 4;\n    this.byteLength = Math.max(actualByteLength, minBufferSize);\n  }\n\n  /** Get the data for the complete buffer */\n  getData(uniformValues: Record<string, UniformValue>): Uint8Array {\n    // Allocate three typed arrays pointing at same memory\n    const arrayBuffer = getScratchArrayBuffer(this.byteLength);\n    const typedArrays = {\n      i32: new Int32Array(arrayBuffer),\n      u32: new Uint32Array(arrayBuffer),\n      f32: new Float32Array(arrayBuffer),\n      // TODO not implemented\n      f16: new Uint16Array(arrayBuffer)\n    };\n\n    for (const [name, value] of Object.entries(uniformValues)) {\n      const uniformLayout = this.layout[name];\n      if (!uniformLayout) {\n        log.warn(`Supplied uniform value ${name} not present in uniform block layout`)();\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const {type, size, offset} = uniformLayout;\n      const typedArray = typedArrays[type];\n      if (size === 1) {\n        if (typeof value !== 'number' && typeof value !== 'boolean') {\n          log.warn(\n            `Supplied value for single component uniform ${name} is not a number: ${value}`\n          )();\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        // single value -> just set it\n        typedArray[offset] = Number(value);\n      } else {\n        if (!isNumberArray(value)) {\n          log.warn(\n            `Supplied value for multi component / array uniform ${name} is not a numeric array: ${value}`\n          )();\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        // vector/matrix -> copy the supplied (typed) array, starting from offset\n        // TODO: we should limit or check size in case the supplied data overflows\n        typedArray.set(value, offset);\n      }\n    }\n\n    return new Uint8Array(arrayBuffer, 0, this.byteLength);\n  }\n\n  /** Does this layout have a field with specified name */\n  has(name: string) {\n    return Boolean(this.layout[name]);\n  }\n\n  /** Get offset and size for a field with specified name */\n  get(name: string): {offset: number; size: number} | undefined {\n    const layout = this.layout[name];\n    return layout;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray} from '../types';\n\nlet arrayBuffer: ArrayBuffer;\n\nexport function getScratchArrayBuffer(byteLength: number): ArrayBuffer {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type: any, length: number): TypedArray {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray, NumberArray} from '../types';\n\n/**\n * Check is an array is a typed array\n * @param value value to be tested\n * @returns input as TypedArray, or null\n * @todo this should be provided by @math.gl/types\n */\nexport function isTypedArray(value: unknown): value is TypedArray {\n  return ArrayBuffer.isView(value) && !(value instanceof DataView);\n}\n\n/**\n * Check is an array is a numeric array (typed array or array of numbers)\n * @param value value to be tested\n * @returns input as NumberArray, or null\n * @todo this should be provided by @math.gl/types\n */\nexport function isNumberArray(value: unknown): value is NumberArray {\n  if (Array.isArray(value)) {\n    return value.length === 0 || typeof value[0] === 'number';\n  }\n  return isTypedArray(value);\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {VariableShaderType} from '../shadertypes/data-types/shader-types';\nimport type {UniformValue} from '../adapter/types/uniforms';\nimport {\n  ShaderLayout,\n  UniformInfo,\n  UniformBufferBindingLayout\n} from '../adapter/types/shader-layout';\nimport {arrayEqual, arrayCopy} from '../utils/array-equal';\n\n/**\n * A uniform block holds values of the of uniform values for one uniform block / buffer.\n * It also does some book keeping on what has changed, to minimize unnecessary writes to uniform buffers.\n */\nexport class UniformBlock<\n  TUniforms extends Record<string, UniformValue> = Record<string, UniformValue>\n> {\n  name: string;\n\n  uniforms: Record<keyof TUniforms, UniformValue> = {} as Record<keyof TUniforms, UniformValue>;\n  modifiedUniforms: Record<keyof TUniforms, boolean> = {} as Record<keyof TUniforms, boolean>;\n  modified: boolean = true;\n\n  readonly bindingLayout: Record<string, UniformInfo> = {};\n  needsRedraw: string | false = 'initialized';\n\n  constructor(props?: {\n    name?: string;\n    shaderLayout?: ShaderLayout;\n    uniformTypes?: Record<keyof TUniforms, Record<string, VariableShaderType>>;\n  }) {\n    this.name = props?.name || 'unnamed';\n\n    // TODO - Extract uniform layout from the shaderLayout object\n    if (props?.name && props?.shaderLayout) {\n      const binding = props?.shaderLayout.bindings?.find(\n        binding_ => binding_.type === 'uniform' && binding_.name === props?.name\n      );\n      if (!binding) {\n        throw new Error(props?.name);\n      }\n\n      const uniformBlock = binding as UniformBufferBindingLayout;\n      for (const uniform of uniformBlock.uniforms || []) {\n        this.bindingLayout[uniform.name] = uniform;\n      }\n    }\n  }\n\n  /** Set a map of uniforms */\n  setUniforms(uniforms: Partial<TUniforms>): void {\n    for (const [key, value] of Object.entries(uniforms)) {\n      this._setUniform(key, value);\n      if (!this.needsRedraw) {\n        this.setNeedsRedraw(`${this.name}.${key}=${value}`);\n      }\n    }\n  }\n\n  setNeedsRedraw(reason: string): void {\n    this.needsRedraw = this.needsRedraw || reason;\n  }\n\n  /** Returns all uniforms */\n  getAllUniforms(): Record<string, UniformValue> {\n    // @ts-expect-error\n    this.modifiedUniforms = {};\n    this.needsRedraw = false;\n    return (this.uniforms || {}) as Record<string, UniformValue>;\n  }\n\n  /** Set a single uniform */\n  private _setUniform(key: keyof TUniforms, value: UniformValue) {\n    if (arrayEqual(this.uniforms[key], value)) {\n      return;\n    }\n    this.uniforms[key] = arrayCopy(value);\n    this.modifiedUniforms[key] = true;\n    this.modified = true;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {isNumberArray} from './is-array';\n\n/** Test if two arrays are deep equal, with a length limit that defaults to 16 */\nexport function arrayEqual(a: unknown, b: unknown, limit: number = 16) {\n  if (a !== b) {\n    return false;\n  }\n  const arrayA = a;\n  const arrayB = b;\n  if (!isNumberArray(arrayA)) {\n    return false;\n  }\n  if (isNumberArray(arrayB) && arrayA.length === arrayB.length) {\n    for (let i = 0; i < arrayA.length; ++i) {\n      if (arrayB[i] !== arrayA[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Copy a value */\nexport function arrayCopy<T>(a: T): T {\n  if (isNumberArray(a)) {\n    return a.slice() as T;\n  }\n  return a;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {VariableShaderType} from '../shadertypes/data-types/shader-types';\nimport type {UniformValue} from '../adapter/types/uniforms';\nimport type {Device} from '../adapter/device';\nimport {Buffer} from '../adapter/resources/buffer';\nimport {log} from '../utils/log';\nimport {UniformBlock} from './uniform-block';\nimport {UniformBufferLayout} from './uniform-buffer-layout';\n\n/**\n * A uniform store holds a uniform values for one or more uniform blocks,\n * - It can generate binary data for any uniform buffer\n * - It can manage a uniform buffer for each block\n * - It can update managed uniform buffers with a single call\n * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.\n */\nexport class UniformStore<\n  TPropGroups extends Record<string, Record<string, unknown>> = Record<\n    string,\n    Record<string, unknown>\n  >\n> {\n  /** Stores the uniform values for each uniform block */\n  uniformBlocks = new Map<keyof TPropGroups, UniformBlock>();\n  /** Can generate data for a uniform buffer for each block from data */\n  uniformBufferLayouts = new Map<keyof TPropGroups, UniformBufferLayout>();\n  /** Actual buffer for the blocks */\n  uniformBuffers = new Map<keyof TPropGroups, Buffer>();\n\n  /**\n   * Create a new UniformStore instance\n   * @param blocks\n   */\n  constructor(\n    blocks: Record<\n      keyof TPropGroups,\n      {\n        uniformTypes?: Record<string, VariableShaderType>;\n        uniformSizes?: Record<string, number>;\n        defaultProps?: Record<string, unknown>;\n        defaultUniforms?: Record<string, UniformValue>;\n      }\n    >\n  ) {\n    for (const [bufferName, block] of Object.entries(blocks)) {\n      const uniformBufferName = bufferName as keyof TPropGroups;\n\n      // Create a layout object to help us generate correctly formatted binary uniform buffers\n      const uniformBufferLayout = new UniformBufferLayout(\n        block.uniformTypes ?? {},\n        block.uniformSizes ?? {}\n      );\n      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);\n\n      // Create a Uniform block to store the uniforms for each buffer.\n      const uniformBlock = new UniformBlock({name: bufferName});\n      uniformBlock.setUniforms(block.defaultUniforms || {});\n      this.uniformBlocks.set(uniformBufferName, uniformBlock);\n    }\n  }\n\n  /** Destroy any managed uniform buffers */\n  destroy(): void {\n    for (const uniformBuffer of this.uniformBuffers.values()) {\n      uniformBuffer.destroy();\n    }\n  }\n\n  /**\n   * Set uniforms\n   * Makes all properties partial\n   */\n  setUniforms(\n    uniforms: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\n  ): void {\n    for (const [blockName, uniformValues] of Object.entries(uniforms)) {\n      this.uniformBlocks.get(blockName)?.setUniforms(uniformValues);\n      // We leverage logging in updateUniformBuffers(), even though slightly less efficient\n      // this.updateUniformBuffer(blockName);\n    }\n\n    this.updateUniformBuffers();\n  }\n\n  /** Get the required minimum length of the uniform buffer */\n  getUniformBufferByteLength(uniformBufferName: keyof TPropGroups): number {\n    return this.uniformBufferLayouts.get(uniformBufferName)?.byteLength || 0;\n  }\n\n  /** Get formatted binary memory that can be uploaded to a buffer */\n  getUniformBufferData(uniformBufferName: keyof TPropGroups): Uint8Array {\n    const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms() || {};\n    // @ts-ignore\n    return this.uniformBufferLayouts.get(uniformBufferName)?.getData(uniformValues);\n  }\n\n  /**\n   * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)\n   * The new buffer is initialized with current / supplied values\n   */\n  createUniformBuffer(\n    device: Device,\n    uniformBufferName: keyof TPropGroups,\n    uniforms?: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\n  ): Buffer {\n    if (uniforms) {\n      this.setUniforms(uniforms);\n    }\n    const byteLength = this.getUniformBufferByteLength(uniformBufferName);\n    const uniformBuffer = device.createBuffer({\n      usage: Buffer.UNIFORM | Buffer.COPY_DST,\n      byteLength\n    });\n    // Note that this clears the needs redraw flag\n    const uniformBufferData = this.getUniformBufferData(uniformBufferName);\n    uniformBuffer.write(uniformBufferData);\n    return uniformBuffer;\n  }\n\n  /** Get the managed uniform buffer. \"managed\" resources are destroyed when the uniformStore is destroyed. */\n  getManagedUniformBuffer(device: Device, uniformBufferName: keyof TPropGroups): Buffer {\n    if (!this.uniformBuffers.get(uniformBufferName)) {\n      const byteLength = this.getUniformBufferByteLength(uniformBufferName);\n      const uniformBuffer = device.createBuffer({\n        usage: Buffer.UNIFORM | Buffer.COPY_DST,\n        byteLength\n      });\n      this.uniformBuffers.set(uniformBufferName, uniformBuffer);\n    }\n    // this.updateUniformBuffers();\n    // @ts-ignore\n    return this.uniformBuffers.get(uniformBufferName);\n  }\n\n  /** Updates all uniform buffers where values have changed */\n  updateUniformBuffers(): false | string {\n    let reason: false | string = false;\n    for (const uniformBufferName of this.uniformBlocks.keys()) {\n      const bufferReason = this.updateUniformBuffer(uniformBufferName);\n      reason ||= bufferReason;\n    }\n    if (reason) {\n      log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();\n    }\n    return reason;\n  }\n\n  /** Update one uniform buffer. Only updates if values have changed */\n  updateUniformBuffer(uniformBufferName: keyof TPropGroups): false | string {\n    const uniformBlock = this.uniformBlocks.get(uniformBufferName);\n    let uniformBuffer = this.uniformBuffers.get(uniformBufferName);\n\n    let reason: false | string = false;\n    if (uniformBuffer && uniformBlock?.needsRedraw) {\n      reason ||= uniformBlock.needsRedraw;\n      // This clears the needs redraw flag\n      const uniformBufferData = this.getUniformBufferData(uniformBufferName);\n\n      uniformBuffer = this.uniformBuffers.get(uniformBufferName);\n      uniformBuffer?.write(uniformBufferData);\n\n      // logging - TODO - don't query the values unnecessarily\n      const uniformValues = this.uniformBlocks.get(uniformBufferName)?.getAllUniforms();\n      log.log(\n        4,\n        `Writing to uniform buffer ${String(uniformBufferName)}`,\n        uniformBufferData,\n        uniformValues\n      )();\n    }\n    return reason;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nexport type ImageData = {\n  /** Offset into the data (in addition to any offset built-in to the ArrayBufferView) */\n  byteOffset?: number;\n  /** The stride, in bytes, between the beginning of each texel block row and the subsequent texel block row. Required if there are multiple texel block rows (i.e. the copy height or depth is more than one block). */\n  bytesPerRow?: number;\n  /** Number or rows per image (needed if multiple images are being set) */\n  rowsPerImage?: number;\n  /** Bits per channel */\n  bitsPerChannel: [number, number, number, number];\n};\n\nexport type PixelData = {\n  arrayBuffer: ArrayBuffer;\n  width: number;\n  height: number;\n  /** Bytes per pixel */\n  bytesPerPixel: number;\n  bytesPerRow: number;\n  bitsPerChannel: [number, number, number, number];\n};\n\n/**\n * Extracts a single RGBA pixel value from PixelData at the given (x, y) coordinate.\n *\n * The pixel's data is assumed to be packed according to pixelData.bitsPerChannel.\n * The pixel data for a given row is padded to pixelData.bytesPerRow.\n *\n * @param pixelData - The metadata and data for the pixel buffer.\n * @param x - The x coordinate (0-based).\n * @param y - The y coordinate (0-based).\n * @returns A tuple [r, g, b, a] where each channel is the extracted numeric value.\n *\n* @example\n\nAssume you obtained an ArrayBuffer from copyTextureToBuffer and have the following metadata:\n\n  const pixelData: PixelData = {\n    bitsPerChannel: [5, 6, 5, 0], // For example, a 16-bit RGB565 format (no alpha)\n    width: 800,\n    height: 600,\n    bytesPerPixel: 2,           // 16 bits per pixel\n    bytesPerRow: 1600,          // Assuming no extra padding\n    arrayBuffer: myTextureBuffer, // Obtained from copyTextureToBuffer\n  };\n\nYou can then extract the pixel at (x, y) like so:\n\n  const rgba = extractPixel(pixelData, x, y);\n  console.log(\"Extracted RGBA:\", rgba);\n\nFor RGBA formats where all channels are present (e.g. [8, 8, 8, 8]), the function will extract a 4-channel pixel value.\n*/\n\nexport function readPixel(\n  pixelData: PixelData,\n  x: number,\n  y: number,\n  bitsPerChannel: [number, number, number, number]\n): [number, number, number, number] {\n  if (x < 0 || x >= pixelData.width || y < 0 || y >= pixelData.height) {\n    throw new Error('Coordinates out of bounds.');\n  }\n\n  // Compute the byte offset of the pixel in the buffer.\n  const byteOffset = y * pixelData.bytesPerRow + x * pixelData.bytesPerPixel;\n\n  // Create a Uint8Array view for this pixel's bytes.\n  // We only need to view pixelData.bytesPerPixel bytes.\n  const pixelDataView = new DataView(pixelData.arrayBuffer, byteOffset, pixelData.bytesPerPixel);\n\n  let bitOffsetWithinPixel = 0;\n  const channels: number[] = [];\n\n  // Extract each of the four channels.\n  for (let i = 0; i < 4; i++) {\n    const bits = bitsPerChannel[i];\n    // If a channel's bit width is zero or negative, consider it not present.\n    if (bits <= 0) {\n      channels.push(0);\n    } else {\n      const channelValue = readBitsFromDataView(pixelDataView, bitOffsetWithinPixel, bits);\n      channels.push(channelValue);\n      bitOffsetWithinPixel += bits;\n    }\n  }\n\n  return [channels[0], channels[1], channels[2], channels[3]];\n}\n\n/**\n * Encodes an RGBA pixel into a DataView at a given bit offset according to a specified bit layout.\n *\n * The channels are written sequentially in the order R, G, B, A. For each channel, the number\n * of bits is taken from the bitsPerChannel array. Channel values are masked to fit within the specified width.\n *\n * @param dataView - The DataView into which the pixel will be encoded.\n * @param bitOffset - The bit offset in the DataView where the pixel should be written.\n * @param bitsPerChannel - A tuple specifying the number of bits for each channel: [R, G, B, A].\n * @param pixel - A tuple [r, g, b, a] containing the channel values (as numbers).\n *\n * @example\n\nAssume you want to encode a pixel into a packed format where:\n  - Red uses 5 bits\n  - Green uses 6 bits\n  - Blue uses 5 bits\n  - Alpha is not used (0 bits)\nAnd the pixel format is packed into 16 bits total.\n\nYou might have:\n  const bitsPerChannel: [number, number, number, number] = [5, 6, 5, 0];\n  const pixel: [number, number, number, number] = [15, 31, 15, 0]; // Example values\n  const buffer = new ArrayBuffer(2); // 16 bits = 2 bytes\n  const dataView = new DataView(buffer);\n\nNow encode the pixel at bit offset 0:\n  encodePixel(dataView, 0, bitsPerChannel, pixel);\n\nThe dataView now contains the 16-bit packed pixel value in big-endian order.\n*/\nexport function writePixel(\n  dataView: DataView,\n  bitOffset: number,\n  bitsPerChannel: [number, number, number, number],\n  pixel: [number, number, number, number]\n): void {\n  let currentBitOffset = bitOffset;\n  for (let channel = 0; channel < 4; channel++) {\n    const bits = bitsPerChannel[channel];\n    // Clamp the channel value to the maximum allowed by the bit width.\n    const maxValue = (1 << bits) - 1;\n    const channelValue = pixel[channel] & maxValue;\n    writeBitsToDataView(dataView, currentBitOffset, bits, channelValue);\n    currentBitOffset += bits;\n  }\n}\n\n/**\n * Reads a specified number of bits from a DataView starting at a given bit offset.\n *\n * For channels with a bit width of 8, 16, or 32 bits and when the bitOffset is byte-aligned,\n * this function uses DataView methods for fast extraction.\n *\n * Bits are assumed to be stored in big-endian order (i.e. the most-significant bit is at position 7 in each byte).\n *\n * @param dataView - The DataView containing the data.\n * @param bitOffset - The offset (in bits) within the data from which to start reading.\n * @param bitCount - The number of bits to read (supported range: 1 to 32).\n * @returns The extracted value as a number.\n */\nexport function readBitsFromDataView(\n  dataView: DataView,\n  bitOffset: number,\n  bitCount: number\n): number {\n  // Check if we can optimize when bitOffset is byte-aligned.\n  if (bitOffset % 8 === 0) {\n    const byteOffset = bitOffset / 8;\n    if (bitCount === 8 && byteOffset + 1 <= dataView.byteLength) {\n      return dataView.getUint8(byteOffset);\n    } else if (bitCount === 16 && byteOffset + 2 <= dataView.byteLength) {\n      // false for big-endian reading.\n      return dataView.getUint16(byteOffset, false);\n    } else if (bitCount === 32 && byteOffset + 4 <= dataView.byteLength) {\n      return dataView.getUint32(byteOffset, false);\n    }\n  }\n\n  // Fallback: bit-level extraction for non-aligned or non-standard bit widths.\n  let value = 0;\n  for (let i = 0; i < bitCount; i++) {\n    const overallBitIndex = bitOffset + i;\n    const byteIndex = Math.floor(overallBitIndex / 8);\n    const bitIndex = overallBitIndex % 8;\n    // Read the byte and extract the bit at position (7 - bitIndex).\n    const byteValue = dataView.getUint8(byteIndex);\n    const bit = (byteValue >> (7 - bitIndex)) & 1;\n    value = (value << 1) | bit;\n  }\n  return value;\n}\n\n/**\n * Writes a specified number of bits from a value into a DataView at a given bit offset.\n *\n * For channels with a bit width of 8, 16, or 32 bits and when the bit offset is byte-aligned,\n * this function uses DataView methods for fast writing.\n *\n * Bits are assumed to be stored in big-endian order (i.e. the most-significant bit is at position 7 in each byte).\n *\n * @param dataView - The DataView to write into.\n * @param bitOffset - The bit offset at which to begin writing.\n * @param bitCount - The number of bits to write (supported range: 1 to 32).\n * @param value - The numeric value whose lower bitCount bits will be written.\n */\nexport function writeBitsToDataView(\n  dataView: DataView,\n  bitOffset: number,\n  bitCount: number,\n  value: number\n): void {\n  // If the bitOffset is byte-aligned, we may optimize for common bit widths.\n  if (bitOffset % 8 === 0) {\n    const byteOffset = bitOffset / 8;\n    if (bitCount === 8 && byteOffset + 1 <= dataView.byteLength) {\n      dataView.setUint8(byteOffset, value & 0xff);\n      return;\n    } else if (bitCount === 16 && byteOffset + 2 <= dataView.byteLength) {\n      dataView.setUint16(byteOffset, value & 0xffff, false); // big-endian\n      return;\n    } else if (bitCount === 32 && byteOffset + 4 <= dataView.byteLength) {\n      dataView.setUint32(byteOffset, value, false); // big-endian\n      return;\n    }\n  }\n\n  // Fallback: write bit-by-bit.\n  for (let i = 0; i < bitCount; i++) {\n    const overallBitIndex = bitOffset + i;\n    const byteIndex = Math.floor(overallBitIndex / 8);\n    const bitIndex = overallBitIndex % 8;\n    const mask = 1 << (7 - bitIndex);\n    // Extract the i-th bit from value (starting from the most-significant bit)\n    const bitValue = (value >> (bitCount - 1 - i)) & 1;\n    // Read the current byte.\n    let currentByte = dataView.getUint8(byteIndex);\n    // Clear the target bit.\n    currentByte &= ~mask;\n    // Set the target bit if bitValue is 1.\n    if (bitValue) {\n      currentByte |= mask;\n    }\n    dataView.setUint8(byteIndex, currentByte);\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// @ts-nocheck TODO - fix\n\nimport {setGLParameters, getGLParameters} from '../parameters/unified-parameter-api';\nimport {deepArrayEqual} from './deep-array-equal';\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_HOOKED_SETTERS,\n  NON_CACHE_PARAMETERS\n} from '../parameters/webgl-parameter-tables';\n\n// HELPER CLASS - WebGLStateTracker\n\n/**\n * Support for listening to context state changes and intercepting state queries\n * NOTE: this system does not handle buffer bindings\n */\nexport class WebGLStateTracker {\n  static get(gl: WebGL2RenderingContext): WebGLStateTracker {\n    // @ts-expect-error\n    return gl.state as WebGLStateTracker;\n  }\n\n  gl: WebGL2RenderingContext;\n  program: unknown = null;\n  stateStack: object[] = [];\n  enable = true;\n  cache: Record<string, any> = null!;\n  log;\n\n  protected initialized = false;\n\n  constructor(\n    gl: WebGL2RenderingContext,\n    props?: {\n      log; // Logging function, called when gl parameter change calls are actually issued\n    }\n  ) {\n    this.gl = gl;\n    this.log = props?.log || (() => {});\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    // assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setGLParameters(this.gl, oldValues);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  /**\n   * Initialize WebGL state caching on a context\n   * can be called multiple times to enable/disable\n   *\n   * @note After calling this function, context state will be cached\n   * .push() and .pop() will be available for saving,\n   * temporarily modifying, and then restoring state.\n   */\n  trackState(gl: WebGL2RenderingContext, options?: {copyState?: boolean}): void {\n    this.cache = options?.copyState\n      ? getGLParameters(gl)\n      : Object.assign({}, GL_PARAMETER_DEFAULTS);\n\n    if (this.initialized) {\n      throw new Error('WebGLStateTracker');\n    }\n    this.initialized = true;\n\n    // @ts-expect-error\n    this.gl.state = this;\n\n    installProgramSpy(gl);\n\n    // intercept all setter functions in the table\n    for (const key in GL_HOOKED_SETTERS) {\n      const setter = GL_HOOKED_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  /**\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n   * @param values\n   * @returns\n   */\n  _updateCache(values: {[key: number | string]: any}) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues: {[key: number | string]: any} | null =\n      this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;\n\n    for (const key in values) {\n      // assert(key !== undefined);\n      const value = values[key];\n      const cached = this.cache[key];\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(value, cached)) {\n        valueChanged = true;\n        oldValue = cached;\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = cached;\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = value;\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n/**\n// Overrides a WebGL2RenderingContext state \"getter\" function\n// to return values directly from cache\n * @param gl\n * @param functionName\n */\nfunction installGetterOverride(gl: WebGL2RenderingContext, functionName: string) {\n  // Get the original function from the WebGL2RenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(pname) {\n    if (pname === undefined || NON_CACHE_PARAMETERS.has(pname)) {\n      // Invalid or blacklisted parameter, do not cache\n      return originalGetterFunc(pname);\n    }\n\n    const glState = WebGLStateTracker.get(gl);\n    if (!(pname in glState.cache)) {\n      // WebGL limits are not prepopulated in the cache, call the original getter when first queried.\n      glState.cache[pname] = originalGetterFunc(pname);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGL2RenderingContext\n    return glState.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        glState.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGL2RenderingContext\n        originalGetterFunc(pname);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n/**\n// Overrides a WebGL2RenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\n * @param gl\n * @param functionName\n * @param setter\n * @returns\n */\nfunction installSetterSpy(gl: WebGL2RenderingContext, functionName: string, setter: Function) {\n  // Get the original function from the WebGL2RenderingContext\n  if (!gl[functionName]) {\n    // TODO - remove?\n    // This could happen if we try to intercept WebGL2 method on a WebGL1 context\n    return;\n  }\n\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const glState = WebGLStateTracker.get(gl);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {valueChanged, oldValue} = setter(glState._updateCache, ...params);\n\n    // Call the original WebGL2RenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\nfunction installProgramSpy(gl: WebGL2RenderingContext): void {\n  const originalUseProgram = gl.useProgram.bind(gl);\n\n  gl.useProgram = function useProgramLuma(handle) {\n    const glState = WebGLStateTracker.get(gl);\n    if (glState.program !== handle) {\n      originalUseProgram(handle);\n      glState.program = handle;\n    }\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport type {GLParameters} from '@luma.gl/constants';\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nexport type {GLParameters};\n\n/**\n * Sets any GL parameter regardless of function (gl.blendMode, ...)\n *\n * @note requires a `cache` object to be set on the context (gl.state.cache)\n * This object is used to fill in any missing values for composite setter functions\n */\nexport function setGLParameters(gl: WebGL2RenderingContext, parameters: GLParameters): void {\n  if (isObjectEmpty(parameters)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in parameters) {\n    const glConstant = Number(key);\n    // @ts-ignore TODO\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        // @ts-ignore TODO\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        // @ts-ignore TODO\n        setter(gl, parameters[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  // @ts-expect-error\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      // @ts-ignore TODO\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, parameters, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n/**\n * Reads the entire WebGL state from a context\n\n  // default to querying all parameters\n\n  * @returns - a newly created map, with values keyed by GL parameters\n *\n * @note Copies the state from a context (gl.getParameter should not be overriden)\n * Reads the entire WebGL state from a context\n *\n * @note This can generates a huge amount of synchronous driver roundtrips and should be\n * considered a very slow operation, to be used only if/when a context already manipulated\n * by external code needs to be synchronized for the first time\n */\nexport function getGLParameters(\n  gl: WebGL2RenderingContext,\n  parameters: keyof GLParameters | (keyof GLParameters)[] | GLParameters = GL_PARAMETER_DEFAULTS\n): GLParameters {\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    // @ts-ignore TODO\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state: GLParameters = {};\n  for (const key of parameterKeys) {\n    // @ts-ignore TODO\n    const getter = GL_PARAMETER_GETTERS[key];\n    // @ts-ignore TODO\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n/**\n * Reset all parameters to a (almost) pure context state\n * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n * NOT the canvas size dimensions, so they will have to be properly set after\n * calling this function.\n */\nexport function resetGLParameters(gl: WebGL2RenderingContext): void {\n  setGLParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n\n// Helpers\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object: Record<string, unknown>): boolean {\n  // @ts-ignore dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// @ts-nocheck TODO fix\n\n// Tables describing WebGL parameters\nimport {GL, GLParameters} from '@luma.gl/constants';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\n/* eslint-disable no-shadow */\n\nexport const GL_PARAMETER_DEFAULTS: GLParameters = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  [GL.CURRENT_PROGRAM]: null,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.RENDERBUFFER_BINDING]: null,\n  [GL.VERTEX_ARRAY_BINDING]: null,\n  [GL.ARRAY_BUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: false,\n  [GL.SAMPLE_COVERAGE]: false,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: [0, 0, 1024, 1024],\n\n  [GL.TRANSFORM_FEEDBACK_BINDING]: null,\n  [GL.COPY_READ_BUFFER_BINDING]: null,\n  [GL.COPY_WRITE_BUFFER_BINDING]: null,\n  [GL.PIXEL_PACK_BUFFER_BINDING]: null,\n  [GL.PIXEL_UNPACK_BUFFER_BINDING]: null,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl: WebGL2RenderingContext, value: unknown, key: GL) =>\n  value ? gl.enable(key) : gl.disable(key);\nconst hint = (gl: WebGL2RenderingContext, value: GL, key: GL) => gl.hint(key, value);\nconst pixelStorei = (gl: WebGL2RenderingContext, value: number | boolean, key: GL) =>\n  gl.pixelStorei(key, value);\n\nconst bindFramebuffer = (gl: WebGL2RenderingContext, value: unknown, key: GL) => {\n  const target = key === GL.FRAMEBUFFER_BINDING ? GL.DRAW_FRAMEBUFFER : GL.READ_FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value as WebGLFramebuffer);\n};\n\nconst bindBuffer = (gl: WebGL2RenderingContext, value: unknown, key: GL) => {\n  const bindingMap: Partial<Record<GL, GL>> = {\n    [GL.ARRAY_BUFFER_BINDING]: GL.ARRAY_BUFFER,\n    [GL.COPY_READ_BUFFER_BINDING]: GL.COPY_READ_BUFFER,\n    [GL.COPY_WRITE_BUFFER_BINDING]: GL.COPY_WRITE_BUFFER,\n    [GL.PIXEL_PACK_BUFFER_BINDING]: GL.PIXEL_PACK_BUFFER,\n    [GL.PIXEL_UNPACK_BUFFER_BINDING]: GL.PIXEL_UNPACK_BUFFER\n  };\n  const glTarget = bindingMap[key];\n\n  gl.bindBuffer(glTarget as number, value as WebGLBuffer | null);\n};\n\n// Utility\nfunction isArray(array: unknown): boolean {\n  return Array.isArray(array) || (ArrayBuffer.isView(array) && !(array instanceof DataView));\n}\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl: WebGL2RenderingContext, value: [boolean, boolean, boolean, boolean]) =>\n    gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl: WebGL2RenderingContext, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl: WebGL2RenderingContext, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl: WebGL2RenderingContext, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl: WebGL2RenderingContext, value: [number, number]) =>\n    gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl: WebGL2RenderingContext, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n\n  [GL.CURRENT_PROGRAM]: (gl: WebGL2RenderingContext, value) => gl.useProgram(value),\n  [GL.RENDERBUFFER_BINDING]: (gl: WebGL2RenderingContext, value) =>\n    gl.bindRenderbuffer(GL.RENDERBUFFER, value),\n  [GL.TRANSFORM_FEEDBACK_BINDING]: (gl: WebGL2RenderingContext, value) =>\n    gl.bindTransformFeedback?.(GL.TRANSFORM_FEEDBACK, value),\n  [GL.VERTEX_ARRAY_BINDING]: (gl: WebGL2RenderingContext, value) => gl.bindVertexArray(value),\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: bindFramebuffer,\n  [GL.READ_FRAMEBUFFER_BINDING]: bindFramebuffer,\n\n  // Buffers\n  [GL.ARRAY_BUFFER_BINDING]: bindBuffer,\n  [GL.COPY_READ_BUFFER_BINDING]: bindBuffer,\n  [GL.COPY_WRITE_BUFFER_BINDING]: bindBuffer,\n  [GL.PIXEL_PACK_BUFFER_BINDING]: bindBuffer,\n  [GL.PIXEL_UNPACK_BUFFER_BINDING]: bindBuffer,\n\n  [GL.FRONT_FACE]: (gl: WebGL2RenderingContext, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl: WebGL2RenderingContext, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: enable,\n  [GL.SAMPLE_COVERAGE]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl: WebGL2RenderingContext, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl: WebGL2RenderingContext, value) =>\n    gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl: WebGL2RenderingContext, value) =>\n    gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.viewport(...value),\n\n  // WEBGL2 EXTENSIONS\n\n  // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/\n\n  [GL.DEPTH_CLAMP_EXT]: enable,\n\n  // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/\n\n  // [GL.PROVOKING_VERTEX_WEBL]: TODO - extension function needed\n\n  // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/\n\n  // POLYGON_MODE_WEBGL  TODO - extension function needed\n  [GL.POLYGON_OFFSET_LINE_WEBGL]: enable,\n\n  // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/\n\n  [GL.CLIP_DISTANCE0_WEBGL]: enable,\n  [GL.CLIP_DISTANCE1_WEBGL]: enable,\n  [GL.CLIP_DISTANCE2_WEBGL]: enable,\n  [GL.CLIP_DISTANCE3_WEBGL]: enable,\n  [GL.CLIP_DISTANCE4_WEBGL]: enable,\n  [GL.CLIP_DISTANCE5_WEBGL]: enable,\n  [GL.CLIP_DISTANCE6_WEBGL]: enable,\n  [GL.CLIP_DISTANCE7_WEBGL]: enable,\n\n  // PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei,\n\n  // Function-style setters\n  framebuffer: (gl: WebGL2RenderingContext, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND),\n  blendColor: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.blendColor(...value),\n  blendEquation: (gl: WebGL2RenderingContext, args: number | [number, number]) => {\n    const separateModes = typeof args === 'number' ? ([args, args] as [number, number]) : args;\n    gl.blendEquationSeparate(...separateModes);\n  },\n  blendFunc: (\n    gl: WebGL2RenderingContext,\n    args: [number, number] | [number, number, number, number]\n  ) => {\n    const separateFuncs =\n      args?.length === 2 ? ([...args, ...args] as [number, number, number, number]) : args;\n    gl.blendFuncSeparate(...separateFuncs);\n  },\n\n  clearColor: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.clearColor(...value),\n  clearDepth: (gl: WebGL2RenderingContext, value) => gl.clearDepth(value),\n  clearStencil: (gl: WebGL2RenderingContext, value) => gl.clearStencil(value),\n\n  colorMask: (gl: WebGL2RenderingContext, value: [boolean, boolean, boolean, boolean]) =>\n    gl.colorMask(...value),\n\n  cull: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE),\n  cullFace: (gl: WebGL2RenderingContext, value) => gl.cullFace(value),\n\n  depthTest: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST),\n  depthFunc: (gl: WebGL2RenderingContext, value) => gl.depthFunc(value),\n  depthMask: (gl: WebGL2RenderingContext, value) => gl.depthMask(value),\n  depthRange: (gl: WebGL2RenderingContext, value: [number, number]) => gl.depthRange(...value),\n\n  dither: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER),\n\n  derivativeHint: (gl: WebGL2RenderingContext, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl: WebGL2RenderingContext, value) => gl.frontFace(value),\n\n  mipmapHint: (gl: WebGL2RenderingContext, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl: WebGL2RenderingContext, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl: WebGL2RenderingContext, value: [number, number]) =>\n    gl.polygonOffset(...value),\n\n  sampleCoverage: (gl: WebGL2RenderingContext, value: [number, boolean?]) =>\n    gl.sampleCoverage(value[0], value[1] || false),\n\n  scissorTest: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST),\n  scissor: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.scissor(...value),\n\n  stencilTest: (gl: WebGL2RenderingContext, value) =>\n    value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST),\n  stencilMask: (gl: WebGL2RenderingContext, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl: WebGL2RenderingContext, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl: WebGL2RenderingContext, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl: WebGL2RenderingContext, value: [number, number, number, number]) =>\n    gl.viewport(...value)\n};\n\nfunction getValue(glEnum, values, cache) {\n  return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];\n}\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.blendEquationSeparate(\n      getValue(GL.BLEND_EQUATION_RGB, values, cache),\n      getValue(GL.BLEND_EQUATION_ALPHA, values, cache)\n    ),\n  blendFunc: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.blendFuncSeparate(\n      getValue(GL.BLEND_SRC_RGB, values, cache),\n      getValue(GL.BLEND_DST_RGB, values, cache),\n      getValue(GL.BLEND_SRC_ALPHA, values, cache),\n      getValue(GL.BLEND_DST_ALPHA, values, cache)\n    ),\n  polygonOffset: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.polygonOffset(\n      getValue(GL.POLYGON_OFFSET_FACTOR, values, cache),\n      getValue(GL.POLYGON_OFFSET_UNITS, values, cache)\n    ),\n  sampleCoverage: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.sampleCoverage(\n      getValue(GL.SAMPLE_COVERAGE_VALUE, values, cache),\n      getValue(GL.SAMPLE_COVERAGE_INVERT, values, cache)\n    ),\n  stencilFuncFront: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FUNC, values, cache),\n      getValue(GL.STENCIL_REF, values, cache),\n      getValue(GL.STENCIL_VALUE_MASK, values, cache)\n    ),\n  stencilFuncBack: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FUNC, values, cache),\n      getValue(GL.STENCIL_BACK_REF, values, cache),\n      getValue(GL.STENCIL_BACK_VALUE_MASK, values, cache)\n    ),\n  stencilOpFront: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      getValue(GL.STENCIL_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_PASS_DEPTH_PASS, values, cache)\n    ),\n  stencilOpBack: (gl: WebGL2RenderingContext, values, cache) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      getValue(GL.STENCIL_BACK_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_FAIL, values, cache),\n      getValue(GL.STENCIL_BACK_PASS_DEPTH_PASS, values, cache)\n    )\n};\n\ntype UpdateFunc = (params: Record<string, any>) => void;\n\n// Setter functions intercepted for cache updates\nexport const GL_HOOKED_SETTERS = {\n  // GENERIC SETTERS\n\n  enable: (update: UpdateFunc, capability: GL) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update: UpdateFunc, capability: GL) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update: UpdateFunc, pname: GL, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update: UpdateFunc, pname: GL, value: GL) =>\n    update({\n      [pname]: value\n    }),\n\n  // SPECIFIC SETTERS\n  useProgram: (update: UpdateFunc, value) =>\n    update({\n      [GL.CURRENT_PROGRAM]: value\n    }),\n  bindRenderbuffer: (update: UpdateFunc, target, value) =>\n    update({\n      [GL.RENDERBUFFER_BINDING]: value\n    }),\n  bindTransformFeedback: (update: UpdateFunc, target, value) =>\n    update({\n      [GL.TRANSFORM_FEEDBACK_BINDING]: value\n    }),\n  bindVertexArray: (update: UpdateFunc, value) =>\n    update({\n      [GL.VERTEX_ARRAY_BINDING]: value\n    }),\n\n  bindFramebuffer: (update: UpdateFunc, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  bindBuffer: (update: UpdateFunc, target, buffer) => {\n    const pname = {\n      [GL.ARRAY_BUFFER]: [GL.ARRAY_BUFFER_BINDING],\n      [GL.COPY_READ_BUFFER]: [GL.COPY_READ_BUFFER_BINDING],\n      [GL.COPY_WRITE_BUFFER]: [GL.COPY_WRITE_BUFFER_BINDING],\n      [GL.PIXEL_PACK_BUFFER]: [GL.PIXEL_PACK_BUFFER_BINDING],\n      [GL.PIXEL_UNPACK_BUFFER]: [GL.PIXEL_UNPACK_BUFFER_BINDING]\n    }[target];\n\n    if (pname) {\n      return update({[pname]: buffer});\n    }\n    // targets that should not be cached\n    return {valueChanged: true};\n  },\n\n  blendColor: (update: UpdateFunc, r: number, g: number, b: number, a: number) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update: UpdateFunc, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update: UpdateFunc, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update: UpdateFunc, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update: UpdateFunc, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update: UpdateFunc, r: number, g: number, b: number, a: number) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update: UpdateFunc, depth: number) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update: UpdateFunc, s: number) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update: UpdateFunc, r: number, g: number, b: number, a: number) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update: UpdateFunc, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update: UpdateFunc, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update: UpdateFunc, zNear: number, zFar: number) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update: UpdateFunc, mask: number) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update: UpdateFunc, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update: UpdateFunc, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update: UpdateFunc, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update: UpdateFunc, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update: UpdateFunc, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update: UpdateFunc, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update: UpdateFunc, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update: UpdateFunc, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update: UpdateFunc, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update: UpdateFunc, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update: UpdateFunc, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update: UpdateFunc, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: [x, y, width, height]\n    })\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl: WebGL2RenderingContext, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n\nexport const NON_CACHE_PARAMETERS = new Set([\n  // setter not intercepted\n  GL.ACTIVE_TEXTURE,\n  GL.TRANSFORM_FEEDBACK_ACTIVE,\n  GL.TRANSFORM_FEEDBACK_PAUSED,\n\n  // setters bindBufferRange/bindBufferBase cannot be pruned based on cache\n  GL.TRANSFORM_FEEDBACK_BUFFER_BINDING,\n  GL.UNIFORM_BUFFER_BINDING,\n\n  // states depending on VERTEX_ARRAY_BINDING\n  GL.ELEMENT_ARRAY_BUFFER_BINDING,\n  // states depending on READ_FRAMEBUFFER_BINDING\n  GL.IMPLEMENTATION_COLOR_READ_FORMAT,\n  GL.IMPLEMENTATION_COLOR_READ_TYPE,\n  // states depending on FRAMEBUFFER_BINDING\n  GL.READ_BUFFER,\n  GL.DRAW_BUFFER0,\n  GL.DRAW_BUFFER1,\n  GL.DRAW_BUFFER2,\n  GL.DRAW_BUFFER3,\n  GL.DRAW_BUFFER4,\n  GL.DRAW_BUFFER5,\n  GL.DRAW_BUFFER6,\n  GL.DRAW_BUFFER7,\n  GL.DRAW_BUFFER8,\n  GL.DRAW_BUFFER9,\n  GL.DRAW_BUFFER10,\n  GL.DRAW_BUFFER11,\n  GL.DRAW_BUFFER12,\n  GL.DRAW_BUFFER13,\n  GL.DRAW_BUFFER14,\n  GL.DRAW_BUFFER15,\n  // states depending on ACTIVE_TEXTURE\n  GL.SAMPLER_BINDING,\n  GL.TEXTURE_BINDING_2D,\n  GL.TEXTURE_BINDING_2D_ARRAY,\n  GL.TEXTURE_BINDING_3D,\n  GL.TEXTURE_BINDING_CUBE_MAP\n]);\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// WebGL constants\nexport {GL} from './webgl-constants';\n\n// WebGL types\nexport type {\n  GLTextureTarget,\n  GLTextureCubeMapTarget,\n  GLTexelDataFormat,\n  GLPrimitiveTopology,\n  GLPrimitive,\n  GLDataType,\n  GLPixelType,\n  GLUniformType,\n  GLSamplerType,\n  GLFunction,\n  GLBlendEquation,\n  GLBlendFunction,\n  GLStencilOp,\n  GLSamplerParameters,\n  GLValueParameters,\n  GLPackParameters,\n  GLUnpackParameters,\n  GLFunctionParameters,\n  GLParameters,\n  GLLimits,\n  GLExtensions,\n  GLPolygonMode,\n  GLProvokingVertex\n} from './webgl-types';\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n\n/**\n * Standard WebGL, WebGL2 and extension constants (OpenGL constants)\n * @note (Most) of these constants are also defined on the WebGLRenderingContext interface.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n * @privateRemarks Locally called `GLEnum` instead of `GL`, because `babel-plugin-inline-webl-constants`\n *  both depends on and processes this module, but shouldn't replace these declarations.\n */\n// eslint-disable-next-line no-shadow\nenum GLEnum {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  /** Passed to clear to clear the current depth buffer. */\n  DEPTH_BUFFER_BIT = 0x00000100,\n  /** Passed to clear to clear the current stencil buffer. */\n  STENCIL_BUFFER_BIT = 0x00000400,\n  /** Passed to clear to clear the current color buffer. */\n  COLOR_BUFFER_BIT = 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  /** Passed to drawElements or drawArrays to draw single points. */\n  POINTS = 0x0000,\n  /** Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it. */\n  LINES = 0x0001,\n  /** Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment. */\n  LINE_LOOP = 0x0002,\n  /** Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last. */\n  LINE_STRIP = 0x0003,\n  /** Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle. */\n  TRIANGLES = 0x0004,\n  /** Passed to drawElements or drawArrays to draw a connected group of triangles. */\n  TRIANGLE_STRIP = 0x0005,\n  /** Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan. */\n  TRIANGLE_FAN = 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n  /** Passed to blendFunc or blendFuncSeparate to turn off a component. */\n  ZERO = 0,\n  /** Passed to blendFunc or blendFuncSeparate to turn on a component. */\n  ONE = 1,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color. */\n  SRC_COLOR = 0x0300,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color. */\n  ONE_MINUS_SRC_COLOR = 0x0301,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha. */\n  SRC_ALPHA = 0x0302,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha. */\n  ONE_MINUS_SRC_ALPHA = 0x0303,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha. */\n  DST_ALPHA = 0x0304,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha. */\n  ONE_MINUS_DST_ALPHA = 0x0305,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color. */\n  DST_COLOR = 0x0306,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color. */\n  ONE_MINUS_DST_COLOR = 0x0307,\n  /** Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha. */\n  SRC_ALPHA_SATURATE = 0x0308,\n  /** Passed to blendFunc or blendFuncSeparate to specify a constant color blend function. */\n  CONSTANT_COLOR = 0x8001,\n  /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function. */\n  ONE_MINUS_CONSTANT_COLOR = 0x8002,\n  /** Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function. */\n  CONSTANT_ALPHA = 0x8003,\n  /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function. */\n  ONE_MINUS_CONSTANT_ALPHA = 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  /** Passed to blendEquation or blendEquationSeparate to set an addition blend function. */\n  /** Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination). */\n  /** Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source). */\n  FUNC_ADD = 0x8006,\n  FUNC_SUBTRACT = 0x800a,\n  FUNC_REVERSE_SUBTRACT = 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  /** Passed to getParameter to get the current RGB blend function. */\n  BLEND_EQUATION = 0x8009,\n  /** Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION */\n  BLEND_EQUATION_RGB = 0x8009,\n  /** Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION */\n  BLEND_EQUATION_ALPHA = 0x883d,\n  /** Passed to getParameter to get the current destination RGB blend function. */\n  BLEND_DST_RGB = 0x80c8,\n  /** Passed to getParameter to get the current destination RGB blend function. */\n  BLEND_SRC_RGB = 0x80c9,\n  /** Passed to getParameter to get the current destination alpha blend function. */\n  BLEND_DST_ALPHA = 0x80ca,\n  /** Passed to getParameter to get the current source alpha blend function. */\n  BLEND_SRC_ALPHA = 0x80cb,\n\n  /** Passed to getParameter to return a the current blend color. */\n  BLEND_COLOR = 0x8005,\n  /** Passed to getParameter to get the array buffer binding. */\n  ARRAY_BUFFER_BINDING = 0x8894,\n  /** Passed to getParameter to get the current element array buffer. */\n  ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,\n  /** Passed to getParameter to get the current lineWidth (set by the lineWidth method). */\n  LINE_WIDTH = 0x0b21,\n  /** Passed to getParameter to get the current size of a point drawn with gl.POINTS */\n  ALIASED_POINT_SIZE_RANGE = 0x846d,\n  /** Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1. */\n  ALIASED_LINE_WIDTH_RANGE = 0x846e,\n  /** Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK */\n  CULL_FACE_MODE = 0x0b45,\n  /** Passed to getParameter to determine the current value of frontFace. Should return CW or CCW. */\n  FRONT_FACE = 0x0b46,\n  /** Passed to getParameter to return a length-2 array of floats giving the current depth range. */\n  DEPTH_RANGE = 0x0b70,\n  /** Passed to getParameter to determine if the depth write mask is enabled. */\n\n  DEPTH_WRITEMASK = 0x0b72,\n  /** Passed to getParameter to determine the current depth clear value. */\n  DEPTH_CLEAR_VALUE = 0x0b73,\n  /** Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */\n  DEPTH_FUNC = 0x0b74,\n  /** Passed to getParameter to get the value the stencil will be cleared to. */\n  STENCIL_CLEAR_VALUE = 0x0b91,\n  /** Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */\n  STENCIL_FUNC = 0x0b92,\n  /** Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */\n  STENCIL_FAIL = 0x0b94,\n  /** Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */\n  STENCIL_PASS_DEPTH_FAIL = 0x0b95,\n  /** Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */\n  STENCIL_PASS_DEPTH_PASS = 0x0b96,\n  /** Passed to getParameter to get the reference value used for stencil tests. */\n  STENCIL_REF = 0x0b97,\n  STENCIL_VALUE_MASK = 0x0b93,\n  STENCIL_WRITEMASK = 0x0b98,\n  STENCIL_BACK_FUNC = 0x8800,\n  STENCIL_BACK_FAIL = 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,\n  STENCIL_BACK_REF = 0x8ca3,\n  STENCIL_BACK_VALUE_MASK = 0x8ca4,\n  STENCIL_BACK_WRITEMASK = 0x8ca5,\n\n  /** An Int32Array with four elements for the current viewport dimensions. */\n  VIEWPORT = 0x0ba2,\n  /** An Int32Array with four elements for the current scissor box dimensions. */\n  SCISSOR_BOX = 0x0c10,\n  COLOR_CLEAR_VALUE = 0x0c22,\n  COLOR_WRITEMASK = 0x0c23,\n  UNPACK_ALIGNMENT = 0x0cf5,\n  PACK_ALIGNMENT = 0x0d05,\n  MAX_TEXTURE_SIZE = 0x0d33,\n  MAX_VIEWPORT_DIMS = 0x0d3a,\n  SUBPIXEL_BITS = 0x0d50,\n  RED_BITS = 0x0d52,\n  GREEN_BITS = 0x0d53,\n  BLUE_BITS = 0x0d54,\n  ALPHA_BITS = 0x0d55,\n  DEPTH_BITS = 0x0d56,\n  STENCIL_BITS = 0x0d57,\n  POLYGON_OFFSET_UNITS = 0x2a00,\n  POLYGON_OFFSET_FACTOR = 0x8038,\n  TEXTURE_BINDING_2D = 0x8069,\n  SAMPLE_BUFFERS = 0x80a8,\n  SAMPLES = 0x80a9,\n  SAMPLE_COVERAGE_VALUE = 0x80aa,\n  SAMPLE_COVERAGE_INVERT = 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS = 0x86a3,\n  VENDOR = 0x1f00,\n  RENDERER = 0x1f01,\n  VERSION = 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE = 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT = 0x8b9b,\n  BROWSER_DEFAULT_WEBGL = 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often. */\n  STATIC_DRAW = 0x88e4,\n  /** Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often. */\n  STREAM_DRAW = 0x88e0,\n  /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often. */\n  DYNAMIC_DRAW = 0x88e8,\n  /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */\n  ARRAY_BUFFER = 0x8892,\n  /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */\n  ELEMENT_ARRAY_BUFFER = 0x8893,\n  /** Passed to getBufferParameter to get a buffer's size. */\n  BUFFER_SIZE = 0x8764,\n  /** Passed to getBufferParameter to get the hint for the buffer passed in when it was created. */\n  BUFFER_USAGE = 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  /** Passed to getVertexAttrib to read back the current vertex attribute. */\n  CURRENT_VERTEX_ATTRIB = 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  /** Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method. */\n  CULL_FACE = 0x0b44,\n  /** Passed to cullFace to specify that only front faces should be culled. */\n  FRONT = 0x0404,\n  /** Passed to cullFace to specify that only back faces should be culled. */\n  BACK = 0x0405,\n  /** Passed to cullFace to specify that front and back faces should be culled. */\n  FRONT_AND_BACK = 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  /** Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method. */\n  BLEND = 0x0be2,\n  /** Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test. */\n  DEPTH_TEST = 0x0b71,\n  /** Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method. */\n  DITHER = 0x0bd0,\n  /** Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test. */\n  POLYGON_OFFSET_FILL = 0x8037,\n  /** Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels. */\n  SAMPLE_ALPHA_TO_COVERAGE = 0x809e,\n  /** Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling. */\n  SAMPLE_COVERAGE = 0x80a0,\n  /** Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test. */\n  SCISSOR_TEST = 0x0c11,\n  /** Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test. */\n  STENCIL_TEST = 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  /** Returned from getError(). */\n  NO_ERROR = 0,\n  /** Returned from getError(). */\n  INVALID_ENUM = 0x0500,\n  /** Returned from getError(). */\n  INVALID_VALUE = 0x0501,\n  /** Returned from getError(). */\n  INVALID_OPERATION = 0x0502,\n  /** Returned from getError(). */\n  OUT_OF_MEMORY = 0x0505,\n  /** Returned from getError(). */\n  CONTEXT_LOST_WEBGL = 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  /** Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction */\n  CW = 0x0900,\n  /** Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction */\n  CCW = 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  /** There is no preference for this behavior. */\n  DONT_CARE = 0x1100,\n  /** The most efficient behavior should be used. */\n  FASTEST = 0x1101,\n  /** The most correct or the highest quality option should be used. */\n  NICEST = 0x1102,\n  /** Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap(). */\n  GENERATE_MIPMAP_HINT = 0x8192,\n\n  // Data types\n\n  BYTE = 0x1400,\n  UNSIGNED_BYTE = 0x1401,\n  SHORT = 0x1402,\n  UNSIGNED_SHORT = 0x1403,\n  INT = 0x1404,\n  UNSIGNED_INT = 0x1405,\n  FLOAT = 0x1406,\n  DOUBLE = 0x140a,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT = 0x1902,\n  ALPHA = 0x1906,\n  RGB = 0x1907,\n  RGBA = 0x1908,\n  LUMINANCE = 0x1909,\n  LUMINANCE_ALPHA = 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE = 0x1401,\n  UNSIGNED_SHORT_4_4_4_4 = 0x8033,\n  UNSIGNED_SHORT_5_5_5_1 = 0x8034,\n  UNSIGNED_SHORT_5_6_5 = 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  /** Passed to createShader to define a fragment shader. */\n  FRAGMENT_SHADER = 0x8b30,\n  /** Passed to createShader to define a vertex shader */\n  VERTEX_SHADER = 0x8b31,\n  /** Passed to getShaderParameter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error */\n  COMPILE_STATUS = 0x8b81,\n  /** Passed to getShaderParameter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise. */\n  DELETE_STATUS = 0x8b80,\n  /** Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error. */\n  LINK_STATUS = 0x8b82,\n  /** Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found. */\n  VALIDATE_STATUS = 0x8b83,\n  /** Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred. */\n  ATTACHED_SHADERS = 0x8b85,\n  /** Passed to getProgramParameter to get the number of attributes active in a program. */\n  ACTIVE_ATTRIBUTES = 0x8b89,\n  /** Passed to getProgramParameter to get the number of uniforms active in a program. */\n  ACTIVE_UNIFORMS = 0x8b86,\n  /** The maximum number of entries possible in the vertex attribute list. */\n  MAX_VERTEX_ATTRIBS = 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS = 0x8dfb,\n  MAX_VARYING_VECTORS = 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8b4c,\n  /** Implementation dependent number of maximum texture units. At least 8. */\n  MAX_TEXTURE_IMAGE_UNITS = 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS = 0x8dfd,\n  SHADER_TYPE = 0x8b4f,\n  SHADING_LANGUAGE_VERSION = 0x8b8c,\n  CURRENT_PROGRAM = 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass, i.e., nothing will be drawn. */\n  NEVER = 0x0200,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value. */\n  LESS = 0x0201,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value. */\n  EQUAL = 0x0202,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value. */\n  LEQUAL = 0x0203,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value. */\n  GREATER = 0x0204,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value. */\n  NOTEQUAL = 0x0205,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value. */\n  GEQUAL = 0x0206,\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass, i.e., pixels will be drawn in the order they are drawn. */\n  ALWAYS = 0x0207,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP = 0x1e00,\n  REPLACE = 0x1e01,\n  INCR = 0x1e02,\n  DECR = 0x1e03,\n  INVERT = 0x150a,\n  INCR_WRAP = 0x8507,\n  DECR_WRAP = 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST = 0x2600,\n  LINEAR = 0x2601,\n  NEAREST_MIPMAP_NEAREST = 0x2700,\n  LINEAR_MIPMAP_NEAREST = 0x2701,\n  NEAREST_MIPMAP_LINEAR = 0x2702,\n  LINEAR_MIPMAP_LINEAR = 0x2703,\n  /** The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either GL_NEAREST or GL_LINEAR (see below). GL_NEAREST is generally faster than GL_LINEAR, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. Default: GL_LINEAR.  */\n  TEXTURE_MAG_FILTER = 0x2800,\n  /** The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps. Default: GL_NEAREST_MIPMAP_LINEAR */\n  TEXTURE_MIN_FILTER = 0x2801,\n  /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */\n  TEXTURE_WRAP_S = 0x2802,\n  /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */\n  TEXTURE_WRAP_T = 0x2803,\n  TEXTURE_2D = 0x0de1,\n  TEXTURE = 0x1702,\n  TEXTURE_CUBE_MAP = 0x8513,\n  TEXTURE_BINDING_CUBE_MAP = 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE = 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0 = 0x84c0,\n  ACTIVE_TEXTURE = 0x84e0,\n  REPEAT = 0x2901,\n  CLAMP_TO_EDGE = 0x812f,\n  MIRRORED_REPEAT = 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH = 0x1000,\n  TEXTURE_HEIGHT = 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2 = 0x8b50,\n  FLOAT_VEC3 = 0x8b51,\n  FLOAT_VEC4 = 0x8b52,\n  INT_VEC2 = 0x8b53,\n  INT_VEC3 = 0x8b54,\n  INT_VEC4 = 0x8b55,\n  BOOL = 0x8b56,\n  BOOL_VEC2 = 0x8b57,\n  BOOL_VEC3 = 0x8b58,\n  BOOL_VEC4 = 0x8b59,\n  FLOAT_MAT2 = 0x8b5a,\n  FLOAT_MAT3 = 0x8b5b,\n  FLOAT_MAT4 = 0x8b5c,\n  SAMPLER_2D = 0x8b5e,\n  SAMPLER_CUBE = 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT = 0x8df0,\n  MEDIUM_FLOAT = 0x8df1,\n  HIGH_FLOAT = 0x8df2,\n  LOW_INT = 0x8df3,\n  MEDIUM_INT = 0x8df4,\n  HIGH_INT = 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER = 0x8d40,\n  RENDERBUFFER = 0x8d41,\n  RGBA4 = 0x8056,\n  RGB5_A1 = 0x8057,\n  RGB565 = 0x8d62,\n  DEPTH_COMPONENT16 = 0x81a5,\n  STENCIL_INDEX = 0x1901,\n  STENCIL_INDEX8 = 0x8d48,\n  DEPTH_STENCIL = 0x84f9,\n  RENDERBUFFER_WIDTH = 0x8d42,\n  RENDERBUFFER_HEIGHT = 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT = 0x8d44,\n  RENDERBUFFER_RED_SIZE = 0x8d50,\n  RENDERBUFFER_GREEN_SIZE = 0x8d51,\n  RENDERBUFFER_BLUE_SIZE = 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE = 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE = 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE = 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8cd3,\n  COLOR_ATTACHMENT0 = 0x8ce0,\n  DEPTH_ATTACHMENT = 0x8d00,\n  STENCIL_ATTACHMENT = 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT = 0x821a,\n  NONE = 0,\n  FRAMEBUFFER_COMPLETE = 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED = 0x8cdd,\n  FRAMEBUFFER_BINDING = 0x8ca6,\n  RENDERBUFFER_BINDING = 0x8ca7,\n  READ_FRAMEBUFFER = 0x8ca8,\n  DRAW_FRAMEBUFFER = 0x8ca9,\n  MAX_RENDERBUFFER_SIZE = 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION = 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL = 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243,\n\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER = 0x0c02,\n  UNPACK_ROW_LENGTH = 0x0cf2,\n  UNPACK_SKIP_ROWS = 0x0cf3,\n  UNPACK_SKIP_PIXELS = 0x0cf4,\n  PACK_ROW_LENGTH = 0x0d02,\n  PACK_SKIP_ROWS = 0x0d03,\n  PACK_SKIP_PIXELS = 0x0d04,\n  TEXTURE_BINDING_3D = 0x806a,\n  UNPACK_SKIP_IMAGES = 0x806d,\n  UNPACK_IMAGE_HEIGHT = 0x806e,\n  MAX_3D_TEXTURE_SIZE = 0x8073,\n  MAX_ELEMENTS_VERTICES = 0x80e8,\n  MAX_ELEMENTS_INDICES = 0x80e9,\n  MAX_TEXTURE_LOD_BIAS = 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS = 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS = 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET = 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET = 0x8905,\n  MAX_VARYING_COMPONENTS = 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b,\n  RASTERIZER_DISCARD = 0x8c89,\n  VERTEX_ARRAY_BINDING = 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT = 0x9111,\n  MAX_ELEMENT_INDEX = 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED = 0x1903,\n  RGB8 = 0x8051,\n  RGBA8 = 0x8058,\n  RGB10_A2 = 0x8059,\n  TEXTURE_3D = 0x806f,\n  /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */\n  TEXTURE_WRAP_R = 0x8072,\n  TEXTURE_MIN_LOD = 0x813a,\n  TEXTURE_MAX_LOD = 0x813b,\n  TEXTURE_BASE_LEVEL = 0x813c,\n  TEXTURE_MAX_LEVEL = 0x813d,\n  TEXTURE_COMPARE_MODE = 0x884c,\n  TEXTURE_COMPARE_FUNC = 0x884d,\n  SRGB = 0x8c40,\n  SRGB8 = 0x8c41,\n  SRGB8_ALPHA8 = 0x8c43,\n  COMPARE_REF_TO_TEXTURE = 0x884e,\n  RGBA32F = 0x8814,\n  RGB32F = 0x8815,\n  RGBA16F = 0x881a,\n  RGB16F = 0x881b,\n  TEXTURE_2D_ARRAY = 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY = 0x8c1d,\n  R11F_G11F_B10F = 0x8c3a,\n  RGB9_E5 = 0x8c3d,\n  RGBA32UI = 0x8d70,\n  RGB32UI = 0x8d71,\n  RGBA16UI = 0x8d76,\n  RGB16UI = 0x8d77,\n  RGBA8UI = 0x8d7c,\n  RGB8UI = 0x8d7d,\n  RGBA32I = 0x8d82,\n  RGB32I = 0x8d83,\n  RGBA16I = 0x8d88,\n  RGB16I = 0x8d89,\n  RGBA8I = 0x8d8e,\n  RGB8I = 0x8d8f,\n  RED_INTEGER = 0x8d94,\n  RGB_INTEGER = 0x8d98,\n  RGBA_INTEGER = 0x8d99,\n  R8 = 0x8229,\n  RG8 = 0x822b,\n  R16F = 0x822d,\n  R32F = 0x822e,\n  RG16F = 0x822f,\n  RG32F = 0x8230,\n  R8I = 0x8231,\n  R8UI = 0x8232,\n  R16I = 0x8233,\n  R16UI = 0x8234,\n  R32I = 0x8235,\n  R32UI = 0x8236,\n  RG8I = 0x8237,\n  RG8UI = 0x8238,\n  RG16I = 0x8239,\n  RG16UI = 0x823a,\n  RG32I = 0x823b,\n  RG32UI = 0x823c,\n  R8_SNORM = 0x8f94,\n  RG8_SNORM = 0x8f95,\n  RGB8_SNORM = 0x8f96,\n  RGBA8_SNORM = 0x8f97,\n  RGB10_A2UI = 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC  = 0x9270,\n  COMPRESSED_SIGNED_R11_EAC = 0x9271,\n  COMPRESSED_RG11_EAC = 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC  = 0x9273,\n  COMPRESSED_RGB8_ETC2  = 0x9274,\n  COMPRESSED_SRGB8_ETC2 = 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2  = 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC  = 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC  = 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT = 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS = 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV = 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV = 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV = 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8dad,\n  UNSIGNED_INT_24_8 = 0x84fa,\n  HALF_FLOAT = 0x140b,\n  RG = 0x8227,\n  RG_INTEGER = 0x8228,\n  INT_2_10_10_10_REV = 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY = 0x8865,\n  /** Returns a GLuint containing the query result. */\n  QUERY_RESULT = 0x8866,\n  /** Whether query result is available. */\n  QUERY_RESULT_AVAILABLE = 0x8867,\n  /** Occlusion query (if drawing passed depth test)  */\n  ANY_SAMPLES_PASSED = 0x8c2f,\n  /** Occlusion query less accurate/faster version */\n  ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS = 0x8824,\n  DRAW_BUFFER0 = 0x8825,\n  DRAW_BUFFER1 = 0x8826,\n  DRAW_BUFFER2 = 0x8827,\n  DRAW_BUFFER3 = 0x8828,\n  DRAW_BUFFER4 = 0x8829,\n  DRAW_BUFFER5 = 0x882a,\n  DRAW_BUFFER6 = 0x882b,\n  DRAW_BUFFER7 = 0x882c,\n  DRAW_BUFFER8 = 0x882d,\n  DRAW_BUFFER9 = 0x882e,\n  DRAW_BUFFER10 = 0x882f,\n  DRAW_BUFFER11 = 0x8830,\n  DRAW_BUFFER12 = 0x8831,\n  DRAW_BUFFER13 = 0x8832,\n  DRAW_BUFFER14 = 0x8833,\n  DRAW_BUFFER15 = 0x8834,\n  MAX_COLOR_ATTACHMENTS = 0x8cdf,\n  COLOR_ATTACHMENT1 = 0x8ce1,\n  COLOR_ATTACHMENT2 = 0x8ce2,\n  COLOR_ATTACHMENT3 = 0x8ce3,\n  COLOR_ATTACHMENT4 = 0x8ce4,\n  COLOR_ATTACHMENT5 = 0x8ce5,\n  COLOR_ATTACHMENT6 = 0x8ce6,\n  COLOR_ATTACHMENT7 = 0x8ce7,\n  COLOR_ATTACHMENT8 = 0x8ce8,\n  COLOR_ATTACHMENT9 = 0x8ce9,\n  COLOR_ATTACHMENT10 = 0x8cea,\n  COLOR_ATTACHMENT11 = 0x8ceb,\n  COLOR_ATTACHMENT12 = 0x8cec,\n  COLOR_ATTACHMENT13 = 0x8ced,\n  COLOR_ATTACHMENT14 = 0x8cee,\n  COLOR_ATTACHMENT15 = 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D = 0x8b5f,\n  SAMPLER_2D_SHADOW = 0x8b62,\n  SAMPLER_2D_ARRAY = 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW = 0x8dc4,\n  SAMPLER_CUBE_SHADOW = 0x8dc5,\n  INT_SAMPLER_2D = 0x8dca,\n  INT_SAMPLER_3D = 0x8dcb,\n  INT_SAMPLER_CUBE = 0x8dcc,\n  INT_SAMPLER_2D_ARRAY = 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D = 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D = 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE = 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8dd7,\n  MAX_SAMPLES = 0x8d57,\n  SAMPLER_BINDING = 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER = 0x88eb,\n  PIXEL_UNPACK_BUFFER = 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING = 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING = 0x88ef,\n  COPY_READ_BUFFER = 0x8f36,\n  COPY_WRITE_BUFFER = 0x8f37,\n  COPY_READ_BUFFER_BINDING = 0x8f36,\n  COPY_WRITE_BUFFER_BINDING = 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3 = 0x8b65,\n  FLOAT_MAT2x4 = 0x8b66,\n  FLOAT_MAT3x2 = 0x8b67,\n  FLOAT_MAT3x4 = 0x8b68,\n  FLOAT_MAT4x2 = 0x8b69,\n  FLOAT_MAT4x3 = 0x8b6a,\n  UNSIGNED_INT_VEC2 = 0x8dc6,\n  UNSIGNED_INT_VEC3 = 0x8dc7,\n  UNSIGNED_INT_VEC4 = 0x8dc8,\n  UNSIGNED_NORMALIZED = 0x8c17,\n  SIGNED_NORMALIZED = 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER = 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS = 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START = 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8c8b,\n  INTERLEAVED_ATTRIBS = 0x8c8c,\n  SEPARATE_ATTRIBS = 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER = 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8c8f,\n  TRANSFORM_FEEDBACK = 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED = 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE = 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING = 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,\n  FRAMEBUFFER_DEFAULT = 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT  = 0x821A,\n  // DEPTH_STENCIL = 0x84F9,\n  DEPTH24_STENCIL8 = 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING = 0x8ca6,\n  READ_FRAMEBUFFER_BINDING = 0x8caa,\n  RENDERBUFFER_SAMPLES = 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER = 0x8a11,\n  UNIFORM_BUFFER_BINDING = 0x8a28,\n  UNIFORM_BUFFER_START = 0x8a29,\n  UNIFORM_BUFFER_SIZE = 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS = 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS = 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS = 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE = 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS = 0x8a36,\n  UNIFORM_TYPE = 0x8a37,\n  UNIFORM_SIZE = 0x8a38,\n  UNIFORM_BLOCK_INDEX = 0x8a3a,\n  UNIFORM_OFFSET = 0x8a3b,\n  UNIFORM_ARRAY_STRIDE = 0x8a3c,\n  UNIFORM_MATRIX_STRIDE = 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR = 0x8a3e,\n  UNIFORM_BLOCK_BINDING = 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE = 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE = 0x9112,\n  SYNC_CONDITION = 0x9113,\n  SYNC_STATUS = 0x9114,\n  SYNC_FLAGS = 0x9115,\n  SYNC_FENCE = 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE = 0x9117,\n  UNSIGNALED = 0x9118,\n  SIGNALED = 0x9119,\n  ALREADY_SIGNALED = 0x911a,\n  TIMEOUT_EXPIRED = 0x911b,\n  CONDITION_SATISFIED = 0x911c,\n  WAIT_FAILED = 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT = 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR = 0x1800,\n  DEPTH = 0x1801,\n  STENCIL = 0x1802,\n  MIN = 0x8007,\n  MAX = 0x8008,\n  DEPTH_COMPONENT24 = 0x81a6,\n  STREAM_READ = 0x88e1,\n  STREAM_COPY = 0x88e2,\n  STATIC_READ = 0x88e5,\n  STATIC_COPY = 0x88e6,\n  DYNAMIC_READ = 0x88e9,\n  DYNAMIC_COPY = 0x88ea,\n  DEPTH_COMPONENT32F = 0x8cac,\n  DEPTH32F_STENCIL8 = 0x8cad,\n  INVALID_INDEX = 0xffffffff,\n  TIMEOUT_IGNORED = -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // WEBGL_debug_renderer_info\n\n  /** Passed to getParameter to get the vendor string of the graphics driver. */\n  UNMASKED_VENDOR_WEBGL = 0x9245,\n  /** Passed to getParameter to get the renderer string of the graphics driver. */\n  UNMASKED_RENDERER_WEBGL = 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  /** Returns the maximum available anisotropy. */\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff,\n  /** Passed to texParameter to set the desired maximum anisotropy for a texture. */\n  TEXTURE_MAX_ANISOTROPY_EXT = 0x84fe,\n\n  // EXT_texture_norm16 - https://khronos.org/registry/webgl/extensions/EXT_texture_norm16/\n\n  R16_EXT = 0x822a,\n  RG16_EXT = 0x822c,\n  RGB16_EXT = 0x8054,\n  RGBA16_EXT = 0x805b,\n  R16_SNORM_EXT = 0x8f98,\n  RG16_SNORM_EXT = 0x8f99,\n  RGB16_SNORM_EXT = 0x8f9a,\n  RGBA16_SNORM_EXT = 0x8f9b,\n\n  // WEBGL_compressed_texture_s3tc (BC1, BC2, BC3)\n\n  /** A DXT1-compressed image in an RGB image format. */\n  COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83f0,\n  /** A DXT1-compressed image in an RGB image format with a simple on/off alpha value. */\n  COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83f1,\n  /** A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression. */\n  COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83f2,\n  /** A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done. */\n  COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83f3,\n\n  // WEBGL_compressed_texture_s3tc_srgb (BC1, BC2, BC3 -  SRGB)\n\n  COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8c4c,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8c4d,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8c4e,\n  COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8c4f,\n\n  // WEBGL_compressed_texture_rgtc (BC4, BC5)\n\n  COMPRESSED_RED_RGTC1_EXT = 0x8dbb,\n  COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8dbc,\n  COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8dbd,\n  COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8dbe,\n\n  // WEBGL_compressed_texture_bptc (BC6, BC7)\n\n  COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8e8c,\n  COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8e8d,\n  COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8e8e,\n  COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8e8f,\n\n  // WEBGL_compressed_texture_es3\n\n  /** One-channel (red) unsigned format compression. */\n  COMPRESSED_R11_EAC = 0x9270,\n  /** One-channel (red) signed format compression. */\n  COMPRESSED_SIGNED_R11_EAC = 0x9271,\n  /** Two-channel (red and green) unsigned format compression. */\n  COMPRESSED_RG11_EAC = 0x9272,\n  /** Two-channel (red and green) signed format compression. */\n  COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n  /** Compresses RGB8 data with no alpha channel. */\n  COMPRESSED_RGB8_ETC2 = 0x9274,\n  /** Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately. */\n  COMPRESSED_RGBA8_ETC2_EAC = 0x9275,\n  /** Compresses sRGB8 data with no alpha channel. */\n  COMPRESSED_SRGB8_ETC2 = 0x9276,\n  /** Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately. */\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9277,\n  /** Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9278,\n  /** Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  /** RGB compression in 4-bit mode. One block for each 4×4 pixels. */\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8c00,\n  /** RGBA compression in 4-bit mode. One block for each 4×4 pixels. */\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8c02,\n  /** RGB compression in 2-bit mode. One block for each 8×4 pixels. */\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8c01,\n  /** RGBA compression in 2-bit mode. One block for each 8×4 pixels. */\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  /** Compresses 24-bit RGB data with no alpha channel. */\n  COMPRESSED_RGB_ETC1_WEBGL = 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL = 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87ee,\n\n  // WEBGL_compressed_texture_astc\n\n  COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93b0,\n  COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93b1,\n  COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93b2,\n  COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93b3,\n  COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93b4,\n  COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93b5,\n  COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93b6,\n  COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93b7,\n  COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93b8,\n  COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93b9,\n  COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93ba,\n  COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93bb,\n  COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93bc,\n  COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93bd,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93d0,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93d1,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93d2,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93d3,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93d4,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93d5,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93d6,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93d7,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93d8,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93d9,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93da,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93db,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93dc,\n  COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93dd,\n\n  // EXT_disjoint_timer_query\n\n  /** The number of bits used to hold the query result for the given target. */\n  QUERY_COUNTER_BITS_EXT = 0x8864,\n  /** The currently active query. */\n  CURRENT_QUERY_EXT = 0x8865,\n  /** The query result. */\n  QUERY_RESULT_EXT = 0x8866,\n  /** A Boolean indicating whether or not a query result is available. */\n  QUERY_RESULT_AVAILABLE_EXT = 0x8867,\n  /** Elapsed time (in nanoseconds). */\n  TIME_ELAPSED_EXT = 0x88bf,\n  /** The current time. */\n  TIMESTAMP_EXT = 0x8e28,\n  /** A Boolean indicating whether or not the GPU performed any disjoint operation (lost context) */\n  GPU_DISJOINT_EXT = 0x8fbb,\n\n  // KHR_parallel_shader_compile https://registry.khronos.org/webgl/extensions/KHR_parallel_shader_compile\n\n  /** a non-blocking poll operation, so that compile/link status availability can be queried without potentially incurring stalls */\n  COMPLETION_STATUS_KHR = 0x91b1,\n\n  // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/\n\n  /** Disables depth clipping */\n  DEPTH_CLAMP_EXT = 0x864f,\n\n  // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/\n\n  /** Values of first vertex in primitive are used for flat shading */\n  FIRST_VERTEX_CONVENTION_WEBGL = 0x8e4d,\n  /** Values of first vertex in primitive are used for flat shading */\n  LAST_VERTEX_CONVENTION_WEBGL = 0x8e4e, // default\n  /** Controls which vertex in primitive is used for flat shading */\n  PROVOKING_VERTEX_WEBL = 0x8e4f,\n\n  // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/\n\n  POLYGON_MODE_WEBGL = 0x0b40,\n  POLYGON_OFFSET_LINE_WEBGL = 0x2a02,\n  LINE_WEBGL = 0x1b01,\n  FILL_WEBGL = 0x1b02,\n\n  // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/\n\n  /** Max clip distances */\n  MAX_CLIP_DISTANCES_WEBGL = 0x0d32,\n  /** Max cull distances */\n  MAX_CULL_DISTANCES_WEBGL = 0x82f9,\n  /** Max clip and cull distances */\n  MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL = 0x82fa,\n\n  /** Enable gl_ClipDistance[0] and gl_CullDistance[0] */\n  CLIP_DISTANCE0_WEBGL = 0x3000,\n  /** Enable gl_ClipDistance[1] and gl_CullDistance[1] */\n  CLIP_DISTANCE1_WEBGL = 0x3001,\n  /** Enable gl_ClipDistance[2] and gl_CullDistance[2] */\n  CLIP_DISTANCE2_WEBGL = 0x3002,\n  /** Enable gl_ClipDistance[3] and gl_CullDistance[3] */\n  CLIP_DISTANCE3_WEBGL = 0x3003,\n  /** Enable gl_ClipDistance[4] and gl_CullDistance[4] */\n  CLIP_DISTANCE4_WEBGL = 0x3004,\n  /** Enable gl_ClipDistance[5] and gl_CullDistance[5] */\n  CLIP_DISTANCE5_WEBGL = 0x3005,\n  /** Enable gl_ClipDistance[6] and gl_CullDistance[6] */\n  CLIP_DISTANCE6_WEBGL = 0x3006,\n  /** Enable gl_ClipDistance[7] and gl_CullDistance[7] */\n  CLIP_DISTANCE7_WEBGL = 0x3007,\n\n  /** EXT_polygon_offset_clamp https://registry.khronos.org/webgl/extensions/EXT_polygon_offset_clamp/ */\n  POLYGON_OFFSET_CLAMP_EXT = 0x8e1b,\n\n  /** EXT_clip_control https://registry.khronos.org/webgl/extensions/EXT_clip_control/ */\n  LOWER_LEFT_EXT = 0x8ca1,\n  UPPER_LEFT_EXT = 0x8ca2,\n\n  NEGATIVE_ONE_TO_ONE_EXT = 0x935e,\n  ZERO_TO_ONE_EXT = 0x935f,\n\n  CLIP_ORIGIN_EXT = 0x935c,\n  CLIP_DEPTH_MODE_EXT = 0x935d,\n\n  /** WEBGL_blend_func_extended https://registry.khronos.org/webgl/extensions/WEBGL_blend_func_extended/ */\n  SRC1_COLOR_WEBGL = 0x88f9,\n  SRC1_ALPHA_WEBGL = 0x8589,\n  ONE_MINUS_SRC1_COLOR_WEBGL = 0x88fa,\n  ONE_MINUS_SRC1_ALPHA_WEBGL = 0x88fb,\n  MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL = 0x88fc,\n\n  /** EXT_texture_mirror_clamp_to_edge https://registry.khronos.org/webgl/extensions/EXT_texture_mirror_clamp_to_edge/ */\n  MIRROR_CLAMP_TO_EDGE_EXT = 0x8743\n}\n\nexport {GLEnum as GL};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray} from '@luma.gl/core';\n\n/** deeply compare two arrays */\nexport function deepArrayEqual(\n  x: unknown | unknown[] | TypedArray,\n  y: unknown | unknown[] | TypedArray\n): boolean {\n  if (x === y) {\n    return true;\n  }\n  if (isArray(x) && isArray(y) && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction isArray(x: unknown): x is unknown[] {\n  return Array.isArray(x) || ArrayBuffer.isView(x);\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * ContextProps\n * @param onContextLost\n * @param onContextRestored *\n */\ntype ContextProps = {\n  /** Called when a context is lost */\n  onContextLost: (event: Event) => void;\n  /** Called when a context is restored */\n  onContextRestored: (event: Event) => void;\n};\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n * @param canvas A canvas element or offscreen canvas\n */\nexport function createBrowserContext(\n  canvas: HTMLCanvasElement | OffscreenCanvas,\n  props: ContextProps,\n  webglContextAttributes: WebGLContextAttributes\n): WebGL2RenderingContext {\n  // Try to extract any extra information about why context creation failed\n  let errorMessage = '';\n  // const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);\n\n  // Avoid multiple listeners?\n  // canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n  // canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const webglProps: WebGLContextAttributes = {\n    preserveDrawingBuffer: true,\n    // failIfMajorPerformanceCaveat: true,\n    ...webglContextAttributes\n  };\n\n  // Create the desired context\n  let gl: WebGL2RenderingContext | null = null;\n\n  // Create a webgl2 context\n  gl ||= canvas.getContext('webgl2', webglProps);\n  if (webglProps.failIfMajorPerformanceCaveat) {\n    errorMessage ||=\n      'Only software GPU is available. Set `failIfMajorPerformanceCaveat: false` to allow.';\n  }\n\n  // Creation failed with failIfMajorPerformanceCaveat - Try a Software GPU\n  if (!gl && !webglContextAttributes.failIfMajorPerformanceCaveat) {\n    webglProps.failIfMajorPerformanceCaveat = false;\n    gl = canvas.getContext('webgl2', webglProps);\n    // @ts-expect-error\n    gl.luma ||= {};\n    // @ts-expect-error\n    gl.luma.softwareRenderer = true;\n  }\n\n  if (!gl) {\n    gl = canvas.getContext('webgl', {}) as WebGL2RenderingContext;\n    if (gl) {\n      gl = null;\n      errorMessage ||= 'Your browser only supports WebGL1';\n    }\n  }\n\n  if (!gl) {\n    errorMessage ||= 'Your browser does not support WebGL';\n    throw new Error(`Failed to create WebGL context: ${errorMessage}`);\n  }\n\n  // Carefully extract and wrap callbacks to prevent addEventListener from rebinding them.\n  const {onContextLost, onContextRestored} = props;\n  canvas.addEventListener('webglcontextlost', (event: Event) => onContextLost(event), false);\n  canvas.addEventListener(\n    'webglcontextrestored',\n    (event: Event) => onContextRestored(event),\n    false\n  );\n\n  // @ts-expect-error\n  gl.luma ||= {};\n  return gl;\n}\n\n/* TODO - can we call this asynchronously to catch the error events?\nexport async function createBrowserContextAsync(canvas: HTMLCanvasElement | OffscreenCanvas, props: ContextProps): Promise<WebGL2RenderingContext> {\n  props = {...DEFAULT_CONTEXT_PROPS, ...props};\n\n // Try to extract any extra information about why context creation failed\n let errorMessage = null;\n const onCreateError = (error) => (errorMessage = error.statusMessage || errorMessage);\n canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n const gl = createBrowserContext(canvas, props);\n\n // Give the listener a chance to fire\n await new Promise(resolve => setTimeout(resolve, 0));\n\n canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n return gl;\n}\n*/\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DeviceInfo} from '@luma.gl/core';\nimport {GL, GLExtensions} from '@luma.gl/constants';\nimport {getWebGLExtension} from '../../context/helpers/webgl-extensions';\n\n/** @returns strings identifying the GPU vendor and driver. */\nexport function getDeviceInfo(gl: WebGL2RenderingContext, extensions: GLExtensions): DeviceInfo {\n  // \"Masked\" info is always available, but don't contain much useful information\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n\n  // If we are lucky, unmasked info is available\n  // https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n  getWebGLExtension(gl, 'WEBGL_debug_renderer_info', extensions);\n  const ext = extensions.WEBGL_debug_renderer_info;\n  const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : GL.VENDOR);\n  const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : GL.RENDERER);\n  const vendor = vendorUnmasked || vendorMasked;\n  const renderer = rendererUnmasked || rendererMasked;\n\n  // Driver version\n  const version = gl.getParameter(GL.VERSION) as string;\n\n  // \"Sniff\" the GPU type and backend from the info. This works best if unmasked info is available.\n  const gpu = identifyGPUVendor(vendor, renderer);\n  const gpuBackend = identifyGPUBackend(vendor, renderer);\n  const gpuType = identifyGPUType(vendor, renderer);\n\n  // Determine GLSL version\n  // For now, skip parsing of the long version string, just use context type below to deduce version\n  // const version = gl.getParameter(GL.SHADING_LANGUAGE_VERSION) as string;\n  // const shadingLanguageVersion = parseGLSLVersion(version);\n  const shadingLanguage = 'glsl';\n  const shadingLanguageVersion = 300;\n\n  return {\n    type: 'webgl',\n    gpu,\n    gpuType,\n    gpuBackend,\n    vendor,\n    renderer,\n    version,\n    shadingLanguage,\n    shadingLanguageVersion\n  };\n}\n\n/** \"Sniff\" the GPU type from the info. This works best if unmasked info is available. */\nfunction identifyGPUVendor(\n  vendor: string,\n  renderer: string\n): 'nvidia' | 'intel' | 'apple' | 'amd' | 'software' | 'unknown' {\n  if (/NVIDIA/i.exec(vendor) || /NVIDIA/i.exec(renderer)) {\n    return 'nvidia';\n  }\n  if (/INTEL/i.exec(vendor) || /INTEL/i.exec(renderer)) {\n    return 'intel';\n  }\n  if (/Apple/i.exec(vendor) || /Apple/i.exec(renderer)) {\n    return 'apple';\n  }\n  if (\n    /AMD/i.exec(vendor) ||\n    /AMD/i.exec(renderer) ||\n    /ATI/i.exec(vendor) ||\n    /ATI/i.exec(renderer)\n  ) {\n    return 'amd';\n  }\n  if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {\n    return 'software';\n  }\n\n  return 'unknown';\n}\n\n/** \"Sniff\" the GPU backend from the info. This works best if unmasked info is available. */\nfunction identifyGPUBackend(vendor: string, renderer: string): 'opengl' | 'metal' | 'unknown' {\n  if (/Metal/i.exec(vendor) || /Metal/i.exec(renderer)) {\n    return 'metal';\n  }\n  if (/ANGLE/i.exec(vendor) || /ANGLE/i.exec(renderer)) {\n    return 'opengl';\n  }\n  return 'unknown';\n}\n\nfunction identifyGPUType(\n  vendor: string,\n  renderer: string\n): 'discrete' | 'integrated' | 'cpu' | 'unknown' {\n  if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {\n    return 'cpu';\n  }\n\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  switch (gpuVendor) {\n    case 'intel':\n      return 'integrated';\n    case 'software':\n      return 'cpu';\n    case 'unknown':\n      return 'unknown';\n    default:\n      return 'discrete';\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GLExtensions} from '@luma.gl/constants';\n\n/** Ensure extensions are only requested once */\nexport function getWebGLExtension(\n  gl: WebGL2RenderingContext,\n  name: string,\n  extensions: GLExtensions\n): unknown {\n  // @ts-ignore TODO\n  if (extensions[name] === undefined) {\n    // @ts-ignore TODO\n    extensions[name] = gl.getExtension(name) || null;\n  }\n  // @ts-ignore TODO\n  return extensions[name];\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Feature detection for WebGL\n// Provides a function that enables simple checking of which WebGL features are\n\nimport {DeviceFeature, DeviceFeatures} from '@luma.gl/core';\nimport {GLExtensions} from '@luma.gl/constants';\nimport {getWebGLExtension} from '../../context/helpers/webgl-extensions';\nimport {\n  isTextureFeature,\n  checkTextureFeature,\n  TEXTURE_FEATURES\n} from '../converters/webgl-texture-table';\n\n/**\n * Defines luma.gl \"feature\" names and semantics\n * when value is 'string' it is the name of the extension that enables this feature\n */\nconst WEBGL_FEATURES: Partial<Record<DeviceFeature, boolean | string>> = {\n  // optional WebGPU features\n  'depth-clip-control': 'EXT_depth_clamp', // TODO these seem subtly different\n  // 'timestamp-query' // GPUQueryType \"timestamp-query\"\n  // \"indirect-first-instance\"\n  // Textures are handled by getTextureFeatures()\n  // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'\n\n  // optional WebGL features\n  'timer-query-webgl': 'EXT_disjoint_timer_query_webgl2',\n  'compilation-status-async-webgl': 'KHR_parallel_shader_compile',\n  'polygon-mode-webgl': 'WEBGL_polygon_mode',\n  'provoking-vertex-webgl': 'WEBGL_provoking_vertex',\n  'shader-clip-cull-distance-webgl': 'WEBGL_clip_cull_distance',\n  'shader-noperspective-interpolation-webgl': 'NV_shader_noperspective_interpolation',\n  'shader-conservative-depth-webgl': 'EXT_conservative_depth'\n\n  // Textures are handled by getTextureFeatures()\n};\n\n/**\n * WebGL extensions exposed as luma.gl features\n * To minimize GL log noise and improve performance, this class ensures that\n * - WebGL extensions are not queried until the corresponding feature is checked.\n * - WebGL extensions are only queried once.\n */\nexport class WebGLDeviceFeatures extends DeviceFeatures {\n  protected gl: WebGL2RenderingContext;\n  protected extensions: GLExtensions;\n  protected testedFeatures = new Set<DeviceFeature>();\n\n  constructor(\n    gl: WebGL2RenderingContext,\n    extensions: GLExtensions,\n    disabledFeatures: Partial<Record<DeviceFeature, boolean>>\n  ) {\n    super([], disabledFeatures);\n    this.gl = gl;\n    this.extensions = extensions;\n    // TODO - is this really needed?\n    // Enable EXT_float_blend first: https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend\n    getWebGLExtension(gl, 'EXT_color_buffer_float', extensions);\n  }\n\n  override *[Symbol.iterator](): IterableIterator<DeviceFeature> {\n    const features = this.getFeatures();\n    for (const feature of features) {\n      if (this.has(feature)) {\n        yield feature;\n      }\n    }\n    return [];\n  }\n\n  override has(feature: DeviceFeature): boolean {\n    if (this.disabledFeatures?.[feature]) {\n      return false;\n    }\n\n    // We have already tested this feature\n    if (!this.testedFeatures.has(feature)) {\n      this.testedFeatures.add(feature);\n\n      // Check the feature once\n      if (isTextureFeature(feature) && checkTextureFeature(this.gl, feature, this.extensions)) {\n        this.features.add(feature);\n      }\n\n      if (this.getWebGLFeature(feature)) {\n        this.features.add(feature);\n      }\n    }\n    return this.features.has(feature);\n  }\n\n  // FOR DEVICE\n\n  initializeFeatures() {\n    // Initialize all features by checking them.\n    // Except WEBGL_polygon_mode since Chrome logs ugly console warnings\n    const features = this.getFeatures().filter(feature => feature !== 'polygon-mode-webgl');\n    for (const feature of features) {\n      this.has(feature);\n    }\n  }\n\n  // IMPLEMENTATION\n\n  getFeatures() {\n    return [...Object.keys(WEBGL_FEATURES), ...Object.keys(TEXTURE_FEATURES)] as DeviceFeature[];\n  }\n\n  /** Extract all WebGL features */\n  protected getWebGLFeature(feature: DeviceFeature): boolean {\n    const featureInfo = WEBGL_FEATURES[feature];\n    // string value requires checking the corresponding WebGL extension\n    const isSupported =\n      typeof featureInfo === 'string'\n        ? Boolean(getWebGLExtension(this.gl, featureInfo, this.extensions))\n        : Boolean(featureInfo);\n\n    return isSupported;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  DeviceFeature,\n  TextureFormat,\n  TextureFormatCapabilities,\n  DeviceTextureFormatCapabilities\n} from '@luma.gl/core';\nimport {textureFormatDecoder} from '@luma.gl/core';\nimport {GL, GLPixelType, GLExtensions, GLTexelDataFormat} from '@luma.gl/constants';\nimport {getWebGLExtension} from '../../context/helpers/webgl-extensions';\nimport {getGLFromVertexType} from './webgl-vertex-formats';\n\n/* eslint-disable camelcase */\n\n// TEXTURE FEATURES\n\n// Define local webgl extension strings to optimize minification\nconst X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3\nconst X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3\nconst X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5\nconst X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7\nconst X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'\nconst X_ASTC = 'WEBGL_compressed_texture_astc';\nconst X_ETC1 = 'WEBGL_compressed_texture_etc1';\nconst X_PVRTC = 'WEBGL_compressed_texture_pvrtc';\nconst X_ATC = 'WEBGL_compressed_texture_atc';\n\n// Define local webgl extension strings to optimize minification\nconst EXT_texture_norm16 = 'EXT_texture_norm16';\nconst EXT_render_snorm = 'EXT_render_snorm';\nconst EXT_color_buffer_float = 'EXT_color_buffer_float';\n\n// prettier-ignore\nexport const TEXTURE_FEATURES: Partial<Record<DeviceFeature, string[]>> = {\n  'float32-renderable-webgl': ['EXT_color_buffer_float'],\n  'float16-renderable-webgl': ['EXT_color_buffer_half_float'],\n  'rgb9e5ufloat-renderable-webgl': ['WEBGL_render_shared_exponent'],\n  'snorm8-renderable-webgl': [EXT_render_snorm],\n  'norm16-renderable-webgl': [EXT_texture_norm16],\n  'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],\n\n  'float32-filterable': ['OES_texture_float_linear'],\n  'float16-filterable-webgl': ['OES_texture_half_float_linear'],\n  'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],\n\n  'texture-blend-float-webgl': ['EXT_float_blend'],\n\n  'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],\n  // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],\n  // 'texture-compression-bc3-webgl': [X_S3TC],\n  'texture-compression-bc5-webgl': [X_RGTC],\n  'texture-compression-bc7-webgl': [X_BPTC],\n  'texture-compression-etc2': [X_ETC2],\n  'texture-compression-astc': [X_ASTC],\n  'texture-compression-etc1-webgl': [X_ETC1],\n  'texture-compression-pvrtc-webgl': [X_PVRTC],\n  'texture-compression-atc-webgl': [X_ATC]\n};\n\nexport function isTextureFeature(feature: DeviceFeature): boolean {\n  return feature in TEXTURE_FEATURES;\n}\n\n/** Checks a texture feature (for Device.features). Mainly compressed texture support */\nexport function checkTextureFeature(\n  gl: WebGL2RenderingContext,\n  feature: DeviceFeature,\n  extensions: GLExtensions\n): boolean {\n  const textureExtensions = TEXTURE_FEATURES[feature] || [];\n  return textureExtensions.every(extension => getWebGLExtension(gl, extension, extensions));\n}\n\n// TEXTURE FORMATS\n\n/** Map a format to webgl and constants */\ntype WebGLFormatInfo = {\n  gl?: GL;\n  /** compressed */\n  x?: string;\n  types?: GLPixelType[];\n  dataFormat?: GLTexelDataFormat;\n  /** if depthTexture is set this is a depth/stencil format that can be set to a texture  */\n  depthTexture?: boolean;\n  /** @deprecated can this format be used with renderbuffers */\n  rb?: boolean;\n};\n\n// TABLES\n\n/**\n * Texture format data -\n * Exported but can change without notice\n */\n// prettier-ignore\nexport const WEBGL_TEXTURE_FORMATS: Record<TextureFormat, WebGLFormatInfo> = {\n  // 8-bit formats\n  'r8unorm': {gl: GL.R8, rb: true},\n  'r8snorm': {gl: GL.R8_SNORM},\n  'r8uint': {gl: GL.R8UI, rb: true},\n  'r8sint': {gl: GL.R8I, rb: true},\n\n  // 16-bit formats\n  'rg8unorm': {gl: GL.RG8, rb: true},\n  'rg8snorm': {gl: GL.RG8_SNORM},\n  'rg8uint': {gl: GL.RG8UI, rb: true},\n  'rg8sint': {gl: GL.RG8I, rb: true},\n\n  'r16uint': {gl: GL.R16UI, rb: true},\n  'r16sint': {gl: GL.R16I, rb: true},\n  'r16float': {gl: GL.R16F, rb: true},\n  'r16unorm': {gl: GL.R16_EXT, rb: true},\n  'r16snorm': {gl: GL.R16_SNORM_EXT},\n\n  // Packed 16-bit formats\n  'rgba4unorm-webgl': {gl: GL.RGBA4, rb: true},\n  'rgb565unorm-webgl': {gl: GL.RGB565, rb: true},\n  'rgb5a1unorm-webgl': {gl: GL.RGB5_A1, rb: true},\n\n  // 24-bit formats\n  'rgb8unorm-webgl': {gl: GL.RGB8},\n  'rgb8snorm-webgl': {gl: GL.RGB8_SNORM},\n\n  // 32-bit formats\n  'rgba8unorm': {gl: GL.RGBA8},\n  'rgba8unorm-srgb': {gl: GL.SRGB8_ALPHA8},\n  'rgba8snorm': {gl: GL.RGBA8_SNORM},\n  'rgba8uint': {gl: GL.RGBA8UI},\n  'rgba8sint': {gl: GL.RGBA8I},\n  // reverse colors, webgpu only\n  'bgra8unorm': {},\n  'bgra8unorm-srgb': {},\n\n  'rg16uint': {gl: GL.RG16UI},\n  'rg16sint': {gl: GL.RG16I},\n  'rg16float': {gl: GL.RG16F, rb: true},\n  'rg16unorm': {gl: GL.RG16_EXT},\n  'rg16snorm': {gl: GL.RG16_SNORM_EXT},\n\n  'r32uint': {gl: GL.R32UI, rb: true},\n  'r32sint': {gl: GL.R32I, rb: true},\n  'r32float': {gl: GL.R32F},\n\n  // Packed 32-bit formats\n  'rgb9e5ufloat': {gl: GL.RGB9_E5}, // , filter: true},\n  'rg11b10ufloat': {gl: GL.R11F_G11F_B10F, rb: true},\n  'rgb10a2unorm': {gl: GL.RGB10_A2, rb: true},\n  'rgb10a2uint': {gl: GL.RGB10_A2UI, rb: true},\n\n  // 48-bit formats\n  'rgb16unorm-webgl': {gl: GL.RGB16_EXT}, // rgb not renderable\n  'rgb16snorm-webgl': {gl: GL.RGB16_SNORM_EXT}, // rgb not renderable\n\n  // 64-bit formats\n  'rg32uint': {gl: GL.RG32UI, rb: true},\n  'rg32sint': {gl: GL.RG32I, rb: true},\n  'rg32float': {gl: GL.RG32F, rb: true},\n  'rgba16uint': {gl: GL.RGBA16UI, rb: true},\n  'rgba16sint': {gl: GL.RGBA16I, rb: true},\n  'rgba16float': {gl: GL.RGBA16F},\n  'rgba16unorm': {gl: GL.RGBA16_EXT, rb: true},\n  'rgba16snorm': {gl: GL.RGBA16_SNORM_EXT},\n\n  // 96-bit formats (deprecated!)\n  'rgb32float-webgl': {gl: GL.RGB32F, x: EXT_color_buffer_float, dataFormat: GL.RGB, types: [GL.FLOAT]},\n\n  // 128-bit formats\n  'rgba32uint': {gl: GL.RGBA32UI, rb: true},\n  'rgba32sint': {gl: GL.RGBA32I, rb: true},\n  'rgba32float': {gl: GL.RGBA32F, rb: true},\n\n  // Depth and stencil formats\n  'stencil8': {gl: GL.STENCIL_INDEX8, rb: true}, // 8 stencil bits\n\n  'depth16unorm': {gl: GL.DEPTH_COMPONENT16, dataFormat: GL.DEPTH_COMPONENT, types: [GL.UNSIGNED_SHORT], rb: true}, // 16 depth bits\n  'depth24plus': {gl: GL.DEPTH_COMPONENT24, dataFormat: GL.DEPTH_COMPONENT, types: [GL.UNSIGNED_INT]},\n  'depth32float': {gl: GL.DEPTH_COMPONENT32F, dataFormat: GL.DEPTH_COMPONENT, types: [GL.FLOAT], rb: true},\n\n  // The depth component of the \"depth24plus\" and \"depth24plus-stencil8\" formats may be implemented as either a 24-bit depth value or a \"depth32float\" value.\n  'depth24plus-stencil8': {gl: GL.DEPTH24_STENCIL8, rb: true, depthTexture: true, dataFormat: GL.DEPTH_STENCIL, types: [GL.UNSIGNED_INT_24_8]},\n  // \"depth32float-stencil8\" feature - TODO below is render buffer only?\n  'depth32float-stencil8': {gl: GL.DEPTH32F_STENCIL8, dataFormat: GL.DEPTH_STENCIL, types: [GL.FLOAT_32_UNSIGNED_INT_24_8_REV], rb: true},\n\n  // BC compressed formats: check device.features.has(\"texture-compression-bc\");\n\n  'bc1-rgb-unorm-webgl': {gl: GL.COMPRESSED_RGB_S3TC_DXT1_EXT, x: X_S3TC},\n  'bc1-rgb-unorm-srgb-webgl': {gl: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT, x: X_S3TC_SRGB},\n\n  'bc1-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT1_EXT, x: X_S3TC},\n  'bc1-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT, x: X_S3TC_SRGB},\n  'bc2-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT3_EXT, x: X_S3TC},\n  'bc2-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, x: X_S3TC_SRGB},\n  'bc3-rgba-unorm': {gl: GL.COMPRESSED_RGBA_S3TC_DXT5_EXT, x: X_S3TC},\n  'bc3-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, x: X_S3TC_SRGB},\n  'bc4-r-unorm': {gl: GL.COMPRESSED_RED_RGTC1_EXT, x: X_RGTC},\n  'bc4-r-snorm': {gl: GL.COMPRESSED_SIGNED_RED_RGTC1_EXT, x: X_RGTC},\n  'bc5-rg-unorm': {gl: GL.COMPRESSED_RED_GREEN_RGTC2_EXT, x: X_RGTC},\n  'bc5-rg-snorm': {gl: GL.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT, x: X_RGTC},\n  'bc6h-rgb-ufloat': {gl: GL.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT, x: X_BPTC},\n  'bc6h-rgb-float': {gl: GL.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT, x: X_BPTC},\n  'bc7-rgba-unorm': {gl: GL.COMPRESSED_RGBA_BPTC_UNORM_EXT, x: X_BPTC},\n  'bc7-rgba-unorm-srgb': {gl: GL.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT, x: X_BPTC},\n\n  // WEBGL_compressed_texture_etc: device.features.has(\"texture-compression-etc2\")\n  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression\n\n  'etc2-rgb8unorm': {gl: GL.COMPRESSED_RGB8_ETC2},\n  'etc2-rgb8unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ETC2},\n  'etc2-rgb8a1unorm': {gl: GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2},\n  'etc2-rgb8a1unorm-srgb': {gl: GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2},\n  'etc2-rgba8unorm': {gl: GL.COMPRESSED_RGBA8_ETC2_EAC},\n  'etc2-rgba8unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC},\n\n  'eac-r11unorm': {gl: GL.COMPRESSED_R11_EAC},\n  'eac-r11snorm': {gl: GL.COMPRESSED_SIGNED_R11_EAC},\n  'eac-rg11unorm': {gl: GL.COMPRESSED_RG11_EAC},\n  'eac-rg11snorm': {gl: GL.COMPRESSED_SIGNED_RG11_EAC},\n\n  // X_ASTC compressed formats: device.features.has(\"texture-compression-astc\")\n\n  'astc-4x4-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_4x4_KHR},\n  'astc-4x4-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR},\n  'astc-5x4-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_5x4_KHR},\n  'astc-5x4-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR},\n  'astc-5x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_5x5_KHR},\n  'astc-5x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR},\n  'astc-6x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_6x5_KHR},\n  'astc-6x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR},\n  'astc-6x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_6x6_KHR},\n  'astc-6x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR},\n  'astc-8x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x5_KHR},\n  'astc-8x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR},\n  'astc-8x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x6_KHR},\n  'astc-8x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR},\n  'astc-8x8-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_8x8_KHR},\n  'astc-8x8-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR},\n  'astc-10x5-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x10_KHR},\n  'astc-10x5-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR},\n  'astc-10x6-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x6_KHR},\n  'astc-10x6-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR},\n  'astc-10x8-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x8_KHR},\n  'astc-10x8-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR},\n  'astc-10x10-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_10x10_KHR},\n  'astc-10x10-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR},\n  'astc-12x10-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_12x10_KHR},\n  'astc-12x10-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR},\n  'astc-12x12-unorm': {gl: GL.COMPRESSED_RGBA_ASTC_12x12_KHR},\n  'astc-12x12-unorm-srgb': {gl: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR},\n\n  // WEBGL_compressed_texture_pvrtc\n\n  'pvrtc-rgb4unorm-webgl': {gl: GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG},\n  'pvrtc-rgba4unorm-webgl': {gl: GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG},\n  'pvrtc-rbg2unorm-webgl': {gl: GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG},\n  'pvrtc-rgba2unorm-webgl': {gl: GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG},\n\n  // WEBGL_compressed_texture_etc1\n\n  'etc1-rbg-unorm-webgl': {gl: GL.COMPRESSED_RGB_ETC1_WEBGL},\n\n  // WEBGL_compressed_texture_atc\n\n  'atc-rgb-unorm-webgl': {gl: GL.COMPRESSED_RGB_ATC_WEBGL},\n  'atc-rgba-unorm-webgl': {gl: GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL},\n  'atc-rgbai-unorm-webgl': {gl: GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL}\n};\n\n// FUNCTIONS\n\n/** Checks if a texture format is supported */\nexport function isWebGLTextureFormatCapabilitiesed(\n  gl: WebGL2RenderingContext,\n  format: TextureFormat,\n  extensions: GLExtensions\n): boolean {\n  const webglTextureInfo = WEBGL_TEXTURE_FORMATS[format];\n  // Check that we have a GL constant\n  if (!webglTextureInfo?.gl) {\n    return false;\n  }\n\n  // Check extensions\n  const extension = webglTextureInfo.x;\n  if (extension) {\n    return Boolean(getWebGLExtension(gl, extension, extensions));\n  }\n  return true;\n}\n\n/** Checks if a texture format is supported, renderable, filterable etc */\nexport function getTextureFormatCapabilitiesWebGL(\n  gl: WebGL2RenderingContext,\n  formatSupport: TextureFormatCapabilities,\n  extensions: GLExtensions\n): DeviceTextureFormatCapabilities {\n  let supported = formatSupport.create;\n  const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];\n\n  // Support Check that we have a GL constant\n  if (webglFormatInfo?.gl === undefined) {\n    supported = false;\n  }\n\n  if (webglFormatInfo?.x) {\n    supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));\n  }\n\n  return {\n    format: formatSupport.format,\n    // @ts-ignore\n    create: supported && formatSupport.create,\n    // @ts-ignore\n    render: supported && formatSupport.render,\n    // @ts-ignore\n    filter: supported && formatSupport.filter,\n    // @ts-ignore\n    blend: supported && formatSupport.blend,\n    // @ts-ignore\n    store: supported && formatSupport.store\n  };\n}\n\n/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */\nexport function getTextureFormatWebGL(format: TextureFormat): {\n  internalFormat: GL;\n  format: GLTexelDataFormat;\n  type: GLPixelType;\n  compressed: boolean;\n} {\n  const formatData = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = convertTextureFormatToGL(format);\n  const decoded = textureFormatDecoder.getInfo(format);\n\n  if (decoded.compressed) {\n    // TODO: Unclear whether this is always valid, this may be why ETC2 RGBA8 fails.\n    formatData.dataFormat = webglFormat as GLTexelDataFormat;\n  }\n\n  return {\n    internalFormat: webglFormat,\n    format:\n      formatData?.dataFormat ||\n      getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),\n    // depth formats don't have a type\n    type: decoded.dataType\n      ? getGLFromVertexType(decoded.dataType)\n      : formatData?.types?.[0] || GL.UNSIGNED_BYTE,\n    compressed: decoded.compressed || false\n  };\n}\n\nexport function getDepthStencilAttachmentWebGL(\n  format: TextureFormat\n): GL.DEPTH_ATTACHMENT | GL.STENCIL_ATTACHMENT | GL.DEPTH_STENCIL_ATTACHMENT {\n  const formatInfo = textureFormatDecoder.getInfo(format);\n  switch (formatInfo.attachment) {\n    case 'depth':\n      return GL.DEPTH_ATTACHMENT;\n    case 'stencil':\n      return GL.STENCIL_ATTACHMENT;\n    case 'depth-stencil':\n      return GL.DEPTH_STENCIL_ATTACHMENT;\n    default:\n      throw new Error(`Not a depth stencil format: ${format}`);\n  }\n}\n\n/** TODO - VERY roundabout legacy way of calculating bytes per pixel */\nexport function getTextureFormatBytesPerPixel(format: TextureFormat): number {\n  const formatInfo = textureFormatDecoder.getInfo(format);\n  return formatInfo.bytesPerPixel;\n}\n\n// DATA TYPE HELPERS\n\nexport function getWebGLPixelDataFormat(\n  channels: 'r' | 'rg' | 'rgb' | 'rgba' | 'bgra',\n  integer: boolean,\n  normalized: boolean,\n  format: GL\n): GLTexelDataFormat {\n  // WebGL1 formats use same internalFormat\n  if (format === GL.RGBA || format === GL.RGB) {\n    return format;\n  }\n  // prettier-ignore\n  switch (channels) {\n    case 'r': return integer && !normalized ? GL.RED_INTEGER : GL.RED;\n    case 'rg': return integer && !normalized ? GL.RG_INTEGER : GL.RG;\n    case 'rgb': return integer && !normalized ? GL.RGB_INTEGER : GL.RGB;\n    case 'rgba': return integer && !normalized ? GL.RGBA_INTEGER : GL.RGBA;\n    case 'bgra': throw new Error('bgra pixels not supported by WebGL');\n    default: return GL.RGBA;\n  }\n}\n\n/**\n * Map WebGPU style texture format strings to GL constants\n */\nfunction convertTextureFormatToGL(format: TextureFormat): GL {\n  const formatInfo = WEBGL_TEXTURE_FORMATS[format];\n  const webglFormat = formatInfo?.gl;\n  if (webglFormat === undefined) {\n    throw new Error(`Unsupported texture format ${format}`);\n  }\n  return webglFormat;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GL} from '@luma.gl/constants';\nimport {VertexFormat, NormalizedDataType} from '@luma.gl/core';\n\ntype GLDataType =\n  | GL.UNSIGNED_BYTE\n  | GL.BYTE\n  | GL.UNSIGNED_SHORT\n  | GL.SHORT\n  | GL.UNSIGNED_INT\n  | GL.INT\n  | GL.HALF_FLOAT\n  | GL.FLOAT;\n\n/** Get vertex format from GL constants */\nexport function getVertexFormatFromGL(type: GLDataType, components: 1 | 2 | 3 | 4): VertexFormat {\n  const base = getVertexTypeFromGL(type);\n  // prettier-ignore\n  switch (components) {\n    case 1: return base;\n    case 2: return `${base}x2`;\n    // @ts-expect-error TODO deal with lack of \"unaligned\" formats\n    case 3: return `${base}x3`;\n    case 4: return `${base}x4`;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(components));\n}\n\n/** Get data type from GL constants */\nexport function getVertexTypeFromGL(type: GLDataType, normalized = false): NormalizedDataType {\n  // prettier-ignore\n  switch (type) {\n    // WebGPU does not support normalized 32 bit integer attributes\n    case GL.INT: return normalized ? 'sint32' : 'sint32';\n    case GL.UNSIGNED_INT: return normalized ? 'uint32' : 'uint32';\n    case GL.SHORT: return normalized ? 'sint16' : 'unorm16';\n    case GL.UNSIGNED_SHORT: return normalized ? 'uint16' : 'unorm16';\n    case GL.BYTE: return normalized ? 'sint8' : 'snorm16';\n    case GL.UNSIGNED_BYTE: return normalized ? 'uint8' : 'unorm8';\n    case GL.FLOAT: return 'float32';\n    case GL.HALF_FLOAT: return 'float16';\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(type));\n}\n\nexport function getGLFromVertexType(\n  dataType: NormalizedDataType\n):\n  | GL.UNSIGNED_BYTE\n  | GL.BYTE\n  | GL.UNSIGNED_SHORT\n  | GL.SHORT\n  | GL.UNSIGNED_INT\n  | GL.INT\n  | GL.HALF_FLOAT\n  | GL.FLOAT {\n  // prettier-ignore\n  switch (dataType) {\n    case 'uint8': return GL.UNSIGNED_BYTE;\n    case 'sint8': return GL.BYTE;\n    case 'unorm8': return GL.UNSIGNED_BYTE;\n    case 'snorm8': return GL.BYTE;\n    case 'uint16': return GL.UNSIGNED_SHORT;\n    case 'sint16': return GL.SHORT;\n    case 'unorm16': return GL.UNSIGNED_SHORT;\n    case 'snorm16': return GL.SHORT;\n    case 'uint32': return GL.UNSIGNED_INT;\n    case 'sint32': return GL.INT;\n    // WebGPU does not support normalized 32 bit integer attributes\n    // case 'unorm32': return GL.UNSIGNED_INT;\n    // case 'snorm32': return GL.INT;\n    case 'float16': return GL.HALF_FLOAT;\n    case 'float32': return GL.FLOAT;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(dataType));\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DeviceLimits} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\n\n// prettier-ignore\nexport class WebGLDeviceLimits extends DeviceLimits {\n  get maxTextureDimension1D() { return 0; } // WebGL does not support 1D textures\n  get maxTextureDimension2D() { return this.getParameter(GL.MAX_TEXTURE_SIZE); }\n  get maxTextureDimension3D() { return this.getParameter(GL.MAX_3D_TEXTURE_SIZE); }\n  get maxTextureArrayLayers() { return this.getParameter(GL.MAX_ARRAY_TEXTURE_LAYERS); }\n  get maxBindGroups() { return 0; }\n  get maxDynamicUniformBuffersPerPipelineLayout() { return 0; } // TBD\n  get maxDynamicStorageBuffersPerPipelineLayout() { return 0; } // TBD\n  get maxSampledTexturesPerShaderStage() { return this.getParameter(GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS); } // ) TBD\n  get maxSamplersPerShaderStage() { return this.getParameter(GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS); }\n  get maxStorageBuffersPerShaderStage() { return 0; } // TBD\n  get maxStorageTexturesPerShaderStage() { return 0; } // TBD\n  get maxUniformBuffersPerShaderStage() { return this.getParameter(GL.MAX_UNIFORM_BUFFER_BINDINGS); }\n  get maxUniformBufferBindingSize() { return this.getParameter(GL.MAX_UNIFORM_BLOCK_SIZE); }\n  get maxStorageBufferBindingSize() { return 0; }\n  get minUniformBufferOffsetAlignment() { return this.getParameter(GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT); }\n  get minStorageBufferOffsetAlignment() { return 0; } \n  get maxVertexBuffers() { return 16; } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284\n  get maxVertexAttributes() { return this.getParameter(GL.MAX_VERTEX_ATTRIBS); }\n  get maxVertexBufferArrayStride() { return 2048; } // TBD, this is just the default value from WebGPU\n  get maxInterStageShaderVariables() { return this.getParameter(GL.MAX_VARYING_COMPONENTS); }\n  get maxComputeWorkgroupStorageSize() { return 0; } // WebGL does not support compute shaders\n  get maxComputeInvocationsPerWorkgroup() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeX() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeY() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupSizeZ() { return 0; } // WebGL does not support compute shaders\n  get maxComputeWorkgroupsPerDimension() { return 0;} // WebGL does not support compute shaders\n\n  // PRIVATE\n\n  protected gl: WebGL2RenderingContext;\n  protected limits: Partial<Record<GL, number>> = {};\n\n  constructor(gl: WebGL2RenderingContext) {\n    super();\n    this.gl = gl;\n  }\n\n  protected getParameter(parameter: GL): number {\n    if (this.limits[parameter] === undefined) {\n      this.limits[parameter] = this.gl.getParameter(parameter);\n    }\n    return this.limits[parameter] || 0;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CanvasContextProps} from '@luma.gl/core';\nimport {CanvasContext} from '@luma.gl/core';\nimport {WebGLDevice} from './webgl-device';\nimport {WEBGLFramebuffer} from './resources/webgl-framebuffer';\n\n/**\n * A WebGL Canvas Context which manages the canvas and handles drawing buffer resizing etc\n */\nexport class WebGLCanvasContext extends CanvasContext {\n  readonly device: WebGLDevice;\n  readonly handle: unknown = null;\n\n  private _framebuffer: WEBGLFramebuffer | null = null;\n\n  get [Symbol.toStringTag](): string {\n    return 'WebGLCanvasContext';\n  }\n\n  constructor(device: WebGLDevice, props: CanvasContextProps) {\n    // Note: Base class creates / looks up the canvas (unless under Node.js)\n    super(props);\n    this.device = device;\n\n    // Base class constructor cannot access derived methods/fields, so we need to call these functions in the subclass constructor\n    this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);\n    this._updateDevice();\n  }\n\n  getCurrentFramebuffer(): WEBGLFramebuffer {\n    // Setting handle to null returns a reference to the default framebuffer\n    this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, {handle: null});\n    return this._framebuffer;\n  }\n\n  // IMPLEMENTATION OF ABSTRACT METHODS\n\n  _updateDevice(): void {}\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {FramebufferProps} from '@luma.gl/core';\nimport {Framebuffer} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLTexture} from './webgl-texture';\nimport {WEBGLTextureView} from './webgl-texture-view';\nimport {getDepthStencilAttachmentWebGL} from '../converters/webgl-texture-table';\n\nexport type Attachment = WEBGLTextureView | WEBGLTexture; // | WEBGLRenderbuffer;\n\n/** luma.gl Framebuffer, WebGL implementation  */\nexport class WEBGLFramebuffer extends Framebuffer {\n  readonly device: WebGLDevice;\n  gl: WebGL2RenderingContext;\n  readonly handle: WebGLFramebuffer;\n\n  colorAttachments: WEBGLTextureView[] = [];\n  depthStencilAttachment: WEBGLTextureView | null = null;\n\n  constructor(device: WebGLDevice, props: FramebufferProps) {\n    super(device, props);\n\n    // WebGL default framebuffer handle is null\n    const isDefaultFramebuffer = props.handle === null;\n\n    this.device = device;\n    this.gl = device.gl;\n    this.handle =\n      this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();\n\n    if (!isDefaultFramebuffer) {\n      // default framebuffer handle is null, so we can't set debug metadata...\n      device._setWebGLDebugMetadata(this.handle, this, {spector: this.props});\n\n      // Auto create textures for attachments if needed\n      this.autoCreateAttachmentTextures();\n\n      this.updateAttachments();\n    }\n  }\n\n  /** destroys any auto created resources etc. */\n  override destroy(): void {\n    super.destroy(); // destroys owned resources etc.\n    if (!this.destroyed && this.handle !== null) {\n      this.gl.deleteFramebuffer(this.handle);\n      // this.handle = null;\n    }\n  }\n\n  protected updateAttachments(): void {\n    /** Attach from a map of attachments */\n    // @ts-expect-error native bindFramebuffer is overridden by our state tracker\n    const prevHandle: WebGLFramebuffer | null = this.gl.bindFramebuffer(\n      GL.FRAMEBUFFER,\n      this.handle\n    );\n\n    // Walk the attachments\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      const attachment = this.colorAttachments[i];\n      if (attachment) {\n        const attachmentPoint = GL.COLOR_ATTACHMENT0 + i;\n        this._attachTextureView(attachmentPoint, attachment);\n      }\n    }\n\n    if (this.depthStencilAttachment) {\n      const attachmentPoint = getDepthStencilAttachmentWebGL(\n        this.depthStencilAttachment.props.format\n      );\n      this._attachTextureView(attachmentPoint, this.depthStencilAttachment);\n    }\n\n    /** Check the status */\n    if (this.device.props.debug) {\n      const status = this.gl.checkFramebufferStatus(GL.FRAMEBUFFER) as GL;\n      if (status !== GL.FRAMEBUFFER_COMPLETE) {\n        throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle);\n  }\n\n  // PRIVATE\n\n  /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */\n  // protected override createDepthStencilTexture(format: TextureFormat): Texture {\n  //   // return new WEBGLRenderbuffer(this.device, {\n  //   return new WEBGLTexture(this.device, {\n  //     id: `${this.id}-depth-stencil`,\n  //     format,\n  //     width: this.width,\n  //     height: this.height,\n  //     mipmaps: false\n  //   });\n  // }\n\n  /**\n   * @param attachment\n   * @param texture\n   * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`\n   * @param level = 0 - mipmapLevel\n   */\n  protected _attachTextureView(attachment: GL, textureView: WEBGLTextureView): void {\n    const {gl} = this.device;\n    const {texture} = textureView;\n    const level = textureView.props.baseMipLevel;\n    const layer = textureView.props.baseArrayLayer;\n\n    gl.bindTexture(texture.glTarget, texture.handle);\n\n    switch (texture.glTarget) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.handle, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        throw new Error('Illegal texture type');\n    }\n\n    gl.bindTexture(texture.glTarget, null);\n  }\n}\n\n// Helper functions\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer: number | GL): GL {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < (GL.TEXTURE_CUBE_MAP_POSITIVE_X as number)\n    ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X\n    : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status: GL) {\n  switch (status) {\n    case GL.FRAMEBUFFER_COMPLETE:\n      return 'success';\n    case GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'Mismatched attachments';\n    case GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'No attachments';\n    case GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'Height/width mismatch';\n    case GL.FRAMEBUFFER_UNSUPPORTED:\n      return 'Unsupported or split attachments';\n    // WebGL2\n    case GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n      return 'Samples mismatch';\n    // OVR_multiview2 extension\n    // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';\n    default:\n      return `${status}`;\n  }\n}\n\n/**\n * Attachment resize is expected to be a noop if size is same\n *\nprotected override resizeAttachments(width: number, height: number): this {\n  // for default framebuffer, just update the stored size\n  if (this.handle === null) {\n    // assert(width === undefined && height === undefined);\n    this.width = this.gl.drawingBufferWidth;\n    this.height = this.gl.drawingBufferHeight;\n    return this;\n  }\n\n  if (width === undefined) {\n    width = this.gl.drawingBufferWidth;\n  }\n  if (height === undefined) {\n    height = this.gl.drawingBufferHeight;\n  }\n\n  // TODO Not clear that this is better than default destroy/create implementation\n\n  for (const colorAttachment of this.colorAttachments) {\n    colorAttachment.texture.clone({width, height});\n  }\n  if (this.depthStencilAttachment) {\n    this.depthStencilAttachment.texture.resize({width, height});\n  }\n  return this;\n}\n*/\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@luma.gl/core';\nimport {loadScript} from '../../utils/load-script';\n\nimport type {Spector} from './spector-types';\n\n/** Spector debug initialization options */\ntype SpectorProps = {\n  /** Whether spector.js is enabled */\n  debugSpectorJS?: boolean;\n  /** URL to load spector script from. Typically a CDN URL */\n  debugSpectorJSUrl?: string;\n  /** Canvas to monitor */\n  gl?: WebGL2RenderingContext;\n};\n\nconst LOG_LEVEL = 1;\n\nlet spector: Spector | null = null;\nlet initialized: boolean = false;\n\ndeclare global {\n  // @ts-ignore\n  // eslint-disable-next-line no-var\n  var SPECTOR: Spector;\n}\n\nexport const DEFAULT_SPECTOR_PROPS: Required<SpectorProps> = {\n  debugSpectorJS: log.get('debug-spectorjs'),\n  // https://github.com/BabylonJS/Spector.js#basic-usage\n  // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241\n  // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';\n  debugSpectorJSUrl: 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js',\n  gl: undefined!\n};\n\n/** Loads spector from CDN if not already installed */\nexport async function loadSpectorJS(props: {debugSpectorJSUrl?: string}): Promise<void> {\n  if (!globalThis.SPECTOR) {\n    try {\n      await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);\n    } catch (error) {\n      log.warn(String(error));\n    }\n  }\n}\n\nexport function initializeSpectorJS(props: SpectorProps): Spector | null {\n  props = {...DEFAULT_SPECTOR_PROPS, ...props};\n  if (!props.debugSpectorJS) {\n    return null;\n  }\n\n  if (!spector && globalThis.SPECTOR && !globalThis.luma?.spector) {\n    log.probe(LOG_LEVEL, 'SPECTOR found and initialized. Start with `luma.spector.displayUI()`')();\n    const {Spector: SpectorJS} = globalThis.SPECTOR as any;\n    spector = new SpectorJS();\n    if (globalThis.luma) {\n      (globalThis.luma as any).spector = spector;\n    }\n  }\n\n  if (!spector) {\n    return null;\n  }\n\n  if (!initialized) {\n    initialized = true;\n\n    // enables recording some extra information merged in the capture like texture memory sizes and formats\n    spector.spyCanvases();\n    // A callback when results are ready\n    spector?.onCaptureStarted.add((capture: unknown) =>\n      log.info('Spector capture started:', capture)()\n    );\n    spector?.onCapture.add((capture: unknown) => {\n      log.info('Spector capture complete:', capture)();\n      // Use undocumented Spector API to open the UI with our capture\n      // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124\n      spector?.getResultUI();\n      // @ts-expect-error private\n      spector?.resultView.display();\n      // @ts-expect-error private\n      spector?.resultView.addCapture(capture);\n    });\n  }\n\n  if (props.gl) {\n    // capture startup\n    const gl = props.gl;\n    // @ts-expect-error\n    const device = gl.device;\n    spector?.startCapture(props.gl, 500); // 500 commands\n    // @ts-expect-error\n    gl.device = device;\n\n    new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {\n      log.info('Spector capture stopped after 2 seconds')();\n      spector?.stopCapture();\n      // spector?.displayUI();\n    });\n  }\n\n  return spector;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/**\n * Load a script (identified by an url). When the url returns, the\n * content of this file is added into a new script element, attached to the DOM (body element)\n * @param scriptUrl defines the url of the script to laod\n * @param scriptId defines the id of the script element\n */\nexport async function loadScript(scriptUrl: string, scriptId?: string): Promise<Event> {\n  const head = document.getElementsByTagName('head')[0];\n  if (!head) {\n    throw new Error('loadScript');\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('type', 'text/javascript');\n  script.setAttribute('src', scriptUrl);\n  if (scriptId) {\n    script.id = scriptId;\n  }\n\n  return new Promise((resolve, reject) => {\n    script.onload = resolve;\n    script.onerror = error =>\n      reject(new Error(`Unable to load script '${scriptUrl}': ${error as string}`));\n    head.appendChild(script);\n  });\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {log} from '@luma.gl/core';\n// Rename constant to prevent inlining. We need the full set of constants for generating debug strings.\nimport {GL as GLEnum} from '@luma.gl/constants';\nimport {isBrowser} from '@probe.gl/env';\nimport {loadScript} from '../../utils/load-script';\n\nconst WEBGL_DEBUG_CDN_URL = 'https://unpkg.com/webgl-debug@2.0.1/index.js';\n\ntype DebugContextProps = {\n  debugWebGL?: boolean;\n  traceWebGL?: boolean;\n};\n\ntype ContextData = {\n  realContext?: WebGL2RenderingContext;\n  debugContext?: WebGL2RenderingContext;\n};\n\n// Helper to get shared context data\nfunction getWebGLContextData(gl: any): ContextData {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var WebGLDebugUtils: any;\n}\n\n/**\n * Loads Khronos WebGLDeveloperTools from CDN if not already installed\n * const WebGLDebugUtils = require('webgl-debug');\n * @see https://github.com/KhronosGroup/WebGLDeveloperTools\n * @see https://github.com/vorg/webgl-debug\n */\nexport async function loadWebGLDeveloperTools(): Promise<void> {\n  if (isBrowser() && !globalThis.WebGLDebugUtils) {\n    globalThis.global = globalThis.global || globalThis;\n    // @ts-expect-error Developer tools expects global to be set\n    globalThis.global.module = {};\n    await loadScript(WEBGL_DEBUG_CDN_URL);\n  }\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(\n  gl: WebGL2RenderingContext,\n  props: DebugContextProps = {}\n): WebGL2RenderingContext {\n  return props.debugWebGL || props.traceWebGL ? getDebugContext(gl, props) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nfunction getRealContext(gl: WebGL2RenderingContext): WebGL2RenderingContext {\n  const data = getWebGLContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nfunction getDebugContext(\n  gl: WebGL2RenderingContext,\n  props: DebugContextProps\n): WebGL2RenderingContext {\n  if (!globalThis.WebGLDebugUtils) {\n    log.warn('webgl-debug not loaded')();\n    return gl;\n  }\n\n  const data = getWebGLContextData(gl);\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  globalThis.WebGLDebugUtils.init({...GLEnum, ...gl});\n  const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(\n    gl,\n    onGLError.bind(null, props),\n    onValidateGLFunc.bind(null, props)\n  );\n\n  // Make sure we have all WebGL2 and extension constants (todo dynamic import to circumvent minification?)\n  for (const key in GLEnum) {\n    if (!(key in glDebug) && typeof GLEnum[key] === 'number') {\n      glDebug[key] = GLEnum[key];\n    }\n  }\n\n  // Ensure we have a clean prototype on the instrumented object\n  // Note: setPrototypeOf does come with perf warnings, but we already take a bigger perf reduction\n  // by synchronizing the WebGL errors after each WebGL call.\n  class WebGLDebugContext {}\n  Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));\n  Object.setPrototypeOf(WebGLDebugContext, glDebug);\n  const debugContext = Object.create(WebGLDebugContext);\n  // Store the debug context\n  data.realContext = gl;\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName: string, functionArgs: unknown[]): string {\n  // Cover bug in webgl-debug-tools\n  functionArgs = Array.from(functionArgs).map(arg => (arg === undefined ? 'undefined' : arg));\n  let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction onGLError(\n  props: DebugContextProps,\n  err: number,\n  functionName: string,\n  args: unknown[]\n): void {\n  // Cover bug in webgl-debug-tools\n  args = Array.from(args).map(arg => (arg === undefined ? 'undefined' : arg));\n  const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);\n  const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  // TODO - call device.reportError\n  log.error(message)();\n  debugger; // eslint-disable-line\n  // throw new Error(message);\n}\n\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(\n  props: DebugContextProps,\n  functionName: string,\n  functionArgs: unknown[]\n): void {\n  let functionString: string = '';\n  if (log.level >= 1) {\n    functionString = getFunctionString(functionName, functionArgs);\n    if (props.traceWebGL) {\n      log.log(1, functionString)();\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      debugger; // eslint-disable-line\n      // throw new Error(`Undefined argument: ${functionString}`);\n    }\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nconst uidCounters: Record<string, number> = {};\n\n/**\n * Returns a UID.\n * @param id= - Identifier base name\n * @return uid\n **/\nexport function uid(id: string = 'id'): string {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {BufferMapCallback, BufferProps} from '@luma.gl/core';\nimport {Buffer} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\n\n/** WebGL Buffer interface */\nexport class WEBGLBuffer extends Buffer {\n  readonly device: WebGLDevice;\n  readonly gl: WebGL2RenderingContext;\n  readonly handle: WebGLBuffer;\n\n  /** Target in OpenGL defines the type of buffer */\n  readonly glTarget: GL.ARRAY_BUFFER | GL.ELEMENT_ARRAY_BUFFER | GL.UNIFORM_BUFFER;\n  /** Usage is a hint on how frequently the buffer will be updates */\n  readonly glUsage: GL.STATIC_DRAW | GL.DYNAMIC_DRAW;\n  /** Index type is needed when issuing draw calls, so we pre-compute it */\n  readonly glIndexType: GL.UNSIGNED_SHORT | GL.UNSIGNED_INT = GL.UNSIGNED_SHORT;\n\n  /** Number of bytes allocated on the GPU for this buffer */\n  byteLength: number = 0;\n  /** Number of bytes used */\n  bytesUsed: number = 0;\n\n  constructor(device: WebGLDevice, props: BufferProps = {}) {\n    super(device, props);\n\n    this.device = device;\n    this.gl = this.device.gl;\n\n    const handle = typeof props === 'object' ? props.handle : undefined;\n    this.handle = handle || this.gl.createBuffer();\n    device._setWebGLDebugMetadata(this.handle, this, {\n      spector: {...this.props, data: typeof this.props.data}\n    });\n\n    // - In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    //   otherwise buffer type will lock to generic (non-element) buffer\n    // - In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.glTarget = getWebGLTarget(this.props.usage);\n    this.glUsage = getWebGLUsage(this.props.usage);\n    this.glIndexType = this.props.indexType === 'uint32' ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._initWithData(props.data, props.byteOffset, props.byteLength);\n    } else {\n      this._initWithByteLength(props.byteLength || 0);\n    }\n  }\n\n  override destroy(): void {\n    if (!this.destroyed && this.handle) {\n      this.removeStats();\n      this.trackDeallocatedMemory();\n      this.gl.deleteBuffer(this.handle);\n      this.destroyed = true;\n      // @ts-expect-error\n      this.handle = null;\n    }\n  }\n\n  /** Allocate a new buffer and initialize to contents of typed array */\n  _initWithData(\n    data: ArrayBuffer | ArrayBufferView,\n    byteOffset: number = 0,\n    byteLength: number = data.byteLength + byteOffset\n  ): void {\n    // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;\n    const glTarget = this.glTarget;\n    this.gl.bindBuffer(glTarget, this.handle);\n    this.gl.bufferData(glTarget, byteLength, this.glUsage);\n    this.gl.bufferSubData(glTarget, byteOffset, data);\n    this.gl.bindBuffer(glTarget, null);\n\n    this.bytesUsed = byteLength;\n    this.byteLength = byteLength;\n\n    this._setDebugData(data, byteOffset, byteLength);\n    this.trackAllocatedMemory(byteLength);\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _initWithByteLength(byteLength: number): this {\n    // assert(byteLength >= 0);\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      // @ts-expect-error\n      data = new Float32Array(0);\n    }\n\n    // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;\n    const glTarget = this.glTarget;\n\n    this.gl.bindBuffer(glTarget, this.handle);\n    this.gl.bufferData(glTarget, data, this.glUsage);\n    this.gl.bindBuffer(glTarget, null);\n\n    this.bytesUsed = byteLength;\n    this.byteLength = byteLength;\n\n    this._setDebugData(null, 0, byteLength);\n    this.trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  write(data: ArrayBufferLike | ArrayBufferView, byteOffset: number = 0): void {\n    const dataView = ArrayBuffer.isView(data) ? data : new Uint8Array(data);\n    const srcOffset = 0;\n    const byteLength = undefined; // data.byteLength;\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const glTarget = GL.COPY_WRITE_BUFFER;\n    this.gl.bindBuffer(glTarget, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      this.gl.bufferSubData(glTarget, byteOffset, dataView, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(glTarget, byteOffset, dataView);\n    }\n    this.gl.bindBuffer(glTarget, null);\n\n    this._setDebugData(data, byteOffset, data.byteLength);\n  }\n\n  async mapAndWriteAsync(\n    callback: BufferMapCallback<void>,\n    byteOffset: number = 0,\n    byteLength: number = this.byteLength - byteOffset\n  ): Promise<void> {\n    const arrayBuffer = new ArrayBuffer(byteLength);\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    await callback(arrayBuffer, 'copied');\n    this.write(arrayBuffer, byteOffset);\n  }\n\n  async readAsync(byteOffset = 0, byteLength?: number): Promise<Uint8Array<ArrayBuffer>> {\n    return this.readSyncWebGL(byteOffset, byteLength);\n  }\n\n  async mapAndReadAsync<T>(\n    callback: BufferMapCallback<T>,\n    byteOffset = 0,\n    byteLength?: number\n  ): Promise<T> {\n    const data = await this.readAsync(byteOffset, byteLength);\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    return await callback(data.buffer, 'copied');\n  }\n\n  readSyncWebGL(byteOffset = 0, byteLength?: number): Uint8Array<ArrayBuffer> {\n    byteLength = byteLength ?? this.byteLength - byteOffset;\n    const data = new Uint8Array(byteLength);\n    const dstOffset = 0;\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, byteOffset, data, dstOffset, byteLength);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // Update local `data` if offsets are 0\n    this._setDebugData(data, byteOffset, byteLength);\n\n    return data;\n  }\n}\n\n/**\n * Returns a WebGL buffer target\n *\n * @param usage\n * static MAP_READ = 0x01;\n * static MAP_WRITE = 0x02;\n * static COPY_SRC = 0x0004;\n * static COPY_DST = 0x0008;\n * static INDEX = 0x0010;\n * static VERTEX = 0x0020;\n * static UNIFORM = 0x0040;\n * static STORAGE = 0x0080;\n * static INDIRECT = 0x0100;\n * static QUERY_RESOLVE = 0x0200;\n *\n * @returns WebGL buffer targe\n *\n * Buffer bind points in WebGL2\n * gl.COPY_READ_BUFFER: Buffer for copying from one buffer object to another.\n * gl.COPY_WRITE_BUFFER: Buffer for copying from one buffer object to another.\n * gl.TRANSFORM_FEEDBACK_BUFFER: Buffer for transform feedback operations.\n * gl.PIXEL_PACK_BUFFER: Buffer used for pixel transfer operations.\n * gl.PIXEL_UNPACK_BUFFER: Buffer used for pixel transfer operations.\n */\nfunction getWebGLTarget(\n  usage: number\n): GL.ARRAY_BUFFER | GL.ELEMENT_ARRAY_BUFFER | GL.UNIFORM_BUFFER {\n  if (usage & Buffer.INDEX) {\n    return GL.ELEMENT_ARRAY_BUFFER;\n  }\n  if (usage & Buffer.VERTEX) {\n    return GL.ARRAY_BUFFER;\n  }\n  if (usage & Buffer.UNIFORM) {\n    return GL.UNIFORM_BUFFER;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, we can use GL.COPY_WRITE_BUFFER to avoid locking the type\n  return GL.ARRAY_BUFFER;\n}\n\n/** @todo usage is not passed correctly */\nfunction getWebGLUsage(usage: number): GL.STATIC_DRAW | GL.DYNAMIC_DRAW {\n  if (usage & Buffer.INDEX) {\n    return GL.STATIC_DRAW;\n  }\n  if (usage & Buffer.VERTEX) {\n    return GL.STATIC_DRAW;\n  }\n  if (usage & Buffer.UNIFORM) {\n    return GL.DYNAMIC_DRAW;\n  }\n  return GL.STATIC_DRAW;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Shader, ShaderProps, CompilerMessage, log} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {parseShaderCompilerLog} from '../helpers/parse-shader-compiler-log';\nimport {WebGLDevice} from '../webgl-device';\n\n/**\n * An immutable compiled shader program that execute portions of the GPU Pipeline\n */\nexport class WEBGLShader extends Shader {\n  readonly device: WebGLDevice;\n  readonly handle: WebGLShader;\n\n  constructor(device: WebGLDevice, props: ShaderProps) {\n    super(device, props);\n    this.device = device;\n    switch (this.props.stage) {\n      case 'vertex':\n        this.handle = this.props.handle || this.device.gl.createShader(GL.VERTEX_SHADER);\n        break;\n      case 'fragment':\n        this.handle = this.props.handle || this.device.gl.createShader(GL.FRAGMENT_SHADER);\n        break;\n      default:\n        throw new Error(this.props.stage);\n    }\n\n    // default framebuffer handle is null, so we can't set spector metadata...\n    device._setWebGLDebugMetadata(this.handle, this, {spector: this.props});\n\n    this._compile(this.source);\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.removeStats();\n      this.device.gl.deleteShader(this.handle);\n      this.destroyed = true;\n      // @ts-expect-error\n      this.handle.destroyed = true;\n      // this.handle = null;\n    }\n  }\n\n  get asyncCompilationStatus(): Promise<'pending' | 'success' | 'error'> {\n    return this._waitForCompilationComplete().then(() => {\n      this._getCompilationStatus();\n      return this.compilationStatus;\n    });\n  }\n\n  override async getCompilationInfo(): Promise<readonly CompilerMessage[]> {\n    await this._waitForCompilationComplete();\n    return this.getCompilationInfoSync();\n  }\n\n  override getCompilationInfoSync(): readonly CompilerMessage[] {\n    const shaderLog = this.device.gl.getShaderInfoLog(this.handle);\n    return shaderLog ? parseShaderCompilerLog(shaderLog) : [];\n  }\n\n  override getTranslatedSource(): string | null {\n    const extensions = this.device.getExtension('WEBGL_debug_shaders');\n    const ext = extensions.WEBGL_debug_shaders;\n    return ext?.getTranslatedShaderSource(this.handle) || null;\n  }\n\n  // PRIVATE METHODS\n\n  /** Compile a shader and get compilation status */\n  protected async _compile(source: string): Promise<void> {\n    source = source.startsWith('#version ') ? source : `#version 300 es\\n${source}`;\n\n    const {gl} = this.device;\n    gl.shaderSource(this.handle, source);\n    gl.compileShader(this.handle);\n\n    // For performance reasons, avoid checking shader compilation errors on production\n    if (!this.device.props.debug) {\n      this.compilationStatus = 'pending';\n      return;\n    }\n\n    // Sync case - slower, but advantage is that it throws in the constructor, making break on error more useful\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      this._getCompilationStatus();\n      // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus\n      this.debugShader();\n      if (this.compilationStatus === 'error') {\n        throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);\n      }\n      return;\n    }\n\n    // async case\n    log.once(1, 'Shader compilation is asynchronous')();\n    await this._waitForCompilationComplete();\n    log.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();\n    this._getCompilationStatus();\n\n    // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus\n    this.debugShader();\n  }\n\n  /** Use KHR_parallel_shader_compile extension if available */\n  protected async _waitForCompilationComplete(): Promise<void> {\n    const waitMs = async (ms: number) => await new Promise(resolve => setTimeout(resolve, ms));\n    const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)\n\n    // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      await waitMs(DELAY_MS);\n      return;\n    }\n\n    const {gl} = this.device;\n    for (;;) {\n      const complete = gl.getShaderParameter(this.handle, GL.COMPLETION_STATUS_KHR);\n      if (complete) {\n        return;\n      }\n      await waitMs(DELAY_MS);\n    }\n  }\n\n  /**\n   * Get the shader compilation status\n   * TODO - Load log even when no error reported, to catch warnings?\n   * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n   */\n  protected _getCompilationStatus() {\n    this.compilationStatus = this.device.gl.getShaderParameter(this.handle, GL.COMPILE_STATUS)\n      ? 'success'\n      : 'error';\n  }\n}\n\n// TODO - Original code from luma.gl v8 - keep until new debug functionality has matured\n// if (!compilationSuccess) {\n//   const parsedLog = shaderLog ? parseShaderCompilerLog(shaderLog) : [];\n//   const messages = parsedLog.filter(message => message.type === 'error');\n//   const formattedLog = formatCompilerLog(messages, source, {showSourceCode: 'all', html: true});\n//   const shaderDescription = `${this.stage} shader ${shaderName}`;\n//   log.error(`GLSL compilation errors in ${shaderDescription}\\n${formattedLog}`)();\n//   displayShaderLog(parsedLog, source, shaderName);\n// }\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompilerMessage} from '@luma.gl/core';\n\n/**\n * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.\n * This follows documented WebGL conventions for compilation logs.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\nexport function parseShaderCompilerLog(errLog: string): readonly CompilerMessage[] {\n  // Parse the error - note: browser and driver dependent\n  const lines = errLog.split(/\\r?\\n/);\n\n  const messages: CompilerMessage[] = [];\n\n  for (const line of lines) {\n    if (line.length <= 1) {\n      continue; // eslint-disable-line no-continue\n    }\n\n    const segments: string[] = line.split(':');\n\n    // Check for messages with no line information `ERROR: unsupported shader version`\n    if (segments.length === 2) {\n      const [messageType, message] = segments;\n      messages.push({\n        message: message.trim(),\n        type: getMessageType(messageType),\n        lineNum: 0,\n        linePos: 0\n      });\n      continue; // eslint-disable-line no-continue\n    }\n\n    const [messageType, linePosition, lineNumber, ...rest] = segments;\n\n    let lineNum = parseInt(lineNumber, 10);\n    if (isNaN(lineNum)) {\n      lineNum = 0;\n    }\n\n    let linePos = parseInt(linePosition, 10);\n    if (isNaN(linePos)) {\n      linePos = 0;\n    }\n\n    messages.push({\n      message: rest.join(':').trim(),\n      type: getMessageType(messageType),\n      lineNum,\n      linePos // TODO\n    });\n  }\n\n  return messages;\n}\n\n/** Ensure supported type */\nfunction getMessageType(messageType: string): 'warning' | 'error' | 'info' {\n  const MESSAGE_TYPES = ['warning', 'error', 'info'];\n  const lowerCaseType = messageType.toLowerCase();\n  return (MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info') as\n    | 'warning'\n    | 'error'\n    | 'info';\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Sampler, SamplerProps} from '@luma.gl/core';\nimport {GL, GLSamplerParameters} from '@luma.gl/constants';\nimport {convertSamplerParametersToWebGL} from '../converters/sampler-parameters';\nimport type {WebGLDevice} from '../webgl-device';\n\n/**\n * Sampler object -\n * so that they can be set directly on the texture\n * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html\n */\nexport class WEBGLSampler extends Sampler {\n  readonly device: WebGLDevice;\n  readonly handle: WebGLSampler;\n  readonly parameters: GLSamplerParameters;\n\n  constructor(device: WebGLDevice, props: SamplerProps) {\n    super(device, props);\n    this.device = device;\n    this.parameters = convertSamplerParametersToWebGL(props);\n    this.handle = props.handle || this.device.gl.createSampler();\n    this._setSamplerParameters(this.parameters);\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.device.gl.deleteSampler(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined;\n    }\n  }\n\n  override toString(): string {\n    return `Sampler(${this.id},${JSON.stringify(this.props)})`;\n  }\n\n  /** Set sampler parameters on the sampler */\n  private _setSamplerParameters(parameters: GLSamplerParameters): void {\n    for (const [pname, value] of Object.entries(parameters)) {\n      // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      const param = Number(pname) as GL.TEXTURE_MIN_LOD | GL.TEXTURE_MAX_LOD;\n      switch (param) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.device.gl.samplerParameterf(this.handle, param, value);\n          break;\n        default:\n          this.device.gl.samplerParameteri(this.handle, param, value);\n          break;\n      }\n    }\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// SAMPLER FILTERS\nimport {SamplerProps} from '@luma.gl/core';\nimport {GL, GLSamplerParameters} from '@luma.gl/constants';\nimport {convertCompareFunction} from './device-parameters';\n\n/**\n * Convert WebGPU-style sampler props to WebGL\n * @param props\n * @returns\n */\nexport function convertSamplerParametersToWebGL(props: SamplerProps): GLSamplerParameters {\n  const params: GLSamplerParameters = {};\n  if (props.addressModeU) {\n    params[GL.TEXTURE_WRAP_S] = convertAddressMode(props.addressModeU);\n  }\n  if (props.addressModeV) {\n    params[GL.TEXTURE_WRAP_T] = convertAddressMode(props.addressModeV);\n  }\n  if (props.addressModeW) {\n    params[GL.TEXTURE_WRAP_R] = convertAddressMode(props.addressModeW);\n  }\n  if (props.magFilter) {\n    params[GL.TEXTURE_MAG_FILTER] = convertMaxFilterMode(props.magFilter);\n  }\n  if (props.minFilter || props.mipmapFilter) {\n    // TODO - arbitrary choice of linear?\n    params[GL.TEXTURE_MIN_FILTER] = convertMinFilterMode(\n      props.minFilter || 'linear',\n      props.mipmapFilter\n    );\n  }\n  if (props.lodMinClamp !== undefined) {\n    params[GL.TEXTURE_MIN_LOD] = props.lodMinClamp;\n  }\n  if (props.lodMaxClamp !== undefined) {\n    params[GL.TEXTURE_MAX_LOD] = props.lodMaxClamp;\n  }\n  if (props.type === 'comparison-sampler') {\n    // Setting prop.compare turns this into a comparison sampler\n    params[GL.TEXTURE_COMPARE_MODE] = GL.COMPARE_REF_TO_TEXTURE;\n  }\n  if (props.compare) {\n    params[GL.TEXTURE_COMPARE_FUNC] = convertCompareFunction('compare', props.compare);\n  }\n  // Note depends on WebGL extension\n  if (props.maxAnisotropy) {\n    params[GL.TEXTURE_MAX_ANISOTROPY_EXT] = props.maxAnisotropy;\n  }\n  return params;\n}\n\n// HELPERS\n\n/** Convert address more */\nfunction convertAddressMode(\n  addressMode: 'clamp-to-edge' | 'repeat' | 'mirror-repeat'\n): GL.CLAMP_TO_EDGE | GL.REPEAT | GL.MIRRORED_REPEAT {\n  switch (addressMode) {\n    case 'clamp-to-edge':\n      return GL.CLAMP_TO_EDGE;\n    case 'repeat':\n      return GL.REPEAT;\n    case 'mirror-repeat':\n      return GL.MIRRORED_REPEAT;\n  }\n}\n\nfunction convertMaxFilterMode(maxFilter: 'nearest' | 'linear'): GL.NEAREST | GL.LINEAR {\n  switch (maxFilter) {\n    case 'nearest':\n      return GL.NEAREST;\n    case 'linear':\n      return GL.LINEAR;\n  }\n}\n\n/**\n * WebGPU has separate min filter and mipmap filter,\n * WebGL is combined and effectively offers 6 options\n */\nfunction convertMinFilterMode(\n  minFilter: 'nearest' | 'linear',\n  mipmapFilter: 'none' | 'nearest' | 'linear' = 'none'\n):\n  | GL.NEAREST\n  | GL.LINEAR\n  | GL.NEAREST_MIPMAP_NEAREST\n  | GL.LINEAR_MIPMAP_NEAREST\n  | GL.NEAREST_MIPMAP_LINEAR\n  | GL.LINEAR_MIPMAP_LINEAR {\n  if (!mipmapFilter) {\n    return convertMaxFilterMode(minFilter);\n  }\n  switch (mipmapFilter) {\n    case 'none':\n      return convertMaxFilterMode(minFilter);\n    case 'nearest':\n      switch (minFilter) {\n        case 'nearest':\n          return GL.NEAREST_MIPMAP_NEAREST;\n        case 'linear':\n          return GL.LINEAR_MIPMAP_NEAREST;\n      }\n      break;\n    case 'linear':\n      switch (minFilter) {\n        case 'nearest':\n          return GL.NEAREST_MIPMAP_LINEAR;\n        case 'linear':\n          return GL.LINEAR_MIPMAP_LINEAR;\n      }\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {CompareFunction, StencilOperation, BlendOperation, BlendFactor} from '@luma.gl/core';\nimport {Device, log, Parameters, PolygonMode, ProvokingVertex} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport type {\n  GLBlendEquation,\n  GLBlendFunction,\n  GLFunction,\n  GLParameters,\n  GLPolygonMode,\n  GLProvokingVertex,\n  GLStencilOp\n} from '@luma.gl/constants';\nimport {setGLParameters} from '../../context/parameters/unified-parameter-api';\nimport {WebGLDevice} from '../webgl-device';\n\n/* eslint-disable no-unused-expressions */ // For expression ? gl.enable() : gl.disable()\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceAndGLParameters<T = unknown>(\n  device: Device,\n  parameters: Parameters,\n  glParameters: GLParameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    setGLParameters(webglDevice.gl, glParameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n * @deprecated use withDeviceParameters instead\n */\nexport function withGLParameters<T = unknown>(\n  device: Device,\n  parameters: GLParameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setGLParameters(webglDevice.gl, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withDeviceParameters<T = unknown>(\n  device: Device,\n  parameters: Parameters,\n  func: (_?: Device) => T\n): T {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(device);\n  }\n\n  // Wrap in a try-catch to ensure that parameters are restored on exceptions'\n  const webglDevice = device as WebGLDevice;\n  webglDevice.pushState();\n  try {\n    setDeviceParameters(device, parameters);\n    return func(device);\n  } finally {\n    webglDevice.popState();\n  }\n}\n\n/** Set WebGPU Style Parameters */\nexport function setDeviceParameters(device: Device, parameters: Parameters) {\n  const webglDevice = device as WebGLDevice;\n  const {gl} = webglDevice;\n\n  // RASTERIZATION SETTINGS\n  if (parameters.cullMode) {\n    switch (parameters.cullMode) {\n      case 'none':\n        gl.disable(GL.CULL_FACE);\n        break;\n      case 'front':\n        gl.enable(GL.CULL_FACE);\n        gl.cullFace(GL.FRONT);\n        break;\n      case 'back':\n        gl.enable(GL.CULL_FACE);\n        gl.cullFace(GL.BACK);\n        break;\n    }\n  }\n\n  if (parameters.frontFace) {\n    gl.frontFace(\n      map('frontFace', parameters.frontFace, {\n        ccw: GL.CCW,\n        cw: GL.CW\n      })\n    );\n  }\n\n  if (parameters.unclippedDepth) {\n    if (device.features.has('depth-clip-control')) {\n      // EXT_depth_clamp\n      gl.enable(GL.DEPTH_CLAMP_EXT);\n    }\n  }\n\n  if (parameters.depthBias !== undefined) {\n    gl.enable(GL.POLYGON_OFFSET_FILL);\n    gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);\n  }\n\n  // depthBiasSlopeScale: {\n  //   // Handled by depthBias\n  // },\n\n  // WEBGL EXTENSIONS\n\n  if (parameters.provokingVertex) {\n    if (device.features.has('provoking-vertex-webgl')) {\n      const extensions = webglDevice.getExtension('WEBGL_provoking_vertex');\n      const ext = extensions.WEBGL_provoking_vertex;\n\n      const vertex = map<ProvokingVertex, GLProvokingVertex>(\n        'provokingVertex',\n        parameters.provokingVertex,\n        {\n          first: GL.FIRST_VERTEX_CONVENTION_WEBGL,\n          last: GL.LAST_VERTEX_CONVENTION_WEBGL\n        }\n      );\n      ext?.provokingVertexWEBGL(vertex);\n    }\n  }\n\n  if (parameters.polygonMode || parameters.polygonOffsetLine) {\n    if (device.features.has('polygon-mode-webgl')) {\n      if (parameters.polygonMode) {\n        const extensions = webglDevice.getExtension('WEBGL_polygon_mode');\n        const ext = extensions.WEBGL_polygon_mode;\n        const mode = map<PolygonMode, GLPolygonMode>('polygonMode', parameters.polygonMode, {\n          fill: GL.FILL_WEBGL,\n          line: GL.LINE_WEBGL\n        });\n        ext?.polygonModeWEBGL(GL.FRONT, mode);\n        ext?.polygonModeWEBGL(GL.BACK, mode);\n      }\n\n      if (parameters.polygonOffsetLine) {\n        gl.enable(GL.POLYGON_OFFSET_LINE_WEBGL);\n      }\n    }\n  }\n\n  if (device.features.has('shader-clip-cull-distance-webgl')) {\n    if (parameters.clipDistance0) {\n      gl.enable(GL.CLIP_DISTANCE0_WEBGL);\n    }\n    if (parameters.clipDistance1) {\n      gl.enable(GL.CLIP_DISTANCE1_WEBGL);\n    }\n    if (parameters.clipDistance2) {\n      gl.enable(GL.CLIP_DISTANCE2_WEBGL);\n    }\n    if (parameters.clipDistance3) {\n      gl.enable(GL.CLIP_DISTANCE3_WEBGL);\n    }\n    if (parameters.clipDistance4) {\n      gl.enable(GL.CLIP_DISTANCE4_WEBGL);\n    }\n    if (parameters.clipDistance5) {\n      gl.enable(GL.CLIP_DISTANCE5_WEBGL);\n    }\n    if (parameters.clipDistance6) {\n      gl.enable(GL.CLIP_DISTANCE6_WEBGL);\n    }\n    if (parameters.clipDistance7) {\n      gl.enable(GL.CLIP_DISTANCE7_WEBGL);\n    }\n  }\n\n  // DEPTH STENCIL\n\n  if (parameters.depthWriteEnabled !== undefined) {\n    gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));\n  }\n\n  if (parameters.depthCompare) {\n    parameters.depthCompare !== 'always' ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST);\n    gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));\n  }\n\n  if (parameters.stencilWriteMask) {\n    const mask = parameters.stencilWriteMask;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, mask);\n  }\n\n  if (parameters.stencilReadMask) {\n    // stencilReadMask is handle inside stencil***Compare.\n    log.warn('stencilReadMask not supported under WebGL');\n  }\n\n  if (parameters.stencilCompare) {\n    const mask = parameters.stencilReadMask || 0xffffffff;\n    const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);\n    // TODO - ensure back doesn't overwrite\n    parameters.stencilCompare !== 'always'\n      ? gl.enable(GL.STENCIL_TEST)\n      : gl.disable(GL.STENCIL_TEST);\n    gl.stencilFuncSeparate(GL.FRONT, glValue, 0, mask);\n    gl.stencilFuncSeparate(GL.BACK, glValue, 0, mask);\n  }\n\n  if (\n    parameters.stencilPassOperation &&\n    parameters.stencilFailOperation &&\n    parameters.stencilDepthFailOperation\n  ) {\n    const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);\n    const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);\n    const dpfail = convertStencilOperation(\n      'stencilDepthFailOperation',\n      parameters.stencilDepthFailOperation\n    );\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, sfail, dpfail, dppass);\n  }\n\n  // stencilDepthFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n\n  // stencilFailOperation() {\n  //   // handled by stencilPassOperation\n  // },\n\n  // COLOR STATE\n  switch (parameters.blend) {\n    case true:\n      gl.enable(GL.BLEND);\n      break;\n    case false:\n      gl.disable(GL.BLEND);\n      break;\n    default:\n    // leave WebGL blend state unchanged if `parameters.blend` is not set\n  }\n\n  if (parameters.blendColorOperation || parameters.blendAlphaOperation) {\n    const colorEquation = convertBlendOperationToEquation(\n      'blendColorOperation',\n      parameters.blendColorOperation || 'add'\n    );\n    const alphaEquation = convertBlendOperationToEquation(\n      'blendAlphaOperation',\n      parameters.blendAlphaOperation || 'add'\n    );\n    gl.blendEquationSeparate(colorEquation, alphaEquation);\n\n    const colorSrcFactor = convertBlendFactorToFunction(\n      'blendColorSrcFactor',\n      parameters.blendColorSrcFactor || 'one'\n    );\n    const colorDstFactor = convertBlendFactorToFunction(\n      'blendColorDstFactor',\n      parameters.blendColorDstFactor || 'zero'\n    );\n    const alphaSrcFactor = convertBlendFactorToFunction(\n      'blendAlphaSrcFactor',\n      parameters.blendAlphaSrcFactor || 'one'\n    );\n    const alphaDstFactor = convertBlendFactorToFunction(\n      'blendAlphaDstFactor',\n      parameters.blendAlphaDstFactor || 'zero'\n    );\n    gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);\n  }\n}\n\n/*\n      rasterizationState: {\n        cullMode: \"back\",\n      },\n\n      depthStencilState: {\n        depthWriteEnabled: true,\n        depthCompare: \"less\",\n        format: \"depth24plus-stencil8\",\n      },\n\n      colorStates: [\n        {\n          format: \"bgra8unorm\",\n          // colorBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // colorBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n          // alphaBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;\n          // alphaBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;\n        },\n      ],\n    });\n*/\n\nexport function convertCompareFunction(parameter: string, value: CompareFunction): GLFunction {\n  return map<CompareFunction, GLFunction>(parameter, value, {\n    never: GL.NEVER,\n    less: GL.LESS,\n    equal: GL.EQUAL,\n    'less-equal': GL.LEQUAL,\n    greater: GL.GREATER,\n    'not-equal': GL.NOTEQUAL,\n    'greater-equal': GL.GEQUAL,\n    always: GL.ALWAYS\n  });\n}\n\nexport function convertToCompareFunction(parameter: string, value: GLFunction): CompareFunction {\n  return map<GLFunction, CompareFunction>(parameter, value, {\n    [GL.NEVER]: 'never',\n    [GL.LESS]: 'less',\n    [GL.EQUAL]: 'equal',\n    [GL.LEQUAL]: 'less-equal',\n    [GL.GREATER]: 'greater',\n    [GL.NOTEQUAL]: 'not-equal',\n    [GL.GEQUAL]: 'greater-equal',\n    [GL.ALWAYS]: 'always'\n  });\n}\n\nfunction convertStencilOperation(parameter: string, value: StencilOperation): GL {\n  return map<StencilOperation, GLStencilOp>(parameter, value, {\n    keep: GL.KEEP,\n    zero: GL.ZERO,\n    replace: GL.REPLACE,\n    invert: GL.INVERT,\n    'increment-clamp': GL.INCR,\n    'decrement-clamp': GL.DECR,\n    'increment-wrap': GL.INCR_WRAP,\n    'decrement-wrap': GL.DECR_WRAP\n  });\n}\n\nfunction convertBlendOperationToEquation(\n  parameter: string,\n  value: BlendOperation\n): GLBlendEquation {\n  return map<BlendOperation, GLBlendEquation>(parameter, value, {\n    add: GL.FUNC_ADD,\n    subtract: GL.FUNC_SUBTRACT,\n    'reverse-subtract': GL.FUNC_REVERSE_SUBTRACT,\n    min: GL.MIN,\n    max: GL.MAX\n  });\n}\n\nfunction convertBlendFactorToFunction(\n  parameter: string,\n  value: BlendFactor,\n  type: 'color' | 'alpha' = 'color'\n): GLBlendFunction {\n  return map<BlendFactor, GLBlendFunction>(parameter, value, {\n    one: GL.ONE,\n    zero: GL.ZERO,\n    src: GL.SRC_COLOR,\n    'one-minus-src': GL.ONE_MINUS_SRC_COLOR,\n    dst: GL.DST_COLOR,\n    'one-minus-dst': GL.ONE_MINUS_DST_COLOR,\n    'src-alpha': GL.SRC_ALPHA,\n    'one-minus-src-alpha': GL.ONE_MINUS_SRC_ALPHA,\n    'dst-alpha': GL.DST_ALPHA,\n    'one-minus-dst-alpha': GL.ONE_MINUS_DST_ALPHA,\n    'src-alpha-saturated': GL.SRC_ALPHA_SATURATE,\n    constant: type === 'color' ? GL.CONSTANT_COLOR : GL.CONSTANT_ALPHA,\n    'one-minus-constant':\n      type === 'color' ? GL.ONE_MINUS_CONSTANT_COLOR : GL.ONE_MINUS_CONSTANT_ALPHA,\n    // 'constant-alpha': GL.CONSTANT_ALPHA,\n    // 'one-minus-constant-alpha': GL.ONE_MINUS_CONSTANT_ALPHA,\n    // TODO not supported in WebGL2\n    src1: GL.SRC_COLOR,\n    'one-minus-src1': GL.ONE_MINUS_SRC_COLOR,\n    'src1-alpha': GL.SRC_ALPHA,\n    'one-minus-src1-alpha': GL.ONE_MINUS_SRC_ALPHA\n  });\n}\n\nfunction message(parameter: string, value: any): string {\n  return `Illegal parameter ${value} for ${parameter}`;\n}\n\nfunction map<K extends string | number, V>(parameter: string, value: K, valueMap: Record<K, V>): V {\n  if (!(value in valueMap)) {\n    throw new Error(message(parameter, value));\n  }\n  return valueMap[value];\n}\n\nfunction mapBoolean(parameter: string, value: boolean): boolean {\n  return value;\n}\n\n/** Returns true if given object is empty, false otherwise. */\nfunction isObjectEmpty(obj: object): boolean {\n  let isEmpty = true;\n  // @ts-ignore key is unused\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  Device,\n  TextureProps,\n  TextureViewProps,\n  Sampler,\n  SamplerProps,\n  CopyExternalImageOptions,\n  CopyImageDataOptions,\n  TypedArray\n} from '@luma.gl/core';\nimport {Texture, log} from '@luma.gl/core';\nimport {\n  GL,\n  GLTextureTarget,\n  GLTextureCubeMapTarget,\n  GLTexelDataFormat,\n  GLPixelType,\n  // GLDataType,\n  GLSamplerParameters,\n  GLValueParameters\n} from '@luma.gl/constants';\nimport {getTextureFormatWebGL} from '../converters/webgl-texture-table';\nimport {convertSamplerParametersToWebGL} from '../converters/sampler-parameters';\nimport {withGLParameters} from '../../context/state-tracker/with-parameters';\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLSampler} from './webgl-sampler';\nimport {WEBGLTextureView} from './webgl-texture-view';\n\n/**\n * WebGL... the texture API from hell... hopefully made simpler\n */\nexport class WEBGLTexture extends Texture {\n  // readonly MAX_ATTRIBUTES: number;\n  readonly device: WebGLDevice;\n  readonly gl: WebGL2RenderingContext;\n  handle: WebGLTexture;\n\n  // @ts-ignore TODO - currently unused in WebGL. Create dummy sampler?\n  sampler: WEBGLSampler = undefined;\n  view: WEBGLTextureView;\n\n  /**\n   * The WebGL target corresponding to the texture type\n   * @note `target` cannot be modified by bind:\n   * textures are special because when you first bind them to a target,\n   * When you first bind a texture as a GL_TEXTURE_2D, you are saying that this texture is a 2D texture.\n   * And it will always be a 2D texture; this state cannot be changed ever.\n   * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;\n   * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error\n   */\n  glTarget: GLTextureTarget;\n  /** The WebGL format - essentially channel structure */\n  glFormat: GLTexelDataFormat;\n  /** The WebGL data format - the type of each channel */\n  glType: GLPixelType;\n  /** The WebGL constant corresponding to the WebGPU style constant in format */\n  glInternalFormat: GL;\n  /** Whether the internal format is compressed */\n  compressed: boolean;\n\n  // state\n  /** Texture binding slot - TODO - move to texture view? */\n  _textureUnit: number = 0;\n\n  constructor(device: Device, props: TextureProps) {\n    super(device, props);\n\n    this.device = device as WebGLDevice;\n    this.gl = this.device.gl;\n\n    const formatInfo = getTextureFormatWebGL(this.props.format);\n\n    // Note: In WebGL the texture target defines the type of texture on first bind.\n    this.glTarget = getWebGLTextureTarget(this.props.dimension);\n    this.glInternalFormat = formatInfo.internalFormat;\n    this.glFormat = formatInfo.format;\n    this.glType = formatInfo.type;\n    this.compressed = formatInfo.compressed;\n\n    this.handle = this.props.handle || this.gl.createTexture();\n    this.device._setWebGLDebugMetadata(this.handle, this, {spector: this.props});\n\n    /**\n     * Use WebGL immutable texture storage to allocate and clear texture memory.\n     * - texStorage2D should be considered a preferred alternative to texImage2D. It may have lower memory costs than texImage2D in some implementations.\n     * - Once texStorage*D has been called, the texture is immutable and can only be updated with texSubImage*(), not texImage()\n     * @see https://registry.khronos.org/webgl/specs/latest/2.0/ WebGL 2 spec section 3.7.6\n     */\n    this.gl.bindTexture(this.glTarget, this.handle);\n    const {dimension, width, height, depth, mipLevels, glTarget, glInternalFormat} = this;\n    switch (dimension) {\n      case '2d':\n      case 'cube':\n        this.gl.texStorage2D(glTarget, mipLevels, glInternalFormat, width, height);\n        break;\n      case '2d-array':\n      case '3d':\n        this.gl.texStorage3D(glTarget, mipLevels, glInternalFormat, width, height, depth);\n        break;\n      default:\n        throw new Error(dimension);\n    }\n    this.gl.bindTexture(this.glTarget, null);\n\n    // Set data\n    this._initializeData(props.data);\n\n    // Set texture sampler parameters\n    this.setSampler(this.props.sampler);\n    // @ts-ignore TODO - fix types\n    this.view = new WEBGLTextureView(this.device, {...this.props, texture: this});\n\n    Object.seal(this);\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.gl.deleteTexture(this.handle);\n      this.removeStats();\n      this.trackDeallocatedMemory('Texture');\n      // this.handle = null;\n      this.destroyed = true;\n    }\n  }\n\n  createView(props: TextureViewProps): WEBGLTextureView {\n    return new WEBGLTextureView(this.device, {...props, texture: this});\n  }\n\n  override setSampler(sampler: Sampler | SamplerProps = {}): void {\n    super.setSampler(sampler);\n    // Apply sampler parameters to texture\n    const parameters = convertSamplerParametersToWebGL(this.sampler.props);\n    this._setSamplerParameters(parameters);\n  }\n\n  copyImageData(options_: CopyImageDataOptions): void {\n    const options = this._normalizeCopyImageDataOptions(options_);\n\n    const typedArray = options.data as TypedArray;\n    const {width, height, depth} = this;\n    const {mipLevel = 0, byteOffset = 0, x = 0, y = 0, z = 0} = options;\n    const {glFormat, glType, compressed} = this;\n    const glTarget = getWebGLCubeFaceTarget(this.glTarget, this.dimension, depth);\n\n    // WebGL automatically ignores these for compressed textures, but we are careful\n    const glParameters: GLValueParameters = !this.compressed\n      ? {\n          [GL.UNPACK_ROW_LENGTH]: options.bytesPerRow,\n          [GL.UNPACK_IMAGE_HEIGHT]: options.rowsPerImage\n        }\n      : {};\n\n    this.gl.bindTexture(glTarget, this.handle);\n\n    withGLParameters(this.gl, glParameters, () => {\n      switch (this.dimension) {\n        case '2d':\n        case 'cube':\n          if (compressed) {\n            // prettier-ignore\n            this.gl.compressedTexSubImage2D(glTarget, mipLevel, x, y, width, height, glFormat, typedArray, byteOffset); // , byteLength\n          } else {\n            // prettier-ignore\n            this.gl.texSubImage2D(glTarget, mipLevel, x, y, width, height, glFormat, glType, typedArray, byteOffset); // , byteLength\n          }\n          break;\n        case '2d-array':\n        case '3d':\n          if (compressed) {\n            // prettier-ignore\n            this.gl.compressedTexSubImage3D(glTarget, mipLevel, x, y, z, width, height, depth, glFormat, typedArray, byteOffset); // , byteLength\n          } else {\n            // prettier-ignore\n            this.gl.texSubImage3D(glTarget, mipLevel, x, y, z, width, height, depth, glFormat, glType, typedArray, byteOffset); // , byteLength\n          }\n          break;\n        default:\n        // Can never happen in WebGL\n      }\n    });\n\n    this.gl.bindTexture(glTarget, null);\n  }\n\n  copyExternalImage(options_: CopyExternalImageOptions): {width: number; height: number} {\n    const options = this._normalizeCopyExternalImageOptions(options_);\n\n    if (options.sourceX || options.sourceY) {\n      // requires copyTexSubImage2D from a framebuffer'\n      throw new Error('WebGL does not support sourceX/sourceY)');\n    }\n\n    const {glFormat, glType} = this;\n    const {image, depth, mipLevel, x, y, z, width, height} = options;\n\n    // WebGL cube maps specify faces by overriding target instead of using the depth parameter\n    const glTarget = getWebGLCubeFaceTarget(this.glTarget, this.dimension, depth);\n    const glParameters: GLValueParameters = options.flipY ? {[GL.UNPACK_FLIP_Y_WEBGL]: true} : {};\n\n    this.gl.bindTexture(this.glTarget, this.handle);\n\n    withGLParameters(this.gl, glParameters, () => {\n      switch (this.dimension) {\n        case '2d':\n        case 'cube':\n          // prettier-ignore\n          this.gl.texSubImage2D(glTarget, mipLevel, x, y, width, height, glFormat, glType, image);\n          break;\n        case '2d-array':\n        case '3d':\n          // prettier-ignore\n          this.gl.texSubImage3D(glTarget, mipLevel, x, y, z, width, height, depth, glFormat, glType, image);\n          break;\n        default:\n        // Can never happen in WebGL\n      }\n    });\n\n    this.gl.bindTexture(this.glTarget, null);\n\n    return {width: options.width, height: options.height};\n  }\n\n  // WEBGL SPECIFIC\n\n  generateMipmapsWebGL(options?: {force?: boolean}): void {\n    const isFilterableAndRenderable =\n      this.device.isTextureFormatRenderable(this.props.format) &&\n      this.device.isTextureFormatFilterable(this.props.format);\n    if (!isFilterableAndRenderable) {\n      log.warn(`${this} is not renderable or filterable, may not be able to generate mipmaps`)();\n      if (!options?.force) {\n        return;\n      }\n    }\n\n    try {\n      this.gl.bindTexture(this.glTarget, this.handle);\n      this.gl.generateMipmap(this.glTarget);\n    } catch (error) {\n      log.warn(`Error generating mipmap for ${this}: ${(error as Error).message}`)();\n    } finally {\n      this.gl.bindTexture(this.glTarget, null);\n    }\n  }\n\n  // INTERNAL\n\n  /**\n   * Sets sampler parameters on texture\n   */\n  _setSamplerParameters(parameters: GLSamplerParameters): void {\n    log.log(2, `${this.id} sampler parameters`, this.device.getGLKeys(parameters))();\n\n    this.gl.bindTexture(this.glTarget, this.handle);\n\n    for (const [pname, pvalue] of Object.entries(parameters)) {\n      const param = Number(pname) as keyof GLSamplerParameters;\n      const value = pvalue;\n\n      // Apparently integer/float issues require two different texture parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      switch (param) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.gl.texParameterf(this.glTarget, param, value);\n          break;\n\n        case GL.TEXTURE_MAG_FILTER:\n        case GL.TEXTURE_MIN_FILTER:\n          this.gl.texParameteri(this.glTarget, param, value);\n          break;\n\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n        case GL.TEXTURE_WRAP_R:\n          this.gl.texParameteri(this.glTarget, param, value);\n          break;\n\n        case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n          // We have to query feature before using it\n          if (this.device.features.has('texture-filterable-anisotropic-webgl')) {\n            this.gl.texParameteri(this.glTarget, param, value);\n          }\n          break;\n\n        case GL.TEXTURE_COMPARE_MODE:\n        case GL.TEXTURE_COMPARE_FUNC:\n          this.gl.texParameteri(this.glTarget, param, value);\n          break;\n      }\n    }\n\n    this.gl.bindTexture(this.glTarget, null);\n  }\n  _getActiveUnit(): number {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  _bind(_textureUnit?: number): number {\n    const {gl} = this;\n\n    if (_textureUnit !== undefined) {\n      this._textureUnit = _textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + _textureUnit);\n    }\n\n    gl.bindTexture(this.glTarget, this.handle);\n    // @ts-ignore TODO fix types\n    return _textureUnit;\n  }\n\n  _unbind(_textureUnit?: number): number | undefined {\n    const {gl} = this;\n\n    if (_textureUnit !== undefined) {\n      this._textureUnit = _textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + _textureUnit);\n    }\n\n    gl.bindTexture(this.glTarget, null);\n    return _textureUnit;\n  }\n}\n\n// INTERNAL HELPERS\n\n/** Convert a WebGPU style texture constant to a WebGL style texture constant */\nexport function getWebGLTextureTarget(\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d'\n): GLTextureTarget {\n  // prettier-ignore\n  switch (dimension) {\n    case '1d': break; // not supported in any WebGL version\n    case '2d': return GL.TEXTURE_2D; // supported in WebGL1\n    case '3d': return GL.TEXTURE_3D; // supported in WebGL2\n    case 'cube': return GL.TEXTURE_CUBE_MAP; // supported in WebGL1\n    case '2d-array': return GL.TEXTURE_2D_ARRAY; // supported in WebGL2\n    case 'cube-array': break; // not supported in any WebGL version\n  }\n  throw new Error(dimension);\n}\n\n/**\n * In WebGL, cube maps specify faces by overriding target instead of using the depth parameter.\n * @note We still bind the texture using GL.TEXTURE_CUBE_MAP, but we need to use the face-specific target when setting mip levels.\n * @returns glTarget unchanged, if dimension !== 'cube'.\n */\nexport function getWebGLCubeFaceTarget(\n  glTarget: GLTextureTarget,\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d',\n  level: number\n): GLTextureTarget | GLTextureCubeMapTarget {\n  return dimension === 'cube' ? GL.TEXTURE_CUBE_MAP_POSITIVE_X + level : glTarget;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GLParameters, setGLParameters} from '../parameters/unified-parameter-api';\nimport {WebGLStateTracker} from './webgl-state-tracker';\n\n/**\n * Execute a function with a set of temporary WebGL parameter overrides\n * - Saves current \"global\" WebGL context settings\n * - Sets the supplies WebGL context parameters,\n * - Executes supplied function\n * - Restores parameters\n * - Returns the return value of the supplied function\n */\nexport function withGLParameters(\n  gl: WebGL2RenderingContext,\n  parameters: GLParameters & {nocatch?: boolean},\n  func: any\n): any {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  const webglState = WebGLStateTracker.get(gl);\n  webglState.push();\n  setGLParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    webglState.pop();\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      webglState.pop();\n    }\n  }\n\n  return value;\n}\n\n// Helpers\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object: unknown): boolean {\n  // @ts-ignore - dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {Device, TextureViewProps} from '@luma.gl/core';\n// import {getTextureFormatInfo} from '@luma.gl/core';\nimport {TextureView, Texture} from '@luma.gl/core';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLTexture} from './webgl-texture';\n\nexport class WEBGLTextureView extends TextureView {\n  readonly device: WebGLDevice;\n  readonly gl: WebGL2RenderingContext;\n  readonly handle: null; // Does not have a WebGL representation\n  readonly texture: WEBGLTexture;\n\n  constructor(device: Device, props: TextureViewProps & {texture: WEBGLTexture}) {\n    super(device, {...Texture.defaultProps, ...props});\n\n    this.device = device as WebGLDevice;\n    this.gl = this.device.gl;\n    this.handle = null;\n    this.texture = props.texture;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  RenderPipelineProps,\n  RenderPipelineParameters,\n  PrimitiveTopology,\n  ShaderLayout,\n  UniformValue,\n  Binding,\n  RenderPass,\n  VertexArray\n} from '@luma.gl/core';\nimport {RenderPipeline, log} from '@luma.gl/core';\n// import {getAttributeInfosFromLayouts} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\n\nimport {getShaderLayoutFromGLSL} from '../helpers/get-shader-layout-from-glsl';\nimport {withDeviceAndGLParameters} from '../converters/device-parameters';\nimport {setUniform} from '../helpers/set-uniform';\n// import {copyUniform, checkUniformValues} from '../../classes/uniforms';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from './webgl-buffer';\nimport {WEBGLShader} from './webgl-shader';\nimport {WEBGLFramebuffer} from './webgl-framebuffer';\nimport {WEBGLTexture} from './webgl-texture';\nimport {WEBGLTextureView} from './webgl-texture-view';\nimport {WEBGLRenderPass} from './webgl-render-pass';\nimport {WEBGLTransformFeedback} from './webgl-transform-feedback';\nimport {getGLDrawMode} from '../helpers/webgl-topology-utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n/** Creates a new render pipeline */\nexport class WEBGLRenderPipeline extends RenderPipeline {\n  /** The WebGL device that created this render pipeline */\n  readonly device: WebGLDevice;\n  /** Handle to underlying WebGL program */\n  readonly handle: WebGLProgram;\n  /** vertex shader */\n  vs: WEBGLShader;\n  /** fragment shader */\n  fs: WEBGLShader;\n  /** The layout extracted from shader by WebGL introspection APIs */\n  introspectedLayout: ShaderLayout;\n\n  /** Uniforms set on this model */\n  uniforms: Record<string, UniformValue> = {};\n  /** Bindings set on this model */\n  bindings: Record<string, Binding> = {};\n  /** WebGL varyings */\n  varyings: string[] | null = null;\n\n  _uniformCount: number = 0;\n  _uniformSetters: Record<string, Function> = {}; // TODO are these used?\n\n  override get [Symbol.toStringTag]() {\n    return 'WEBGLRenderPipeline';\n  }\n\n  constructor(device: WebGLDevice, props: RenderPipelineProps) {\n    super(device, props);\n    this.device = device;\n    this.handle = this.props.handle || this.device.gl.createProgram();\n    this.device._setWebGLDebugMetadata(this.handle, this, {spector: {id: this.props.id}});\n\n    // Create shaders if needed\n    this.vs = props.vs as WEBGLShader;\n    this.fs = props.fs as WEBGLShader;\n    // assert(this.vs.stage === 'vertex');\n    // assert(this.fs.stage === 'fragment');\n\n    // Setup varyings if supplied\n    // @ts-expect-error WebGL only\n    const {varyings, bufferMode = GL.SEPARATE_ATTRIBS} = props;\n    if (varyings && varyings.length > 0) {\n      this.varyings = varyings;\n      this.device.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._linkShaders();\n    log.time(3, `RenderPipeline ${this.id} - shaderLayout introspection`)();\n    this.introspectedLayout = getShaderLayoutFromGLSL(this.device.gl, this.handle);\n    log.timeEnd(3, `RenderPipeline ${this.id} - shaderLayout introspection`)();\n\n    // Merge provided layout with introspected layout\n    this.shaderLayout = props.shaderLayout\n      ? mergeShaderLayout(this.introspectedLayout, props.shaderLayout)\n      : this.introspectedLayout;\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      // log.error(`Deleting program ${this.id}`)();\n      this.device.gl.useProgram(null);\n      this.device.gl.deleteProgram(this.handle);\n      this.destroyed = true;\n      // @ts-expect-error\n      this.handle.destroyed = true;\n      // @ts-ignore\n      this.handle = null;\n    }\n  }\n\n  /**\n   * Bindings include: textures, samplers and uniform buffers\n   * @todo needed for portable model\n   */\n  setBindings(bindings: Record<string, Binding>, options?: {disableWarnings?: boolean}): void {\n    // if (log.priority >= 2) {\n    //   checkUniformValues(uniforms, this.id, this._uniformSetters);\n    // }\n\n    for (const [name, value] of Object.entries(bindings)) {\n      // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block\n      // This convention allows shaders to name uniform blocks as `uniform appUniforms {} app;`\n      // and reference them as `app` from both GLSL and JS.\n      // TODO - this is rather hacky - we could also remap the name directly in the shader layout.\n      const binding =\n        this.shaderLayout.bindings.find(binding_ => binding_.name === name) ||\n        this.shaderLayout.bindings.find(binding_ => binding_.name === `${name}Uniforms`);\n\n      if (!binding) {\n        const validBindings = this.shaderLayout.bindings\n          .map(binding_ => `\"${binding_.name}\"`)\n          .join(', ');\n        if (!options?.disableWarnings) {\n          log.warn(\n            `No binding \"${name}\" in render pipeline \"${this.id}\", expected one of ${validBindings}`,\n            value\n          )();\n        }\n        continue; // eslint-disable-line no-continue\n      }\n      if (!value) {\n        log.warn(`Unsetting binding \"${name}\" in render pipeline \"${this.id}\"`)();\n      }\n      switch (binding.type) {\n        case 'uniform':\n          // @ts-expect-error\n          if (!(value instanceof WEBGLBuffer) && !(value.buffer instanceof WEBGLBuffer)) {\n            throw new Error('buffer value');\n          }\n          break;\n        case 'texture':\n          if (\n            !(\n              value instanceof WEBGLTextureView ||\n              value instanceof WEBGLTexture ||\n              value instanceof WEBGLFramebuffer\n            )\n          ) {\n            throw new Error(`${this} Bad texture binding for ${name}`);\n          }\n          break;\n        case 'sampler':\n          log.warn(`Ignoring sampler ${name}`)();\n          break;\n        default:\n          throw new Error(binding.type);\n      }\n\n      this.bindings[name] = value;\n    }\n  }\n\n  /** @todo needed for portable model\n   * @note The WebGL API is offers many ways to draw things\n   * This function unifies those ways into a single call using common parameters with sane defaults\n   */\n  draw(options: {\n    renderPass: RenderPass;\n    parameters?: RenderPipelineParameters;\n    topology?: PrimitiveTopology;\n    vertexArray: VertexArray;\n    isInstanced?: boolean;\n    vertexCount?: number;\n    indexCount?: number;\n    instanceCount?: number;\n    firstVertex?: number;\n    firstIndex?: number;\n    firstInstance?: number;\n    baseVertex?: number;\n    transformFeedback?: WEBGLTransformFeedback;\n  }): boolean {\n    const {\n      renderPass,\n      parameters = this.props.parameters,\n      topology = this.props.topology,\n      vertexArray,\n      vertexCount,\n      // indexCount,\n      instanceCount,\n      isInstanced = false,\n      firstVertex = 0,\n      // firstIndex,\n      // firstInstance,\n      // baseVertex,\n      transformFeedback\n    } = options;\n\n    const glDrawMode = getGLDrawMode(topology);\n    const isIndexed: boolean = Boolean(vertexArray.indexBuffer);\n    const glIndexType = (vertexArray.indexBuffer as WEBGLBuffer)?.glIndexType;\n    // Note that we sometimes get called with 0 instances\n\n    // If we are using async linking, we need to wait until linking completes\n    if (this.linkStatus !== 'success') {\n      log.info(2, `RenderPipeline:${this.id}.draw() aborted - waiting for shader linking`)();\n      return false;\n    }\n\n    // Avoid WebGL draw call when not rendering any data or values are incomplete\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      log.info(2, `RenderPipeline:${this.id}.draw() aborted - textures not yet loaded`)();\n      //  Note: false means that the app needs to redraw the pipeline again.\n      return false;\n    }\n\n    // (isInstanced && instanceCount === 0)\n    // if (vertexCount === 0) {\n    //   log.info(2, `RenderPipeline:${this.id}.draw() aborted - no vertices to draw`)();\n    //   Note: false means that the app needs to redraw the pipeline again.\n    //   return true;\n    // }\n\n    this.device.gl.useProgram(this.handle);\n\n    // Note: Rebinds constant attributes before each draw call\n    vertexArray.bindBeforeRender(renderPass);\n\n    if (transformFeedback) {\n      transformFeedback.begin(this.props.topology);\n    }\n\n    // We have to apply bindings before every draw call since other draw calls will overwrite\n    this._applyBindings();\n    this._applyUniforms();\n\n    const webglRenderPass = renderPass as WEBGLRenderPass;\n\n    withDeviceAndGLParameters(this.device, parameters, webglRenderPass.glParameters, () => {\n      if (isIndexed && isInstanced) {\n        this.device.gl.drawElementsInstanced(\n          glDrawMode,\n          vertexCount || 0, // indexCount?\n          glIndexType,\n          firstVertex,\n          instanceCount || 0\n        );\n        // } else if (isIndexed && this.device.isWebGL2 && !isNaN(start) && !isNaN(end)) {\n        //   this.device.gldrawRangeElements(glDrawMode, start, end, vertexCount, glIndexType, offset);\n      } else if (isIndexed) {\n        this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex); // indexCount?\n      } else if (isInstanced) {\n        this.device.gl.drawArraysInstanced(\n          glDrawMode,\n          firstVertex,\n          vertexCount || 0,\n          instanceCount || 0\n        );\n      } else {\n        this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);\n      }\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    vertexArray.unbindAfterRender(renderPass);\n\n    return true;\n  }\n\n  // PRIVATE METHODS\n\n  // setAttributes(attributes: Record<string, Buffer>): void {}\n  // setBindings(bindings: Record<string, Binding>): void {}\n\n  protected async _linkShaders() {\n    const {gl} = this.device;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();\n\n    // TODO Avoid checking program linking error in production\n    if (log.level === 0) {\n      // return;\n    }\n\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      const status = this._getLinkStatus();\n      this._reportLinkStatus(status);\n      return;\n    }\n\n    // async case\n    log.once(1, 'RenderPipeline linking is asynchronous')();\n    await this._waitForLinkComplete();\n    log.info(2, `RenderPipeline ${this.id} - async linking complete: ${this.linkStatus}`)();\n    const status = this._getLinkStatus();\n    this._reportLinkStatus(status);\n  }\n\n  /** Report link status. First, check for shader compilation failures if linking fails */\n  async _reportLinkStatus(status: 'success' | 'link-error' | 'validation-error'): Promise<void> {\n    switch (status) {\n      case 'success':\n        return;\n\n      default:\n        const errorType = status === 'link-error' ? 'Link error' : 'Validation error';\n        // First check for shader compilation failures if linking fails\n        switch (this.vs.compilationStatus) {\n          case 'error':\n            this.vs.debugShader();\n            throw new Error(`${this} ${errorType} during compilation of ${this.vs}`);\n          case 'pending':\n            await this.vs.asyncCompilationStatus;\n            this.vs.debugShader();\n            break;\n          case 'success':\n            break;\n        }\n\n        switch (this.fs?.compilationStatus) {\n          case 'error':\n            this.fs.debugShader();\n            throw new Error(`${this} ${errorType} during compilation of ${this.fs}`);\n          case 'pending':\n            await this.fs.asyncCompilationStatus;\n            this.fs.debugShader();\n            break;\n          case 'success':\n            break;\n        }\n\n        const linkErrorLog = this.device.gl.getProgramInfoLog(this.handle);\n        this.device.reportError(\n          new Error(`${errorType} during ${status}: ${linkErrorLog}`),\n          this\n        )();\n        this.device.debug();\n    }\n  }\n\n  /**\n   * Get the shader compilation status\n   * TODO - Load log even when no error reported, to catch warnings?\n   * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n   */\n  _getLinkStatus(): 'success' | 'link-error' | 'validation-error' {\n    const {gl} = this.device;\n    const linked = gl.getProgramParameter(this.handle, GL.LINK_STATUS);\n    if (!linked) {\n      this.linkStatus = 'error';\n      return 'link-error';\n    }\n\n    gl.validateProgram(this.handle);\n    const validated = gl.getProgramParameter(this.handle, GL.VALIDATE_STATUS);\n    if (!validated) {\n      this.linkStatus = 'error';\n      return 'validation-error';\n    }\n\n    this.linkStatus = 'success';\n    return 'success';\n  }\n\n  /** Use KHR_parallel_shader_compile extension if available */\n  async _waitForLinkComplete(): Promise<void> {\n    const waitMs = async (ms: number) => await new Promise(resolve => setTimeout(resolve, ms));\n    const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)\n\n    // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking\n    if (!this.device.features.has('compilation-status-async-webgl')) {\n      await waitMs(DELAY_MS);\n      return;\n    }\n\n    const {gl} = this.device;\n    for (;;) {\n      const complete = gl.getProgramParameter(this.handle, GL.COMPLETION_STATUS_KHR);\n      if (complete) {\n        return;\n      }\n      await waitMs(DELAY_MS);\n    }\n  }\n\n  /**\n   * Checks if all texture-values uniforms are renderable (i.e. loaded)\n   * Update a texture if needed (e.g. from video)\n   * Note: This is currently done before every draw call\n   */\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const bindingInfo of this.shaderLayout.bindings) {\n      if (\n        !this.bindings[bindingInfo.name] &&\n        !this.bindings[bindingInfo.name.replace(/Uniforms$/, '')]\n      ) {\n        log.warn(`Binding ${bindingInfo.name} not found in ${this.id}`)();\n        texturesRenderable = false;\n      }\n    }\n\n    // TODO - remove this should be handled by ExternalTexture\n    // for (const [, texture] of Object.entries(this.bindings)) {\n    //   if (texture instanceof WEBGLTexture) {\n    //     texture.update();\n    //   }\n    // }\n\n    return texturesRenderable;\n  }\n\n  /** Apply any bindings (before each draw call) */\n  _applyBindings() {\n    // If we are using async linking, we need to wait until linking completes\n    if (this.linkStatus !== 'success') {\n      return;\n    }\n\n    const {gl} = this.device;\n    gl.useProgram(this.handle);\n\n    let textureUnit = 0;\n    let uniformBufferIndex = 0;\n    for (const binding of this.shaderLayout.bindings) {\n      // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block\n      const value =\n        this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, '')];\n      if (!value) {\n        throw new Error(`No value for binding ${binding.name} in ${this.id}`);\n      }\n      switch (binding.type) {\n        case 'uniform':\n          // Set buffer\n          const {name} = binding;\n          const location = gl.getUniformBlockIndex(this.handle, name);\n          if ((location as GL) === GL.INVALID_INDEX) {\n            throw new Error(`Invalid uniform block name ${name}`);\n          }\n          gl.uniformBlockBinding(this.handle, uniformBufferIndex, location);\n          // console.debug(binding, location);\n          if (value instanceof WEBGLBuffer) {\n            gl.bindBufferBase(GL.UNIFORM_BUFFER, uniformBufferIndex, value.handle);\n          } else {\n            gl.bindBufferRange(\n              GL.UNIFORM_BUFFER,\n              uniformBufferIndex,\n              // @ts-expect-error\n              value.buffer.handle,\n              // @ts-expect-error\n              value.offset || 0,\n              // @ts-expect-error\n              value.size || value.buffer.byteLength - value.offset\n            );\n          }\n          uniformBufferIndex += 1;\n          break;\n\n        case 'texture':\n          if (\n            !(\n              value instanceof WEBGLTextureView ||\n              value instanceof WEBGLTexture ||\n              value instanceof WEBGLFramebuffer\n            )\n          ) {\n            throw new Error('texture');\n          }\n          let texture: WEBGLTexture;\n          if (value instanceof WEBGLTextureView) {\n            texture = value.texture;\n          } else if (value instanceof WEBGLTexture) {\n            texture = value;\n          } else if (\n            value instanceof WEBGLFramebuffer &&\n            value.colorAttachments[0] instanceof WEBGLTextureView\n          ) {\n            log.warn(\n              'Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead'\n            )();\n            texture = value.colorAttachments[0].texture;\n          } else {\n            throw new Error('No texture');\n          }\n\n          gl.activeTexture(GL.TEXTURE0 + textureUnit);\n          gl.bindTexture(texture.glTarget, texture.handle);\n          // gl.bindSampler(textureUnit, sampler.handle);\n          textureUnit += 1;\n          break;\n\n        case 'sampler':\n          // ignore\n          break;\n\n        case 'storage':\n        case 'read-only-storage':\n          throw new Error(`binding type '${binding.type}' not supported in WebGL`);\n      }\n    }\n  }\n\n  /**\n   * Due to program sharing, uniforms need to be reset before every draw call\n   * (though caching will avoid redundant WebGL calls)\n   */\n  _applyUniforms() {\n    for (const uniformLayout of this.shaderLayout.uniforms || []) {\n      const {name, location, type, textureUnit} = uniformLayout;\n      const value = this.uniforms[name] ?? textureUnit;\n      if (value !== undefined) {\n        setUniform(this.device.gl, location, type, value);\n      }\n    }\n  }\n}\n\n/**\n * Merges an provided shader layout into a base shader layout\n * In WebGL, this allows the auto generated shader layout to be overridden by the application\n * Typically to change the format of the vertex attributes (from float32x4 to uint8x4 etc).\n * @todo Drop this? Aren't all use cases covered by mergeBufferLayout()?\n */\nfunction mergeShaderLayout(baseLayout: ShaderLayout, overrideLayout: ShaderLayout): ShaderLayout {\n  // Deep clone the base layout\n  const mergedLayout: ShaderLayout = {\n    ...baseLayout,\n    attributes: baseLayout.attributes.map(attribute => ({...attribute}))\n  };\n  // Merge the attributes\n  for (const attribute of overrideLayout?.attributes || []) {\n    const baseAttribute = mergedLayout.attributes.find(attr => attr.name === attribute.name);\n    if (!baseAttribute) {\n      log.warn(`shader layout attribute ${attribute.name} not present in shader`);\n    } else {\n      baseAttribute.type = attribute.type || baseAttribute.type;\n      baseAttribute.stepMode = attribute.stepMode || baseAttribute.stepMode;\n    }\n  }\n  return mergedLayout;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  ShaderLayout,\n  UniformBinding,\n  UniformBlockBinding,\n  AttributeDeclaration,\n  VaryingBinding,\n  AttributeShaderType\n} from '@luma.gl/core';\nimport {getVariableShaderTypeInfo} from '@luma.gl/core';\n\nimport {GL, GLUniformType} from '@luma.gl/constants';\nimport {\n  isGLSamplerType,\n  getTextureBindingFromGLSamplerType,\n  convertGLUniformTypeToShaderVariableType\n} from '../converters/webgl-shadertypes';\n\n/**\n * Extract metadata describing binding information for a program's shaders\n * Note: `linkProgram()` needs to have been called\n * (although linking does not need to have been successful).\n */\nexport function getShaderLayoutFromGLSL(\n  gl: WebGL2RenderingContext,\n  program: WebGLProgram\n): ShaderLayout {\n  const shaderLayout: ShaderLayout = {\n    attributes: [],\n    bindings: []\n  };\n\n  shaderLayout.attributes = readAttributeDeclarations(gl, program);\n\n  // Uniform blocks\n  const uniformBlocks: UniformBlockBinding[] = readUniformBlocks(gl, program);\n  for (const uniformBlock of uniformBlocks) {\n    const uniforms = uniformBlock.uniforms.map(uniform => ({\n      name: uniform.name,\n      format: uniform.format,\n      byteOffset: uniform.byteOffset,\n      byteStride: uniform.byteStride,\n      arrayLength: uniform.arrayLength\n    }));\n    shaderLayout.bindings.push({\n      type: 'uniform',\n      name: uniformBlock.name,\n      group: 0,\n      location: uniformBlock.location,\n      visibility: (uniformBlock.vertex ? 0x1 : 0) & (uniformBlock.fragment ? 0x2 : 0),\n      minBindingSize: uniformBlock.byteLength,\n      uniforms\n    });\n  }\n\n  const uniforms: UniformBinding[] = readUniformBindings(gl, program);\n  let textureUnit = 0;\n  for (const uniform of uniforms) {\n    if (isGLSamplerType(uniform.type)) {\n      const {viewDimension, sampleType} = getTextureBindingFromGLSamplerType(uniform.type);\n      shaderLayout.bindings.push({\n        type: 'texture',\n        name: uniform.name,\n        group: 0,\n        location: textureUnit,\n        viewDimension,\n        sampleType\n      });\n\n      // @ts-expect-error\n      uniform.textureUnit = textureUnit;\n      textureUnit += 1;\n    }\n  }\n\n  if (uniforms.length) {\n    shaderLayout.uniforms = uniforms;\n  }\n\n  // Varyings\n  const varyings: VaryingBinding[] = readVaryings(gl, program);\n  // Note - samplers are always in unform bindings, even if uniform blocks are used\n  if (varyings?.length) {\n    shaderLayout.varyings = varyings;\n  }\n\n  return shaderLayout;\n}\n\n// HELPERS\n\n/**\n * Extract info about all transform feedback varyings\n *\n * linkProgram needs to have been called, although linking does not need to have been successful\n */\nfunction readAttributeDeclarations(\n  gl: WebGL2RenderingContext,\n  program: WebGLProgram\n): AttributeDeclaration[] {\n  const attributes: AttributeDeclaration[] = [];\n\n  const count = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (let index = 0; index < count; index++) {\n    const activeInfo = gl.getActiveAttrib(program, index);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name, type: compositeType /* , size*/} = activeInfo;\n    const location = gl.getAttribLocation(program, name);\n    // Add only user provided attributes, for built-in attributes like `gl_InstanceID` location will be < 0\n    if (location >= 0) {\n      const attributeType = convertGLUniformTypeToShaderVariableType(compositeType);\n\n      // Whether an attribute is instanced is essentially fixed by the structure of the shader code,\n      // so it is arguably a static property of the shader.\n      // There is no hint in the shader declarations\n      // Heuristic: Any attribute name containing the word \"instance\" will be assumed to be instanced\n      const stepMode = /instance/i.test(name) ? 'instance' : 'vertex';\n\n      attributes.push({\n        name,\n        location,\n        stepMode,\n        type: attributeType as AttributeShaderType\n        // size - for arrays, size is the number of elements in the array\n      });\n    }\n  }\n\n  // Sort by declaration order\n  attributes.sort((a: AttributeDeclaration, b: AttributeDeclaration) => a.location - b.location);\n  return attributes;\n}\n\n/**\n * Extract info about all transform feedback varyings\n *\n * linkProgram needs to have been called, although linking does not need to have been successful\n */\nfunction readVaryings(gl: WebGL2RenderingContext, program: WebGLProgram): VaryingBinding[] {\n  const varyings: VaryingBinding[] = [];\n\n  const count = gl.getProgramParameter(program, GL.TRANSFORM_FEEDBACK_VARYINGS);\n  for (let location = 0; location < count; location++) {\n    const activeInfo = gl.getTransformFeedbackVarying(program, location);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name, type: glUniformType, size} = activeInfo;\n    const uniformType = convertGLUniformTypeToShaderVariableType(glUniformType as GLUniformType);\n    const {type, components} = getVariableShaderTypeInfo(uniformType);\n    varyings.push({location, name, type, size: size * components});\n  }\n\n  varyings.sort((a, b) => a.location - b.location);\n  return varyings;\n}\n\n/**\n * Extract info about all uniforms\n *\n * Query uniform locations and build name to setter map.\n */\nfunction readUniformBindings(gl: WebGL2RenderingContext, program: WebGLProgram): UniformBinding[] {\n  const uniforms: UniformBinding[] = [];\n\n  const uniformCount = gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS);\n  for (let i = 0; i < uniformCount; i++) {\n    const activeInfo = gl.getActiveUniform(program, i);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name: rawName, size, type} = activeInfo;\n    const {name, isArray} = parseUniformName(rawName);\n    let webglLocation = gl.getUniformLocation(program, name);\n    const uniformInfo = {\n      // WebGL locations are uniquely typed but just numbers\n      location: webglLocation as number,\n      name,\n      size,\n      type,\n      isArray\n    };\n    uniforms.push(uniformInfo);\n\n    // Array (e.g. matrix) uniforms can occupy several 4x4 byte banks\n    if (uniformInfo.size > 1) {\n      for (let j = 0; j < uniformInfo.size; j++) {\n        const elementName = `${name}[${j}]`;\n\n        webglLocation = gl.getUniformLocation(program, elementName);\n\n        const arrayElementUniformInfo = {\n          ...uniformInfo,\n          name: elementName,\n          location: webglLocation as number\n        };\n\n        uniforms.push(arrayElementUniformInfo);\n      }\n    }\n  }\n  return uniforms;\n}\n\n/**\n * Extract info about all \"active\" uniform blocks\n * @note In WebGL, \"active\" just means that unused (inactive) blocks may have been optimized away during linking)\n */\nfunction readUniformBlocks(\n  gl: WebGL2RenderingContext,\n  program: WebGLProgram\n): UniformBlockBinding[] {\n  const getBlockParameter = (blockIndex: number, pname: GL): any =>\n    gl.getActiveUniformBlockParameter(program, blockIndex, pname);\n\n  const uniformBlocks: UniformBlockBinding[] = [];\n\n  const blockCount = gl.getProgramParameter(program, GL.ACTIVE_UNIFORM_BLOCKS);\n  for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {\n    const blockInfo: UniformBlockBinding = {\n      name: gl.getActiveUniformBlockName(program, blockIndex) || '',\n      location: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_BINDING),\n      byteLength: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_DATA_SIZE),\n      vertex: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      fragment: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      uniformCount: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS),\n      uniforms: [] as any[]\n    };\n\n    const uniformIndices =\n      (getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES) as number[]) || [];\n\n    const uniformType = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_TYPE); // Array of GLenum indicating the types of the uniforms.\n    const uniformArrayLength = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_SIZE); // Array of GLuint indicating the sizes of the uniforms.\n    // const uniformBlockIndex = gl.getActiveUniforms(\n    //   program,\n    //   uniformIndices,\n    //   GL.UNIFORM_BLOCK_INDEX\n    // ); // Array of GLint indicating the block indices of the uniforms.\n    const uniformOffset = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_OFFSET); // Array of GLint indicating the uniform buffer offsets.\n    const uniformStride = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_ARRAY_STRIDE); // Array of GLint indicating the strides between the elements.\n    // const uniformMatrixStride = gl.getActiveUniforms(\n    //   program,\n    //   uniformIndices,\n    //   GL.UNIFORM_MATRIX_STRIDE\n    // ); // Array of GLint indicating the strides between columns of a column-major matrix or a row-major matrix.\n    // const uniformRowMajor = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_IS_ROW_MAJOR);\n    for (let i = 0; i < blockInfo.uniformCount; ++i) {\n      const activeInfo = gl.getActiveUniform(program, uniformIndices[i]);\n      if (!activeInfo) {\n        throw new Error('activeInfo');\n      }\n\n      const format = convertGLUniformTypeToShaderVariableType(uniformType[i]);\n\n      blockInfo.uniforms.push({\n        name: activeInfo.name,\n        format,\n        type: uniformType[i],\n        arrayLength: uniformArrayLength[i],\n        byteOffset: uniformOffset[i],\n        byteStride: uniformStride[i]\n        // matrixStride: uniformStride[i],\n        // rowMajor: uniformRowMajor[i]\n      });\n    }\n\n    uniformBlocks.push(blockInfo);\n  }\n\n  uniformBlocks.sort((a, b) => a.location - b.location);\n  return uniformBlocks;\n}\n\n/**\n * TOOD - compare with a above, confirm copy, then delete\n  const bindings: Binding[] = [];\n  const count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n  for (let blockIndex = 0; blockIndex < count; blockIndex++) {\n    const vertex = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n    const fragment = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n    const visibility = (vertex) + (fragment);\n    const binding: BufferBinding = {\n      location: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_BINDING),\n      // name: gl.getActiveUniformBlockName(program, blockIndex),\n      type: 'uniform',\n      visibility,\n      minBindingSize: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE),\n      // uniformCount: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS),\n      // uniformIndices: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    }\n    bindings.push(binding);\n  }\n*/\n\n// HELPERS\n\nfunction parseUniformName(name: string): {name: string; length: number; isArray: boolean} {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = UNIFORM_NAME_REGEXP.exec(name);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] ? 1 : 0,\n    isArray: Boolean(matches[2])\n  };\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {VariableShaderType, SignedDataType, VertexFormat, NormalizedDataType} from '@luma.gl/core';\nimport {GL, GLUniformType, GLSamplerType, GLDataType} from '@luma.gl/constants';\n\nexport type TextureBindingInfo = {\n  viewDimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  sampleType: 'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint';\n};\n\n/** Converts to a luma shadertype to a GL data type (GL.BYTE, GL.FLOAT32 etc)  */\nexport function convertDataTypeToGLDataType(normalizedType: NormalizedDataType): GLDataType {\n  return NORMALIZED_SHADER_TYPE_TO_WEBGL[normalizedType];\n}\n\n/** Converts to a luma shadertype to a GL data type (GL.BYTE, GL.FLOAT32 etc)  */\nexport function convertShaderVariableTypeToGLDataType(\n  normalizedType: VariableShaderType\n): GLDataType {\n  // @ts-ignore TODO\n  return NORMALIZED_SHADER_TYPE_TO_WEBGL[normalizedType];\n}\n\n/** Convert a WebGL \"compisite type (e.g. GL.VEC3) into the corresponding luma shader uniform type */\nexport function convertGLUniformTypeToShaderVariableType(\n  glUniformType: GLUniformType\n): VariableShaderType {\n  return WEBGL_SHADER_TYPES[glUniformType];\n}\n\n/** Check if a WebGL \"uniform:\" is a texture binding */\nexport function isGLSamplerType(type: GLUniformType | GLSamplerType): type is GLSamplerType {\n  // @ts-ignore TODO\n  return Boolean(WEBGL_SAMPLER_TO_TEXTURE_BINDINGS[type]);\n}\n\n/* Get luma texture binding info (viewDimension and sampleType) from a WebGL \"sampler\" binding */\nexport function getTextureBindingFromGLSamplerType(\n  glSamplerType: GLSamplerType\n): TextureBindingInfo {\n  return WEBGL_SAMPLER_TO_TEXTURE_BINDINGS[glSamplerType];\n}\n\n/** Get vertex format from GL constants */\nexport function getVertexFormatFromGL(type: GLDataType, components: 1 | 2 | 3 | 4): VertexFormat {\n  const base = getVertexTypeFromGL(type);\n  // prettier-ignore\n  switch (components) {\n    case 1: return base;\n    case 2: return `${base}x2`;\n    // @ts-expect-error - deal with lack of \"unaligned\" formats\n    case 3: return `${base}x3`;\n    case 4: return `${base}x4`;\n  }\n  // @ts-ignore unreachable\n  throw new Error(String(components));\n}\n\n/** Get data type from GL constants */\nexport function getVertexTypeFromGL(glType: GLDataType, normalized = false): NormalizedDataType {\n  const index = normalized ? 1 : 0;\n  return WEBGL_TO_NORMALIZED_DATA_TYPE[glType][index];\n}\n\n// Composite types table\n// @ts-ignore TODO - fix the type confusion here\nconst WEBGL_SHADER_TYPES: Record<GLUniformType, VariableShaderType> = {\n  [GL.FLOAT]: 'f32',\n  [GL.FLOAT_VEC2]: 'vec2<f32>',\n  [GL.FLOAT_VEC3]: 'vec3<f32>',\n  [GL.FLOAT_VEC4]: 'vec4<f32>',\n\n  [GL.INT]: 'i32',\n  [GL.INT_VEC2]: 'vec2<i32>',\n  [GL.INT_VEC3]: 'vec3<i32>',\n  [GL.INT_VEC4]: 'vec4<i32>',\n\n  [GL.UNSIGNED_INT]: 'u32',\n  [GL.UNSIGNED_INT_VEC2]: 'vec2<u32>',\n  [GL.UNSIGNED_INT_VEC3]: 'vec3<u32>',\n  [GL.UNSIGNED_INT_VEC4]: 'vec4<u32>',\n\n  [GL.BOOL]: 'f32',\n  [GL.BOOL_VEC2]: 'vec2<f32>',\n  [GL.BOOL_VEC3]: 'vec3<f32>',\n  [GL.BOOL_VEC4]: 'vec4<f32>',\n\n  // TODO - are sizes/components below correct?\n  [GL.FLOAT_MAT2]: 'mat2x2<f32>',\n  [GL.FLOAT_MAT2x3]: 'mat2x3<f32>',\n  [GL.FLOAT_MAT2x4]: 'mat2x4<f32>',\n\n  [GL.FLOAT_MAT3x2]: 'mat3x2<f32>',\n  [GL.FLOAT_MAT3]: 'mat3x3<f32>',\n  [GL.FLOAT_MAT3x4]: 'mat3x4<f32>',\n\n  [GL.FLOAT_MAT4x2]: 'mat4x2<f32>',\n  [GL.FLOAT_MAT4x3]: 'mat4x3<f32>',\n  [GL.FLOAT_MAT4]: 'mat4x4<f32>'\n};\n\nconst WEBGL_SAMPLER_TO_TEXTURE_BINDINGS: Record<GLSamplerType, TextureBindingInfo> = {\n  [GL.SAMPLER_2D]: {viewDimension: '2d', sampleType: 'float'},\n  [GL.SAMPLER_CUBE]: {viewDimension: 'cube', sampleType: 'float'},\n  [GL.SAMPLER_3D]: {viewDimension: '3d', sampleType: 'float'},\n  [GL.SAMPLER_2D_SHADOW]: {viewDimension: '3d', sampleType: 'depth'},\n  [GL.SAMPLER_2D_ARRAY]: {viewDimension: '2d-array', sampleType: 'float'},\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: {viewDimension: '2d-array', sampleType: 'depth'},\n  [GL.SAMPLER_CUBE_SHADOW]: {viewDimension: 'cube', sampleType: 'float'},\n  [GL.INT_SAMPLER_2D]: {viewDimension: '2d', sampleType: 'sint'},\n  [GL.INT_SAMPLER_3D]: {viewDimension: '3d', sampleType: 'sint'},\n  [GL.INT_SAMPLER_CUBE]: {viewDimension: 'cube', sampleType: 'sint'},\n  [GL.INT_SAMPLER_2D_ARRAY]: {viewDimension: '2d-array', sampleType: 'uint'},\n  [GL.UNSIGNED_INT_SAMPLER_2D]: {viewDimension: '2d', sampleType: 'uint'},\n  [GL.UNSIGNED_INT_SAMPLER_3D]: {viewDimension: '3d', sampleType: 'uint'},\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: {viewDimension: 'cube', sampleType: 'uint'},\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: {viewDimension: '2d-array', sampleType: 'uint'}\n};\n\n/** Map from WebGL normalized types to WebGL */\nconst NORMALIZED_SHADER_TYPE_TO_WEBGL: Record<NormalizedDataType, GLDataType> = {\n  uint8: GL.UNSIGNED_BYTE,\n  sint8: GL.BYTE,\n  unorm8: GL.UNSIGNED_BYTE,\n  snorm8: GL.BYTE,\n  uint16: GL.UNSIGNED_SHORT,\n  sint16: GL.SHORT,\n  unorm16: GL.UNSIGNED_SHORT,\n  snorm16: GL.SHORT,\n  uint32: GL.UNSIGNED_INT,\n  sint32: GL.INT,\n  // WebGPU does not support normalized 32 bit integer attributes\n  //  'unorm32': GL.UNSIGNED_INT,\n  //  'snorm32': GL.INT,\n  float16: GL.HALF_FLOAT,\n  float32: GL.FLOAT\n};\n\n/* Map from WebGL types to webgpu normalized types */\nconst WEBGL_TO_NORMALIZED_DATA_TYPE: Record<GLDataType, [SignedDataType, NormalizedDataType]> = {\n  [GL.BYTE]: ['sint8', 'snorm16'],\n  [GL.UNSIGNED_BYTE]: ['uint8', 'unorm8'],\n  [GL.SHORT]: ['sint16', 'unorm16'],\n  [GL.UNSIGNED_SHORT]: ['uint16', 'unorm16'],\n  [GL.INT]: ['sint32', 'sint32'],\n  [GL.UNSIGNED_INT]: ['uint32', 'uint32'],\n  [GL.FLOAT]: ['float32', 'float32'],\n  [GL.HALF_FLOAT]: ['float16', 'float16']\n};\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable */\n\n// Uniforms\nimport type {UniformValue} from '@luma.gl/core';\nimport {GL, GLUniformType, GLSamplerType} from '@luma.gl/constants';\n\n/** Set a raw uniform (without type conversion and caching) */\n/* eslint-disable max-len */\nexport function setUniform(\n  gl: WebGL2RenderingContext,\n  location: WebGLUniformLocation,\n  type: GLUniformType | GLSamplerType,\n  value: UniformValue\n): void {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  // Prepare the value for WebGL setters\n  let uniformValue = value;\n  if (uniformValue === true) {\n    uniformValue = 1;\n  }\n  if (uniformValue === false) {\n    uniformValue = 0;\n  }\n  const arrayValue = typeof uniformValue === 'number' ? [uniformValue] : uniformValue;\n\n  // prettier-ignore\n  switch (type) {\n    case GL.SAMPLER_2D:\n    case GL.SAMPLER_CUBE:\n    case GL.SAMPLER_3D:\n    case GL.SAMPLER_2D_SHADOW:\n    case GL.SAMPLER_2D_ARRAY:\n    case GL.SAMPLER_2D_ARRAY_SHADOW:\n    case GL.SAMPLER_CUBE_SHADOW:\n    case GL.INT_SAMPLER_2D:\n    case GL.INT_SAMPLER_3D:\n    case GL.INT_SAMPLER_CUBE:\n    case GL.INT_SAMPLER_2D_ARRAY:\n    case GL.UNSIGNED_INT_SAMPLER_2D:\n    case GL.UNSIGNED_INT_SAMPLER_3D:\n    case GL.UNSIGNED_INT_SAMPLER_CUBE:\n    case GL.UNSIGNED_INT_SAMPLER_2D_ARRAY:\n      if (typeof value !== 'number') {\n        throw new Error('samplers must be set to integers');\n      }\n      return gl.uniform1i(location, value);\n\n    case GL.FLOAT: return gl.uniform1fv(location, arrayValue);\n    case GL.FLOAT_VEC2: return gl.uniform2fv(location, arrayValue);\n    case GL.FLOAT_VEC3: return gl.uniform3fv(location, arrayValue);\n    case GL.FLOAT_VEC4: return gl.uniform4fv(location, arrayValue);\n\n    case GL.INT: return gl.uniform1iv(location, arrayValue);\n    case GL.INT_VEC2: return gl.uniform2iv(location, arrayValue);\n    case GL.INT_VEC3: return gl.uniform3iv(location, arrayValue);\n    case GL.INT_VEC4: return gl.uniform4iv(location, arrayValue);\n\n    case GL.BOOL: return gl.uniform1iv(location, arrayValue);\n    case GL.BOOL_VEC2: return gl.uniform2iv(location, arrayValue);\n    case GL.BOOL_VEC3: return gl.uniform3iv(location, arrayValue);\n    case GL.BOOL_VEC4: return gl.uniform4iv(location, arrayValue);\n\n    // WEBGL2 - unsigned integers\n    case GL.UNSIGNED_INT: return gl2.uniform1uiv(location, arrayValue, 1);\n    case GL.UNSIGNED_INT_VEC2: return gl2.uniform2uiv(location, arrayValue, 2);\n    case GL.UNSIGNED_INT_VEC3: return gl2.uniform3uiv(location, arrayValue, 3);\n    case GL.UNSIGNED_INT_VEC4: return gl2.uniform4uiv(location, arrayValue, 4);\n\n    // WebGL2 - quadratic matrices\n    // false: don't transpose the matrix\n    case GL.FLOAT_MAT2: return gl.uniformMatrix2fv(location, false, arrayValue);\n    case GL.FLOAT_MAT3: return gl.uniformMatrix3fv(location, false, arrayValue);\n    case GL.FLOAT_MAT4: return gl.uniformMatrix4fv(location, false, arrayValue);\n\n    // WebGL2 - rectangular matrices\n    case GL.FLOAT_MAT2x3: return gl2.uniformMatrix2x3fv(location, false, arrayValue);\n    case GL.FLOAT_MAT2x4: return gl2.uniformMatrix2x4fv(location, false, arrayValue);\n    case GL.FLOAT_MAT3x2: return gl2.uniformMatrix3x2fv(location, false, arrayValue);\n    case GL.FLOAT_MAT3x4: return gl2.uniformMatrix3x4fv(location, false, arrayValue);\n    case GL.FLOAT_MAT4x2: return gl2.uniformMatrix4x2fv(location, false, arrayValue);\n    case GL.FLOAT_MAT4x3: return gl2.uniformMatrix4x3fv(location, false, arrayValue);\n  }\n\n  throw new Error('Illegal uniform');\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GL, GLPrimitiveTopology, GLPrimitive} from '@luma.gl/constants';\nimport {PrimitiveTopology} from '@luma.gl/core';\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode: GLPrimitiveTopology): GLPrimitive {\n  switch (drawMode) {\n    case GL.POINTS:\n      return GL.POINTS;\n    case GL.LINES:\n      return GL.LINES;\n    case GL.LINE_STRIP:\n      return GL.LINES;\n    case GL.LINE_LOOP:\n      return GL.LINES;\n    case GL.TRIANGLES:\n      return GL.TRIANGLES;\n    case GL.TRIANGLE_STRIP:\n      return GL.TRIANGLES;\n    case GL.TRIANGLE_FAN:\n      return GL.TRIANGLES;\n    default:\n      throw new Error('drawMode');\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount(options: {\n  drawMode: GLPrimitiveTopology;\n  vertexCount: number;\n}): number {\n  const {drawMode, vertexCount} = options;\n  switch (drawMode) {\n    case GL.POINTS:\n    case GL.LINE_LOOP:\n      return vertexCount;\n    case GL.LINES:\n      return vertexCount / 2;\n    case GL.LINE_STRIP:\n      return vertexCount - 1;\n    case GL.TRIANGLES:\n      return vertexCount / 3;\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      throw new Error('drawMode');\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount(options: {\n  drawMode: GLPrimitiveTopology;\n  vertexCount: number;\n}): number {\n  const {drawMode, vertexCount} = options;\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL.POINTS:\n      return primitiveCount;\n    case GL.LINES:\n      return primitiveCount * 2;\n    case GL.TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      throw new Error('drawMode');\n  }\n}\n\n/** Get the primitive type for draw */\nexport function getGLDrawMode(\n  topology: PrimitiveTopology\n):\n  | GL.POINTS\n  | GL.LINES\n  | GL.LINE_STRIP\n  | GL.LINE_LOOP\n  | GL.TRIANGLES\n  | GL.TRIANGLE_STRIP\n  | GL.TRIANGLE_FAN {\n  // prettier-ignore\n  switch (topology) {\n    case 'point-list': return GL.POINTS;\n    case 'line-list': return GL.LINES;\n    case 'line-strip': return GL.LINE_STRIP;\n    case 'triangle-list': return GL.TRIANGLES;\n    case 'triangle-strip': return GL.TRIANGLE_STRIP;\n    default: throw new Error(topology);\n  }\n}\n\n/** Get the primitive type for transform feedback */\nexport function getGLPrimitive(topology: PrimitiveTopology): GL.POINTS | GL.LINES | GL.TRIANGLES {\n  // prettier-ignore\n  switch (topology) {\n    case 'point-list': return GL.POINTS;\n    case 'line-list': return GL.LINES;\n    case 'line-strip': return GL.LINES;\n    case 'triangle-list': return GL.TRIANGLES;\n    case 'triangle-strip': return GL.TRIANGLES;\n    default: throw new Error(topology);\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CommandEncoder, CommandEncoderProps} from '@luma.gl/core';\nimport type {\n  RenderPassProps,\n  ComputePass,\n  ComputePassProps,\n  QuerySet,\n  Buffer,\n  CopyBufferToBufferOptions,\n  CopyBufferToTextureOptions,\n  CopyTextureToBufferOptions,\n  CopyTextureToTextureOptions\n  // ClearTextureOptions,\n  // TextureReadOptions,\n} from '@luma.gl/core';\n\nimport {WEBGLCommandBuffer} from './webgl-command-buffer';\nimport {WEBGLRenderPass} from './webgl-render-pass';\nimport {WebGLDevice} from '../webgl-device';\n\nexport class WEBGLCommandEncoder extends CommandEncoder {\n  readonly device: WebGLDevice;\n  readonly handle = null;\n\n  readonly commandBuffer: WEBGLCommandBuffer;\n\n  constructor(device: WebGLDevice, props: CommandEncoderProps) {\n    super(device, props);\n    this.device = device;\n    this.commandBuffer = new WEBGLCommandBuffer(device);\n  }\n\n  override destroy(): void {}\n\n  override finish(): WEBGLCommandBuffer {\n    return this.commandBuffer;\n  }\n\n  beginRenderPass(props: RenderPassProps): WEBGLRenderPass {\n    return new WEBGLRenderPass(this.device, props);\n  }\n\n  beginComputePass(props: ComputePassProps): ComputePass {\n    throw new Error('ComputePass not supported in WebGL');\n  }\n\n  copyBufferToBuffer(options: CopyBufferToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-buffer', options});\n  }\n\n  copyBufferToTexture(options: CopyBufferToTextureOptions) {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-texture', options});\n  }\n\n  copyTextureToBuffer(options: CopyTextureToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-buffer', options});\n  }\n\n  copyTextureToTexture(options: CopyTextureToTextureOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  }\n\n  // clearTexture(options: ClearTextureOptions): void {\n  //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  // }\n\n  override pushDebugGroup(groupLabel: string): void {}\n  override popDebugGroup() {}\n\n  override insertDebugMarker(markerLabel: string): void {}\n\n  override resolveQuerySet(\n    querySet: QuerySet,\n    destination: Buffer,\n    options?: {\n      firstQuery?: number;\n      queryCount?: number;\n      destinationOffset?: number;\n    }\n  ): void {}\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {\n  CopyBufferToBufferOptions,\n  CopyBufferToTextureOptions,\n  CopyTextureToBufferOptions,\n  CopyTextureToTextureOptions\n  // ClearTextureOptions,\n  // TextureReadOptions\n} from '@luma.gl/core';\nimport {CommandBuffer, Texture, Framebuffer} from '@luma.gl/core';\nimport {\n  GL,\n  GLTextureTarget,\n  GLTextureCubeMapTarget\n  // GLTexelDataFormat,\n  // GLPixelType,\n  // GLDataType\n} from '@luma.gl/constants';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from './webgl-buffer';\nimport {WEBGLTexture} from './webgl-texture';\nimport {WEBGLFramebuffer} from './webgl-framebuffer';\nimport {getTextureFormatWebGL} from '../converters/webgl-texture-table';\n\ntype CopyBufferToBufferCommand = {\n  name: 'copy-buffer-to-buffer';\n  options: CopyBufferToBufferOptions;\n};\n\ntype CopyBufferToTextureCommand = {\n  name: 'copy-buffer-to-texture';\n  options: CopyBufferToTextureOptions;\n};\n\ntype CopyTextureToBufferCommand = {\n  name: 'copy-texture-to-buffer';\n  options: CopyTextureToBufferOptions;\n};\n\ntype CopyTextureToTextureCommand = {\n  name: 'copy-texture-to-texture';\n  options: CopyTextureToTextureOptions;\n};\n\ntype ClearTextureCommand = {\n  name: 'clear-texture';\n  options: {}; // ClearTextureOptions;\n};\n\ntype ReadTextureCommand = {\n  name: 'read-texture';\n  options: {}; // TextureReadOptions;\n};\n\ntype Command =\n  | CopyBufferToBufferCommand\n  | CopyBufferToTextureCommand\n  | CopyTextureToBufferCommand\n  | CopyTextureToTextureCommand\n  | ClearTextureCommand\n  | ReadTextureCommand;\n\nexport class WEBGLCommandBuffer extends CommandBuffer {\n  readonly device: WebGLDevice;\n  readonly handle = null;\n  commands: Command[] = [];\n\n  constructor(device: WebGLDevice) {\n    super(device, {});\n    this.device = device;\n  }\n\n  _executeCommands(commands: Command[] = this.commands) {\n    for (const command of commands) {\n      switch (command.name) {\n        case 'copy-buffer-to-buffer':\n          _copyBufferToBuffer(this.device, command.options);\n          break;\n        case 'copy-buffer-to-texture':\n          _copyBufferToTexture(this.device, command.options);\n          break;\n        case 'copy-texture-to-buffer':\n          _copyTextureToBuffer(this.device, command.options);\n          break;\n        case 'copy-texture-to-texture':\n          _copyTextureToTexture(this.device, command.options);\n          break;\n        // case 'clear-texture':\n        //   _clearTexture(this.device, command.options);\n        //   break;\n        default:\n          throw new Error(command.name);\n      }\n    }\n  }\n}\n\nfunction _copyBufferToBuffer(device: WebGLDevice, options: CopyBufferToBufferOptions): void {\n  const source = options.sourceBuffer as WEBGLBuffer;\n  const destination = options.destinationBuffer as WEBGLBuffer;\n\n  // {In WebGL2 we can p}erform the copy on the GPU\n  // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n  device.gl.bindBuffer(GL.COPY_READ_BUFFER, source.handle);\n  device.gl.bindBuffer(GL.COPY_WRITE_BUFFER, destination.handle);\n  device.gl.copyBufferSubData(\n    GL.COPY_READ_BUFFER,\n    GL.COPY_WRITE_BUFFER,\n    options.sourceOffset ?? 0,\n    options.destinationOffset ?? 0,\n    options.size\n  );\n  device.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n  device.gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n}\n\n/**\n * Copies data from a Buffer object into a Texture object\n * NOTE: doesn't wait for copy to be complete\n */\nfunction _copyBufferToTexture(device: WebGLDevice, options: CopyBufferToTextureOptions): void {\n  throw new Error('Not implemented');\n}\n\n/**\n * Copies data from a Texture object into a Buffer object.\n * NOTE: doesn't wait for copy to be complete\n */\nfunction _copyTextureToBuffer(device: WebGLDevice, options: CopyTextureToBufferOptions): void {\n  const {\n    /** Texture to copy to/from. */\n    sourceTexture,\n    /**  Mip-map level of the texture to copy to/from. (Default 0) */\n    mipLevel = 0,\n    /** Defines which aspects of the texture to copy to/from. */\n    aspect = 'all',\n\n    /** Width to copy */\n    width = options.sourceTexture.width,\n    /** Height to copy */\n    height = options.sourceTexture.height,\n    depthOrArrayLayers = 0,\n    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */\n    origin = [0, 0],\n\n    /** Destination buffer */\n    destinationBuffer,\n    /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */\n    byteOffset = 0,\n    /**\n     * The stride, in bytes, between the beginning of each block row and the subsequent block row.\n     * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).\n     */\n    bytesPerRow,\n    /**\n     * Number of block rows per single image of the texture.\n     * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.\n     * Required if there are multiple images (i.e. the copy depth is more than one).\n     */\n    rowsPerImage\n  } = options;\n\n  // TODO - Not possible to read just stencil or depth part in WebGL?\n  if (aspect !== 'all') {\n    throw new Error('aspect not supported in WebGL');\n  }\n\n  // TODO - mipLevels are set when attaching texture to framebuffer\n  if (mipLevel !== 0 || depthOrArrayLayers !== 0 || bytesPerRow || rowsPerImage) {\n    throw new Error('not implemented');\n  }\n\n  // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  const {framebuffer, destroyFramebuffer} = getFramebuffer(sourceTexture);\n  let prevHandle: WebGLFramebuffer | null | undefined;\n  try {\n    const webglBuffer = destinationBuffer as WEBGLBuffer;\n    const sourceWidth = width || framebuffer.width;\n    const sourceHeight = height || framebuffer.height;\n    const sourceParams = getTextureFormatWebGL(\n      framebuffer.colorAttachments[0].texture.props.format\n    );\n    const sourceFormat = sourceParams.format;\n    const sourceType = sourceParams.type;\n\n    // if (!target) {\n    //   // Create new buffer with enough size\n    //   const components = glFormatToComponents(sourceFormat);\n    //   const byteCount = glTypeToBytes(sourceType);\n    //   const byteLength = byteOffset + sourceWidth * sourceHeight * components * byteCount;\n    //   target = device.createBuffer({byteLength});\n    // }\n\n    device.gl.bindBuffer(GL.PIXEL_PACK_BUFFER, webglBuffer.handle);\n    // @ts-expect-error native bindFramebuffer is overridden by our state tracker\n    prevHandle = device.gl.bindFramebuffer(GL.FRAMEBUFFER, framebuffer.handle);\n\n    device.gl.readPixels(\n      origin[0],\n      origin[1],\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      byteOffset\n    );\n  } finally {\n    device.gl.bindBuffer(GL.PIXEL_PACK_BUFFER, null);\n    // prevHandle may be unassigned if the try block failed before binding\n    if (prevHandle !== undefined) {\n      device.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle);\n    }\n\n    if (destroyFramebuffer) {\n      framebuffer.destroy();\n    }\n  }\n}\n\n/**\n * Copies data from a Framebuffer or a Texture object into a Buffer object.\n * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transfer.\nexport function readPixelsToBuffer(\n  source: Framebuffer | Texture,\n  options?: {\n    sourceX?: number;\n    sourceY?: number;\n    sourceFormat?: number;\n    target?: Buffer; // A new Buffer object is created when not provided.\n    targetByteOffset?: number; // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth?: number;\n    sourceHeight?: number;\n    sourceType?: number;\n  }\n): Buffer\n */\n\n/**\n * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n */\n// eslint-disable-next-line complexity, max-statements\nfunction _copyTextureToTexture(device: WebGLDevice, options: CopyTextureToTextureOptions): void {\n  const {\n    /** Texture to copy to/from. */\n    sourceTexture,\n    /**  Mip-map level of the texture to copy to (Default 0) */\n    destinationMipLevel = 0,\n    /** Defines which aspects of the texture to copy to/from. */\n    // aspect = 'all',\n    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */\n    origin = [0, 0],\n\n    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */\n    destinationOrigin = [0, 0],\n\n    /** Texture to copy to/from. */\n    destinationTexture\n    /**  Mip-map level of the texture to copy to/from. (Default 0) */\n    // destinationMipLevel = options.mipLevel,\n    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */\n    // destinationOrigin = [0, 0],\n    /** Defines which aspects of the texture to copy to/from. */\n    // destinationAspect = options.aspect,\n  } = options;\n\n  let {\n    width = options.destinationTexture.width,\n    height = options.destinationTexture.height\n    // depthOrArrayLayers = 0\n  } = options;\n\n  const {framebuffer, destroyFramebuffer} = getFramebuffer(sourceTexture);\n  const [sourceX, sourceY] = origin;\n  const [destinationX, destinationY, destinationZ] = destinationOrigin;\n\n  // @ts-expect-error native bindFramebuffer is overridden by our state tracker\n  const prevHandle: WebGLFramebuffer | null = device.gl.bindFramebuffer(\n    GL.FRAMEBUFFER,\n    framebuffer.handle\n  );\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n\n  let texture: WEBGLTexture;\n  let textureTarget: GL;\n  if (destinationTexture instanceof WEBGLTexture) {\n    texture = destinationTexture;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture._bind(0);\n    textureTarget = texture.glTarget;\n  } else {\n    throw new Error('invalid destination');\n  }\n\n  switch (textureTarget) {\n    case GL.TEXTURE_2D:\n    case GL.TEXTURE_CUBE_MAP:\n      device.gl.copyTexSubImage2D(\n        textureTarget,\n        destinationMipLevel,\n        destinationX,\n        destinationY,\n        sourceX,\n        sourceY,\n        width,\n        height\n      );\n      break;\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      device.gl.copyTexSubImage3D(\n        textureTarget,\n        destinationMipLevel,\n        destinationX,\n        destinationY,\n        destinationZ,\n        sourceX,\n        sourceY,\n        width,\n        height\n      );\n      break;\n    default:\n  }\n\n  if (texture) {\n    texture._unbind();\n  }\n  device.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle);\n  if (destroyFramebuffer) {\n    framebuffer.destroy();\n  }\n}\n\n/** Clear one mip level of a texture *\nfunction _clearTexture(device: WebGLDevice, options: ClearTextureOptions) {\n  const BORDER = 0;\n  const {dimension, width, height, depth = 0, mipLevel = 0} = options;\n  const {glInternalFormat, glFormat, glType, compressed} = options;\n  const glTarget = getWebGLCubeFaceTarget(options.glTarget, dimension, depth);\n\n  switch (dimension) {\n    case '2d-array':\n    case '3d':\n      if (compressed) {\n        // prettier-ignore\n        device.gl.compressedTexImage3D(glTarget, mipLevel, glInternalFormat, width, height, depth, BORDER, null);\n      } else {\n        // prettier-ignore\n        device.gl.texImage3D( glTarget, mipLevel, glInternalFormat, width, height, depth, BORDER, glFormat, glType, null);\n      }\n      break;\n\n    case '2d':\n    case 'cube':\n      if (compressed) {\n        // prettier-ignore\n        device.gl.compressedTexImage2D(glTarget, mipLevel, glInternalFormat, width, height, BORDER, null);\n      } else {\n        // prettier-ignore\n        device.gl.texImage2D(glTarget, mipLevel, glInternalFormat, width, height, BORDER, glFormat, glType, null);\n      }\n      break;\n\n    default:\n      throw new Error(dimension);\n  }\n}\n  */\n\n// function _readTexture(device: WebGLDevice, options: CopyTextureToBufferOptions) {}\n\n// HELPERS\n\n/**\n * In WebGL, cube maps specify faces by overriding target instead of using the depth parameter.\n * @note We still bind the texture using GL.TEXTURE_CUBE_MAP, but we need to use the face-specific target when setting mip levels.\n * @returns glTarget unchanged, if dimension !== 'cube'.\n */\nexport function getWebGLCubeFaceTarget(\n  glTarget: GLTextureTarget,\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d',\n  level: number\n): GLTextureTarget | GLTextureCubeMapTarget {\n  return dimension === 'cube' ? GL.TEXTURE_CUBE_MAP_POSITIVE_X + level : glTarget;\n}\n\n/** Wrap a texture in a framebuffer so that we can use WebGL APIs that work on framebuffers */\nfunction getFramebuffer(source: Texture | Framebuffer): {\n  framebuffer: WEBGLFramebuffer;\n  destroyFramebuffer: boolean;\n} {\n  if (source instanceof Texture) {\n    const {width, height, id} = source;\n    const framebuffer = source.device.createFramebuffer({\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      colorAttachments: [source]\n    }) as unknown as WEBGLFramebuffer;\n\n    return {framebuffer, destroyFramebuffer: true};\n  }\n  return {framebuffer: source as unknown as WEBGLFramebuffer, destroyFramebuffer: false};\n}\n\n/**\n * Returns number of components in a specific readPixels WebGL format\n * @todo use shadertypes utils instead?\n */\nexport function glFormatToComponents(format: GL): 1 | 2 | 3 | 4 {\n  switch (format) {\n    case GL.ALPHA:\n    case GL.R32F:\n    case GL.RED:\n      return 1;\n    case GL.RG32F:\n    case GL.RG:\n      return 2;\n    case GL.RGB:\n    case GL.RGB32F:\n      return 3;\n    case GL.RGBA:\n    case GL.RGBA32F:\n      return 4;\n    // TODO: Add support for additional WebGL2 formats\n    default:\n      throw new Error('GLFormat');\n  }\n}\n\n/**\n * Return byte count for given readPixels WebGL type\n * @todo use shadertypes utils instead?\n */\nexport function glTypeToBytes(type: GL): 1 | 2 | 4 {\n  switch (type) {\n    case GL.UNSIGNED_BYTE:\n      return 1;\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return 2;\n    case GL.FLOAT:\n      return 4;\n    // TODO: Add support for additional WebGL2 types\n    default:\n      throw new Error('GLType');\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {NumericArray, NumberArray4} from '@math.gl/types';\nimport {RenderPass, RenderPassProps, RenderPassParameters} from '@luma.gl/core';\nimport {WebGLDevice} from '../webgl-device';\nimport {GL, GLParameters} from '@luma.gl/constants';\nimport {withGLParameters} from '../../context/state-tracker/with-parameters';\nimport {setGLParameters} from '../../context/parameters/unified-parameter-api';\nimport {WEBGLQuerySet} from './webgl-query-set';\nimport {WEBGLFramebuffer} from './webgl-framebuffer';\n\nconst COLOR_CHANNELS: NumberArray4 = [0x1, 0x2, 0x4, 0x8]; // GPUColorWrite RED, GREEN, BLUE, ALPHA\n\nexport class WEBGLRenderPass extends RenderPass {\n  readonly device: WebGLDevice;\n  readonly handle = null;\n\n  /** Parameters that should be applied before each draw call */\n  glParameters: GLParameters = {};\n\n  constructor(device: WebGLDevice, props: RenderPassProps) {\n    super(device, props);\n    this.device = device;\n\n    // If no viewport is provided, apply reasonably defaults\n    let viewport: NumberArray4 | undefined;\n    if (!props?.parameters?.viewport) {\n      if (props?.framebuffer) {\n        // Set the viewport to the size of the framebuffer\n        const {width, height} = props.framebuffer;\n        viewport = [0, 0, width, height];\n      } else {\n        // Instead of using our own book-keeping, we can just read the values from the WebGL context\n        const [width, height] = device.getDefaultCanvasContext().getDrawingBufferSize();\n        viewport = [0, 0, width, height];\n      }\n    }\n\n    // TODO - do parameters (scissorRect) affect the clear operation?\n    this.device.pushState();\n    this.setParameters({viewport, ...this.props.parameters});\n\n    // Specify mapping of draw buffer locations to color attachments\n    const webglFramebuffer = this.props.framebuffer as WEBGLFramebuffer;\n    // Default framebuffers can only be set to GL.BACK or GL.NONE\n    if (this.props.framebuffer && webglFramebuffer?.handle) {\n      const drawBuffers = this.props.framebuffer.colorAttachments.map(\n        (_, i) => GL.COLOR_ATTACHMENT0 + i\n      );\n      this.device.gl.drawBuffers(drawBuffers);\n    } else {\n      this.device.gl.drawBuffers([GL.BACK]);\n    }\n\n    // Hack - for now WebGL draws in \"immediate mode\" (instead of queueing the operations)...\n    this.clear();\n  }\n\n  end(): void {\n    this.device.popState();\n    // should add commands to CommandEncoder.\n  }\n\n  pushDebugGroup(groupLabel: string): void {}\n  popDebugGroup(): void {}\n  insertDebugMarker(markerLabel: string): void {}\n\n  // beginOcclusionQuery(queryIndex: number): void;\n  // endOcclusionQuery(): void;\n\n  // executeBundles(bundles: Iterable<GPURenderBundle>): void;\n\n  /**\n   * Maps RenderPass parameters to GL parameters\n   */\n  setParameters(parameters: RenderPassParameters = {}): void {\n    const glParameters: GLParameters = {...this.glParameters};\n\n    // Framebuffers are specified using parameters in WebGL\n    glParameters.framebuffer = this.props.framebuffer || null;\n\n    if (this.props.depthReadOnly) {\n      glParameters.depthMask = !this.props.depthReadOnly;\n    }\n\n    glParameters.stencilMask = this.props.stencilReadOnly ? 0 : 1;\n\n    glParameters[GL.RASTERIZER_DISCARD] = this.props.discard;\n\n    // Map the four renderpass parameters to WebGL parameters\n    if (parameters.viewport) {\n      // WebGPU viewports are 6 coordinates (X, Y, Z)\n      if (parameters.viewport.length >= 6) {\n        glParameters.viewport = parameters.viewport.slice(0, 4) as NumberArray4;\n        glParameters.depthRange = [\n          parameters.viewport[4] as number,\n          parameters.viewport[5] as number\n        ];\n      } else {\n        // WebGL viewports are 4 coordinates (X, Y)\n        glParameters.viewport = parameters.viewport as NumberArray4;\n      }\n    }\n    if (parameters.scissorRect) {\n      glParameters.scissorTest = true;\n      glParameters.scissor = parameters.scissorRect;\n    }\n    if (parameters.blendConstant) {\n      glParameters.blendColor = parameters.blendConstant;\n    }\n    if (parameters.stencilReference) {\n      // eslint-disable-next-line no-console\n      console.warn('RenderPassParameters.stencilReference not yet implemented in WebGL');\n      // parameters.stencilFunc = [func, ref, mask];\n      // Does this work?\n      glParameters[GL.STENCIL_REF] = parameters.stencilReference;\n    }\n\n    if ('colorMask' in parameters) {\n      glParameters.colorMask = COLOR_CHANNELS.map(channel =>\n        Boolean(channel & (parameters.colorMask as number))\n      );\n    }\n\n    this.glParameters = glParameters;\n\n    setGLParameters(this.device.gl, glParameters);\n  }\n\n  beginOcclusionQuery(queryIndex: number): void {\n    const webglQuerySet = this.props.occlusionQuerySet as WEBGLQuerySet;\n    webglQuerySet?.beginOcclusionQuery();\n  }\n\n  override endOcclusionQuery(): void {\n    const webglQuerySet = this.props.occlusionQuerySet as WEBGLQuerySet;\n    webglQuerySet?.endOcclusionQuery();\n  }\n\n  // PRIVATE\n\n  /**\n   * Optionally clears depth, color and stencil buffers based on parameters\n   */\n  protected clear(): void {\n    const glParameters: GLParameters = {...this.glParameters};\n\n    let clearMask = 0;\n\n    if (this.props.clearColors) {\n      this.props.clearColors.forEach((color, drawBufferIndex) => {\n        if (color) {\n          this.clearColorBuffer(drawBufferIndex, color);\n        }\n      });\n    }\n\n    if (this.props.clearColor !== false && this.props.clearColors === undefined) {\n      clearMask |= GL.COLOR_BUFFER_BIT;\n      glParameters.clearColor = this.props.clearColor;\n    }\n    if (this.props.clearDepth !== false) {\n      clearMask |= GL.DEPTH_BUFFER_BIT;\n      glParameters.clearDepth = this.props.clearDepth;\n    }\n    if (this.props.clearStencil !== false) {\n      clearMask |= GL.STENCIL_BUFFER_BIT;\n      glParameters.clearStencil = this.props.clearStencil;\n    }\n\n    if (clearMask !== 0) {\n      // Temporarily set any clear \"colors\" and call clear\n      withGLParameters(this.device.gl, glParameters, () => {\n        this.device.gl.clear(clearMask);\n      });\n    }\n  }\n\n  /**\n   * WebGL2 - clear a specific color buffer\n   */\n  protected clearColorBuffer(drawBuffer: number = 0, value: NumericArray = [0, 0, 0, 0]) {\n    withGLParameters(this.device.gl, {framebuffer: this.props.framebuffer}, () => {\n      // Method selection per OpenGL ES 3 docs\n      switch (value.constructor) {\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n          this.device.gl.clearBufferiv(GL.COLOR, drawBuffer, value);\n          break;\n        case Uint8Array:\n        case Uint8ClampedArray:\n        case Uint16Array:\n        case Uint32Array:\n          this.device.gl.clearBufferuiv(GL.COLOR, drawBuffer, value);\n          break;\n        case Float32Array:\n          this.device.gl.clearBufferfv(GL.COLOR, drawBuffer, value);\n          break;\n        default:\n          throw new Error('clearColorBuffer: color must be typed array');\n      }\n    });\n  }\n\n  /*\n  clearDepthStencil() {\n      case GL.DEPTH:\n        this.device.gl.clearBufferfv(GL.DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        this.device.gl.clearBufferiv(GL.STENCIL, 0, [value]);\n        break;\n\n      case GL.DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        this.device.gl.clearBufferfi(GL.DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n  */\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {TypedArray, NumericArray} from '@math.gl/types';\nimport type {Device, Buffer, VertexArrayProps} from '@luma.gl/core';\nimport {VertexArray, getScratchArray} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {getBrowser} from '@probe.gl/env';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from '../resources/webgl-buffer';\n\nimport {getGLFromVertexType} from '../converters/webgl-vertex-formats';\nimport {fillArray} from '../../utils/fill-array';\n\n/** VertexArrayObject wrapper */\nexport class WEBGLVertexArray extends VertexArray {\n  override get [Symbol.toStringTag](): string {\n    return 'VertexArray';\n  }\n\n  readonly device: WebGLDevice;\n  readonly handle: WebGLVertexArrayObject;\n\n  /** Attribute 0 buffer constant */\n  private buffer: WEBGLBuffer | null = null;\n  private bufferValue: TypedArray | null = null;\n\n  /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */\n  static isConstantAttributeZeroSupported(device: Device): boolean {\n    return getBrowser() === 'Chrome';\n  }\n\n  // Create a VertexArray\n  constructor(device: WebGLDevice, props: VertexArrayProps) {\n    super(device, props);\n    this.device = device;\n    this.handle = this.device.gl.createVertexArray()!;\n  }\n\n  override destroy(): void {\n    super.destroy();\n    if (this.buffer) {\n      this.buffer?.destroy();\n    }\n    if (this.handle) {\n      this.device.gl.deleteVertexArray(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined!;\n    }\n\n    // Auto-delete elements?\n    // return [this.elements];\n  }\n\n  /**\n  // Set (bind/unbind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported\n   *\n   * @param elementBuffer\n   */\n  setIndexBuffer(indexBuffer: Buffer | null): void {\n    const buffer = indexBuffer as WEBGLBuffer;\n    // Explicitly allow `null` to support clearing the index buffer\n    if (buffer && buffer.glTarget !== GL.ELEMENT_ARRAY_BUFFER) {\n      throw new Error('Use .setBuffer()');\n    }\n    // In WebGL The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject\n    this.device.gl.bindVertexArray(this.handle);\n    this.device.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, buffer ? buffer.handle : null);\n\n    this.indexBuffer = buffer;\n\n    // Unbind to prevent unintended changes to the VAO.\n    this.device.gl.bindVertexArray(null);\n  }\n\n  /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */\n  setBuffer(location: number, attributeBuffer: Buffer): void {\n    const buffer = attributeBuffer as WEBGLBuffer;\n    // Sanity check target\n    if (buffer.glTarget === GL.ELEMENT_ARRAY_BUFFER) {\n      throw new Error('Use .setIndexBuffer()');\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);\n\n    this.device.gl.bindVertexArray(this.handle);\n    // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n    this.device.gl.bindBuffer(GL.ARRAY_BUFFER, buffer.handle);\n\n    // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n    if (integer) {\n      this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);\n    } else {\n      // Attaches ARRAY_BUFFER with specified buffer format to location\n      this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n    }\n    // Clear binding - keeping it may cause [.WebGL-0x12804417100]\n    // GL_INVALID_OPERATION: A transform feedback buffer that would be written to is also bound to a non-transform-feedback target\n    this.device.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n\n    // Mark as non-constant\n    this.device.gl.enableVertexAttribArray(location);\n    // Set the step mode 0=vertex, 1=instance\n    this.device.gl.vertexAttribDivisor(location, divisor || 0);\n\n    this.attributes[location] = buffer;\n\n    // Unbind to prevent unintended changes to the VAO.\n    this.device.gl.bindVertexArray(null);\n  }\n\n  /** Set a location in vertex attributes array to a constant value, disables the location */\n  override setConstantWebGL(location: number, value: TypedArray): void {\n    this._enable(location, false);\n    this.attributes[location] = value;\n  }\n\n  override bindBeforeRender(): void {\n    this.device.gl.bindVertexArray(this.handle);\n    this._applyConstantAttributes();\n  }\n\n  override unbindAfterRender(): void {\n    // Unbind to prevent unintended changes to the VAO.\n    this.device.gl.bindVertexArray(null);\n  }\n\n  // Internal methods\n\n  /**\n   * Constant attributes need to be reset before every draw call\n   * Any attribute that is disabled in the current vertex array object\n   * is read from the context's global constant value for that attribute location.\n   * @note Constant attributes are only supported in WebGL, not in WebGPU\n   */\n  protected _applyConstantAttributes(): void {\n    for (let location = 0; location < this.maxVertexAttributes; ++location) {\n      const constant = this.attributes[location];\n      // A typed array means this is a constant\n      if (ArrayBuffer.isView(constant)) {\n        this.device.setConstantAttributeWebGL(location, constant);\n      }\n    }\n  }\n\n  /**\n   * Set a location in vertex attributes array to a buffer, enables the location, sets divisor\n   * @note requires vertex array to be bound\n   */\n  // protected _setAttributeLayout(location: number): void {\n  //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);\n\n  //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n  //   if (integer) {\n  //     this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);\n  //   } else {\n  //     // Attaches ARRAY_BUFFER with specified buffer format to location\n  //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n  //   }\n  //   this.device.gl.vertexAttribDivisor(location, divisor || 0);\n  // }\n\n  /** Get an accessor from the  */\n  protected _getAccessor(location: number) {\n    const attributeInfo = this.attributeInfos[location];\n    if (!attributeInfo) {\n      throw new Error(`Unknown attribute location ${location}`);\n    }\n    const glType = getGLFromVertexType(attributeInfo.bufferDataType);\n    return {\n      size: attributeInfo.bufferComponents,\n      type: glType,\n      stride: attributeInfo.byteStride,\n      offset: attributeInfo.byteOffset,\n      normalized: attributeInfo.normalized,\n      // it is the shader attribute declaration, not the vertex memory format,\n      // that determines if the data in the buffer will be treated as integers.\n      //\n      // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,\n      // but as far as we can tell, WebGPU does not.\n      integer: attributeInfo.integer,\n      divisor: attributeInfo.stepMode === 'instance' ? 1 : 0\n    };\n  }\n\n  /**\n   * Enabling an attribute location makes it reference the currently bound buffer\n   * Disabling an attribute location makes it reference the global constant value\n   * TODO - handle single values for size 1 attributes?\n   * TODO - convert classic arrays based on known type?\n   */\n  protected _enable(location: number, enable = true): void {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers...\n    const canDisableAttributeZero = WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);\n    const canDisableAttribute = canDisableAttributeZero || location !== 0;\n\n    if (enable || canDisableAttribute) {\n      location = Number(location);\n      this.device.gl.bindVertexArray(this.handle);\n      if (enable) {\n        this.device.gl.enableVertexAttribArray(location);\n      } else {\n        this.device.gl.disableVertexAttribArray(location);\n      }\n      this.device.gl.bindVertexArray(null);\n    }\n  }\n\n  /**\n   * Provide a means to create a buffer that is equivalent to a constant.\n   * NOTE: Desktop OpenGL cannot disable attribute 0.\n   * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n   * this-has-significant-performance-penalty\n   */\n  getConstantBuffer(elementCount: number, value: TypedArray): Buffer {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    if (this.buffer && byteLength !== this.buffer.byteLength) {\n      throw new Error(\n        `Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`\n      );\n    }\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || this.device.createBuffer({byteLength});\n\n    // Reallocate and update contents if needed\n    // @ts-ignore TODO fix types\n    updateNeeded ||= !compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.write(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n * TODO - handle single values for size 1 attributes?\n */\nfunction normalizeConstantArrayValue(arrayValue: NumericArray) {\n  if (Array.isArray(arrayValue)) {\n    return new Float32Array(arrayValue);\n  }\n  return arrayValue;\n}\n\n/**\n *\n */\nfunction compareConstantArrayValues(v1: NumericArray, v2: NumericArray): boolean {\n  if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n    return false;\n  }\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] !== v2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {NumericArray} from '@math.gl/types';\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray(options: {\n  target: NumericArray;\n  source: NumericArray;\n  start?: number;\n  count?: number;\n}): NumericArray {\n  const {target, source, start = 0, count = 1} = options;\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return options.target;\n}\n", "import type {PrimitiveTopology, ShaderLayout, TransformFeedbackProps} from '@luma.gl/core';\nimport {log, TransformFeedback, Buffer, BufferRange} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from '../../index';\nimport {getGLPrimitive} from '../helpers/webgl-topology-utils';\n\nexport class WEBGLTransformFeedback extends TransformFeedback {\n  readonly device: WebGLDevice;\n  readonly gl: WebGL2RenderingContext;\n  readonly handle: WebGLTransformFeedback;\n\n  /**\n   * NOTE: The Model already has this information while drawing, but\n   * TransformFeedback currently needs it internally, to look up\n   * varying information outside of a draw() call.\n   */\n  readonly layout: ShaderLayout;\n  buffers: Record<string, BufferRange> = {};\n  unusedBuffers: Record<string, Buffer> = {};\n  /**\n   * Allows us to avoid a Chrome bug where a buffer that is already bound to a\n   * different target cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n   * This a major workaround, see: https://github.com/KhronosGroup/WebGL/issues/2346\n   */\n  bindOnUse = true;\n  private _bound: boolean = false;\n\n  constructor(device: WebGLDevice, props: TransformFeedbackProps) {\n    super(device, props);\n\n    this.device = device;\n    this.gl = device.gl;\n    this.handle = this.props.handle || this.gl.createTransformFeedback();\n    this.layout = this.props.layout;\n\n    if (props.buffers) {\n      this.setBuffers(props.buffers);\n    }\n\n    Object.seal(this);\n  }\n\n  override destroy(): void {\n    this.gl.deleteTransformFeedback(this.handle);\n    super.destroy();\n  }\n\n  begin(topology: PrimitiveTopology = 'point-list'): void {\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n    if (this.bindOnUse) {\n      this._bindBuffers();\n    }\n    this.gl.beginTransformFeedback(getGLPrimitive(topology));\n  }\n\n  end(): void {\n    this.gl.endTransformFeedback();\n    if (this.bindOnUse) {\n      this._unbindBuffers();\n    }\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, null);\n  }\n\n  // SUBCLASS\n\n  setBuffers(buffers: Record<string, Buffer | BufferRange>): void {\n    this.buffers = {};\n    this.unusedBuffers = {};\n\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n  }\n\n  setBuffer(locationOrName: string | number, bufferOrRange: Buffer | BufferRange): void {\n    const location = this._getVaryingIndex(locationOrName);\n    const {buffer, byteLength, byteOffset} = this._getBufferRange(bufferOrRange);\n\n    if (location < 0) {\n      this.unusedBuffers[locationOrName] = buffer;\n      log.warn(`${this.id} unusedBuffers varying buffer ${locationOrName}`)();\n      return;\n    }\n\n    this.buffers[location] = {buffer, byteLength, byteOffset};\n\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteLength);\n    }\n  }\n\n  getBuffer(locationOrName: string | number): Buffer | BufferRange | null {\n    if (isIndex(locationOrName)) {\n      return this.buffers[locationOrName] || null;\n    }\n    const location = this._getVaryingIndex(locationOrName);\n    return location >= 0 ? this.buffers[location] : null;\n  }\n\n  bind(funcOrHandle: (() => void) | WebGLTransformFeedback | null = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, funcOrHandle);\n      return this;\n    }\n\n    let value: unknown;\n\n    if (!this._bound) {\n      this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n      this._bound = true;\n      value = funcOrHandle();\n      this._bound = false;\n      this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  // PRIVATE METHODS\n\n  /** Extract offsets for bindBufferRange */\n  protected _getBufferRange(\n    bufferOrRange: Buffer | {buffer: Buffer; byteOffset?: number; byteLength?: number}\n  ): Required<BufferRange> {\n    if (bufferOrRange instanceof WEBGLBuffer) {\n      return {buffer: bufferOrRange, byteOffset: 0, byteLength: bufferOrRange.byteLength};\n    }\n\n    // To use bindBufferRange either offset or size must be specified.\n    // @ts-expect-error Must be a BufferRange.\n    const {buffer, byteOffset = 0, byteLength = bufferOrRange.buffer.byteLength} = bufferOrRange;\n    return {buffer, byteOffset, byteLength};\n  }\n\n  protected _getVaryingIndex(locationOrName: string | number): number {\n    if (isIndex(locationOrName)) {\n      return Number(locationOrName);\n    }\n\n    for (const varying of this.layout.varyings || []) {\n      if (locationOrName === varying.name) {\n        return varying.location;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Need to avoid chrome bug where buffer that is already bound to a different target\n   * cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n   */\n  protected _bindBuffers(): void {\n    for (const bufferIndex in this.buffers) {\n      const {buffer, byteLength, byteOffset} = this._getBufferRange(this.buffers[bufferIndex]);\n      this._bindBuffer(Number(bufferIndex), buffer, byteOffset, byteLength);\n    }\n  }\n\n  protected _unbindBuffers(): void {\n    for (const bufferIndex in this.buffers) {\n      this.gl.bindBufferBase(GL.TRANSFORM_FEEDBACK_BUFFER, Number(bufferIndex), null);\n    }\n  }\n\n  protected _bindBuffer(index: number, buffer: Buffer, byteOffset = 0, byteLength?: number): void {\n    const handle = buffer && (buffer as WEBGLBuffer).handle;\n    if (!handle || byteLength === undefined) {\n      this.gl.bindBufferBase(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle);\n    } else {\n      this.gl.bindBufferRange(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle, byteOffset, byteLength);\n    }\n  }\n}\n\n/**\n * Returns true if the given value is an integer, or a string that\n * trivially converts to an integer (only numeric characters).\n */\nfunction isIndex(value: string | number): boolean {\n  if (typeof value === 'number') {\n    return Number.isInteger(value);\n  }\n  return /^\\d+$/.test(value);\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// luma.gl Base WebGL wrapper library\n// Provides simple class/function wrappers around the low level webgl objects\n// These classes are intentionally close to the WebGL API\n// but make it easier to use.\n// Higher level abstractions can be built on these classes\n\n// Types\nexport type {WebGLDeviceLimits} from './adapter/device-helpers/webgl-device-limits';\n\n// WebGL adapter classes\nexport {webgl2Adapter} from './adapter/webgl-adapter';\nexport type {WebGLAdapter} from './adapter/webgl-adapter';\n\n// WebGL Device classes\nexport {WebGLDevice} from './adapter/webgl-device';\nexport {WebGLCanvasContext} from './adapter/webgl-canvas-context';\n\n// WebGL Resource classes\nexport {WEBGLBuffer} from './adapter/resources/webgl-buffer';\nexport {WEBGLTexture} from './adapter/resources/webgl-texture';\n// export {WEBGLExternalTexture} from './adapter/resources/webgl-external-texture';\nexport {WEBGLShader} from './adapter/resources/webgl-shader';\nexport {WEBGLSampler} from './adapter/resources/webgl-sampler';\nexport {WEBGLFramebuffer} from './adapter/resources/webgl-framebuffer';\n\nexport {WEBGLRenderPipeline} from './adapter/resources/webgl-render-pipeline';\n// export {WEBGLComputePipeline} from './adapter/resources/webgl-compute-pipeline';\nexport {WEBGLCommandEncoder} from './adapter/resources/webgl-command-encoder';\nexport {WEBGLRenderPass} from './adapter/resources/webgl-render-pass';\n// export {WEBGLComputePass} from './adapter/resources/webgl-compute-pass';\nexport {WEBGLVertexArray} from './adapter/resources/webgl-vertex-array';\n\n// WebGL adapter classes\nexport {WEBGLTransformFeedback} from './adapter/resources/webgl-transform-feedback';\n\n// Unified parameter API\n\nexport {setDeviceParameters, withDeviceParameters} from './adapter/converters/device-parameters';\n\n// HELPERS - EXPERIMENTAL\nexport {getShaderLayoutFromGLSL} from './adapter/helpers/get-shader-layout-from-glsl';\nexport {WebGLStateTracker} from './context/state-tracker/webgl-state-tracker';\n\n// DEPRECATED TEST EXPORTS\nexport {\n  resetGLParameters,\n  setGLParameters,\n  getGLParameters\n} from './context/parameters/unified-parameter-api';\n\nexport {withGLParameters} from './context/state-tracker/with-parameters';\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport type {WebGLDevice} from './webgl-device';\nimport {Adapter, Device, DeviceProps, log} from '@luma.gl/core';\nimport {enforceWebGL2} from '../context/polyfills/polyfill-webgl1-extensions';\nimport {loadSpectorJS, DEFAULT_SPECTOR_PROPS} from '../context/debug/spector';\nimport {loadWebGLDeveloperTools} from '../context/debug/webgl-developer-tools';\n\nconst LOG_LEVEL = 1;\n\nexport class WebGLAdapter extends Adapter {\n  /** type of device's created by this adapter */\n  readonly type: Device['type'] = 'webgl';\n\n  constructor() {\n    super();\n    // Add spector default props to device default props, so that runtime settings are observed\n    Device.defaultProps = {...Device.defaultProps, ...DEFAULT_SPECTOR_PROPS};\n  }\n\n  /** Force any created WebGL contexts to be WebGL2 contexts, polyfilled with WebGL1 extensions */\n  enforceWebGL2(enable: boolean): void {\n    enforceWebGL2(enable);\n  }\n\n  /** Check if WebGL 2 is available */\n  isSupported(): boolean {\n    return typeof WebGL2RenderingContext !== 'undefined';\n  }\n\n  override isDeviceHandle(handle: unknown): boolean {\n    // WebGL\n    if (typeof WebGL2RenderingContext !== 'undefined' && handle instanceof WebGL2RenderingContext) {\n      return true;\n    }\n\n    if (typeof WebGLRenderingContext !== 'undefined' && handle instanceof WebGLRenderingContext) {\n      log.warn('WebGL1 is not supported', handle)();\n    }\n\n    return false;\n  }\n\n  /**\n   * Get a device instance from a GL context\n   * Creates a WebGLCanvasContext against the contexts canvas\n   * @note autoResize will be disabled, assuming that whoever created the external context will be handling resizes.\n   * @param gl\n   * @returns\n   */\n  async attach(gl: Device | WebGL2RenderingContext, props: DeviceProps = {}): Promise<WebGLDevice> {\n    const {WebGLDevice} = await import('./webgl-device');\n    if (gl instanceof WebGLDevice) {\n      return gl;\n    }\n    // @ts-expect-error\n    if (gl?.device instanceof WebGLDevice) {\n      // @ts-expect-error\n      return gl.device as WebGLDevice;\n    }\n    if (!isWebGL(gl)) {\n      throw new Error('Invalid WebGL2RenderingContext');\n    }\n\n    const createCanvasContext = props.createCanvasContext === true ? {} : props.createCanvasContext;\n\n    // We create a new device using the provided WebGL context and its canvas\n    // Assume that whoever created the external context will be handling resizes.\n    return new WebGLDevice({\n      ...props,\n      _handle: gl,\n      createCanvasContext: {canvas: gl.canvas, autoResize: false, ...createCanvasContext}\n    });\n  }\n\n  async create(props: DeviceProps = {}): Promise<WebGLDevice> {\n    const {WebGLDevice} = await import('./webgl-device');\n\n    log.groupCollapsed(LOG_LEVEL, 'WebGLDevice created')();\n    try {\n      const promises: Promise<unknown>[] = [];\n\n      // Load webgl and spector debug scripts from CDN if requested\n      if (props.debugWebGL || props.debug) {\n        promises.push(loadWebGLDeveloperTools());\n      }\n\n      if (props.debugSpectorJS) {\n        promises.push(loadSpectorJS(props));\n      }\n\n      // Wait for all the loads to settle before creating the context.\n      // The Device.create() functions are async, so in contrast to the constructor, we can `await` here.\n      const results = await Promise.allSettled(promises);\n      for (const result of results) {\n        if (result.status === 'rejected') {\n          log.error(`Failed to initialize debug libraries ${result.reason}`)();\n        }\n      }\n\n      const device = new WebGLDevice(props);\n\n      // Log some debug info about the newly created context\n      const message = `\\\n${device._reused ? 'Reusing' : 'Created'} device with WebGL2 ${device.props.debug ? 'debug ' : ''}context: \\\n${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;\n      log.probe(LOG_LEVEL, message)();\n      log.table(LOG_LEVEL, device.info)();\n\n      return device;\n    } finally {\n      log.groupEnd(LOG_LEVEL)();\n    }\n  }\n}\n\n/** Check if supplied parameter is a WebGL2RenderingContext */\nfunction isWebGL(gl: any): gl is WebGL2RenderingContext {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport const webgl2Adapter = new WebGLAdapter();\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// Goal is to make WebGL2 contexts look like WebGL1\n// @note Partly inspired by with some older code from the `regl` library\n\n/* eslint-disable camelcase */\n\nimport {GL} from '@luma.gl/constants';\n\n// webgl1 extensions natively supported by webgl2\nconst WEBGL1_STATIC_EXTENSIONS = {\n  WEBGL_depth_texture: {\n    UNSIGNED_INT_24_8_WEBGL: GL.UNSIGNED_INT_24_8\n  } as const satisfies WEBGL_depth_texture,\n  OES_element_index_uint: {} as const satisfies OES_element_index_uint,\n  OES_texture_float: {} as const satisfies OES_texture_float,\n  OES_texture_half_float: {\n    // @ts-expect-error different numbers?\n    HALF_FLOAT_OES: GL.HALF_FLOAT\n  } as const satisfies OES_texture_half_float,\n  EXT_color_buffer_float: {} as const satisfies EXT_color_buffer_float,\n  OES_standard_derivatives: {\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GL.FRAGMENT_SHADER_DERIVATIVE_HINT\n  } as const satisfies OES_standard_derivatives,\n  EXT_frag_depth: {} as const satisfies EXT_frag_depth,\n  EXT_blend_minmax: {\n    MIN_EXT: GL.MIN,\n    MAX_EXT: GL.MAX\n  } as const satisfies EXT_blend_minmax,\n  EXT_shader_texture_lod: {} as const satisfies EXT_shader_texture_lod\n};\n\nconst getWEBGL_draw_buffers = (gl: WebGL2RenderingContext) =>\n  ({\n    drawBuffersWEBGL(buffers: number[]) {\n      return gl.drawBuffers(buffers);\n    },\n    COLOR_ATTACHMENT0_WEBGL: GL.COLOR_ATTACHMENT0,\n    COLOR_ATTACHMENT1_WEBGL: GL.COLOR_ATTACHMENT1,\n    COLOR_ATTACHMENT2_WEBGL: GL.COLOR_ATTACHMENT2,\n    COLOR_ATTACHMENT3_WEBGL: GL.COLOR_ATTACHMENT3\n  }) as const satisfies Partial<WEBGL_draw_buffers>; // - too many fields\n\nconst getOES_vertex_array_object = (gl: WebGL2RenderingContext) =>\n  ({\n    VERTEX_ARRAY_BINDING_OES: GL.VERTEX_ARRAY_BINDING,\n    createVertexArrayOES() {\n      return gl.createVertexArray();\n    },\n    deleteVertexArrayOES(vertexArray: WebGLVertexArrayObject): void {\n      return gl.deleteVertexArray(vertexArray);\n    },\n    isVertexArrayOES(vertexArray: WebGLVertexArrayObject): boolean {\n      return gl.isVertexArray(vertexArray);\n    },\n    bindVertexArrayOES(vertexArray: WebGLVertexArrayObject): void {\n      return gl.bindVertexArray(vertexArray);\n    }\n  }) as const satisfies OES_vertex_array_object;\n\nconst getANGLE_instanced_arrays = (gl: WebGL2RenderingContext) =>\n  ({\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n    drawArraysInstancedANGLE(...args) {\n      return gl.drawArraysInstanced(...args);\n    },\n    drawElementsInstancedANGLE(...args) {\n      return gl.drawElementsInstanced(...args);\n    },\n    vertexAttribDivisorANGLE(...args) {\n      return gl.vertexAttribDivisor(...args);\n    }\n  }) as const satisfies ANGLE_instanced_arrays;\n\n/**\n * Make browser return WebGL2 contexts even if WebGL1 contexts are requested\n * @param enforce\n * @returns\n */\nexport function enforceWebGL2(enforce: boolean = true): void {\n  const prototype = HTMLCanvasElement.prototype as any;\n  if (!enforce && prototype.originalGetContext) {\n    // Reset the original getContext function\n    prototype.getContext = prototype.originalGetContext;\n    prototype.originalGetContext = undefined;\n    return;\n  }\n\n  // Store the original getContext function\n  prototype.originalGetContext = prototype.getContext;\n\n  // Override the getContext function\n  prototype.getContext = function (contextId: string, options?: WebGLContextAttributes) {\n    // Attempt to force WebGL2 for all WebGL1 contexts\n    if (contextId === 'webgl' || contextId === 'experimental-webgl') {\n      const context = this.originalGetContext('webgl2', options) as WebGL2RenderingContext;\n      // Work around test mocking\n      if (context instanceof HTMLElement) {\n        polyfillWebGL1Extensions(context);\n      }\n      return context;\n    }\n    // For any other type, return the original context\n    return this.originalGetContext(contextId, options);\n  };\n}\n\n/** Install WebGL1-only extensions on WebGL2 contexts */\nexport function polyfillWebGL1Extensions(gl: WebGL2RenderingContext): void {\n  // Enable, to support float and half-float textures\n  gl.getExtension('EXT_color_buffer_float');\n\n  // WebGL1 extensions implemented using WebGL2 APIs\n  const boundExtensions = {\n    ...WEBGL1_STATIC_EXTENSIONS,\n    WEBGL_disjoint_timer_query: gl.getExtension('EXT_disjoint_timer_query_webgl2'),\n    WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),\n    OES_vertex_array_object: getOES_vertex_array_object(gl),\n    ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)\n  };\n\n  // Override gl.getExtension\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetExtension = gl.getExtension;\n  gl.getExtension = function (extensionName: string) {\n    const ext = originalGetExtension.call(gl, extensionName);\n    if (ext) {\n      return ext;\n    }\n\n    // Injected extensions\n    if (extensionName in boundExtensions) {\n      // @ts-ignore TODO string index\n      return boundExtensions[extensionName];\n    }\n\n    return null;\n  };\n\n  // Override gl.getSupportedExtensions\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalGetSupportedExtensions = gl.getSupportedExtensions;\n  gl.getSupportedExtensions = function (): string[] | null {\n    const extensions = originalGetSupportedExtensions.apply(gl) || [];\n    return extensions?.concat(Object.keys(boundExtensions));\n  };\n}\n\n// Update unsized WebGL1 formats to sized WebGL2 formats\n// todo move to texture format file\n// export function getInternalFormat(gl: WebGL2RenderingContext, format: GL, type: GL): GL {\n//   // webgl2 texture formats\n//   // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n//   switch (format) {\n//     case GL.DEPTH_COMPONENT:\n//       return GL.DEPTH_COMPONENT24;\n//     case GL.DEPTH_STENCIL:\n//       return GL.DEPTH24_STENCIL8;\n//     case GL.RGBA:\n//       return type === GL.HALF_FLOAT ? GL.RGBA16F : GL.RGBA32F;\n//     case GL.RGB:\n//       return type === GL.HALF_FLOAT ? GL.RGB16F : GL.RGB32F;\n//     default:\n//       return format;\n//   }\n// }\n\n/*\n// texture type to update on the fly\nexport function getTextureType(gl: WebGL2RenderingContext, type: GL): GL {\n  if (type === HALF_FLOAT_OES) {\n    return GL.HALF_FLOAT;\n  }\n  return type;\n}\n\n  // And texImage2D to convert the internalFormat to webgl2.\n  const webgl2 = this;\n  const origTexImage = gl.texImage2D;\n  gl.texImage2D = function (target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n    if (arguments.length == 6) {\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n      origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n    } else {\n      // arguments.length == 9\n      var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n      origTexImage.apply(gl, [\n        target,\n        miplevel,\n        ifmt,\n        a,\n        typeFor6,\n        c,\n        d,\n        webgl2.getTextureType(gl, typeFor9),\n        f\n      ]);\n    }\n  };\n};\n*/\n", "// WebGL2 Query (also handles disjoint timer extensions)\nimport {QuerySet, QuerySetProps} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\n\n/**\n * Asynchronous queries for different kinds of information\n */\nexport class WEBGLQuerySet extends QuerySet {\n  readonly device: WebGLDevice;\n  readonly handle: WebGLQuery;\n\n  target: number | null = null;\n  _queryPending = false;\n  _pollingPromise: Promise<any> | null = null;\n\n  override get [Symbol.toStringTag](): string {\n    return 'Query';\n  }\n\n  // Create a query class\n  constructor(device: WebGLDevice, props: QuerySetProps) {\n    super(device, props);\n    this.device = device;\n\n    if (props.count > 1) {\n      throw new Error('WebGL QuerySet can only have one value');\n    }\n\n    const handle = this.device.gl.createQuery();\n    if (!handle) {\n      throw new Error('WebGL query not supported');\n    }\n    this.handle = handle;\n    Object.seal(this);\n  }\n\n  override destroy() {\n    this.device.gl.deleteQuery(this.handle);\n  }\n\n  // FOR RENDER PASS AND COMMAND ENCODER\n\n  /**\n   * Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n   * Measures GPU time delta between this call and a matching `end` call in the\n   * GPU instruction stream.\n   */\n  beginTimestampQuery(): void {\n    return this._begin(GL.TIME_ELAPSED_EXT);\n  }\n\n  endTimestampQuery(): void {\n    this._end();\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery(options?: {conservative?: boolean}): void {\n    return this._begin(\n      options?.conservative ? GL.ANY_SAMPLES_PASSED_CONSERVATIVE : GL.ANY_SAMPLES_PASSED\n    );\n  }\n\n  endOcclusionQuery() {\n    this._end();\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery(): void {\n    return this._begin(GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  endTransformFeedbackQuery(): void {\n    this._end();\n  }\n\n  async resolveQuery(): Promise<bigint[]> {\n    const value = await this.pollQuery();\n    return [value];\n  }\n\n  // PRIVATE METHODS\n\n  /**\n   * Due to OpenGL API limitations, after calling `begin()` on one Query\n   * instance, `end()` must be called on that same instance before\n   * calling `begin()` on another query. While there can be multiple\n   * outstanding queries representing disjoint `begin()`/`end()` intervals.\n   * It is not possible to interleave or overlap `begin` and `end` calls.\n   */\n  protected _begin(target: number): void {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return;\n    }\n\n    this.target = target;\n    this.device.gl.beginQuery(this.target, this.handle);\n\n    return;\n  }\n\n  // ends the current query\n  protected _end(): void {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return;\n    }\n\n    if (this.target) {\n      this.device.gl.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable(): boolean {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.device.gl.getQueryParameter(\n      this.handle,\n      GL.QUERY_RESULT_AVAILABLE\n    );\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint(): boolean {\n    return this.device.gl.getParameter(GL.GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult(): any {\n    return this.device.gl.getQueryParameter(this.handle, GL.QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  pollQuery(limit: number = Number.POSITIVE_INFINITY): Promise<any> {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n// @ts-nocheck This file will be deleted in upcoming refactor\n\nimport type {Buffer, Texture, FramebufferProps} from '@luma.gl/core';\nimport {Framebuffer, getTypedArrayConstructor, getDataType} from '@luma.gl/core';\nimport {\n  GL,\n  GLTextureTarget,\n  GLTextureCubeMapTarget,\n  GLTexelDataFormat,\n  GLPixelType,\n  GLDataType\n} from '@luma.gl/constants';\n\nimport {convertDataTypeToGLDataType} from '../converters/webgl-shadertypes';\nimport {WEBGLFramebuffer} from '../resources/webgl-framebuffer';\nimport {glFormatToComponents, glTypeToBytes} from './format-utils';\nimport {WEBGLBuffer} from '../resources/webgl-buffer';\nimport {WEBGLTexture} from '../resources/webgl-texture';\nimport {convertGLDataTypeToDataType} from '../converters/shader-formats';\n\n/** A \"border\" parameter is required in many WebGL texture APIs, but must always be 0... */\nconst BORDER = 0;\n\n/**\n * Options for setting data into a texture\n */\nexport type WebGLSetTextureOptions = {\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  height: number;\n  width: number;\n  depth: number;\n  mipLevel?: number;\n  glTarget: GLTextureTarget;\n  glInternalFormat: GL;\n  glFormat: GLTexelDataFormat;\n  glType: GLPixelType;\n  compressed?: boolean;\n  byteOffset?: number;\n  byteLength?: number;\n};\n\n/**\n * Options for copying an image or data into a texture\n *\n * @param {GLenum} format - internal format of image data.\n * @param {GLenum} type\n *  - format of array (autodetect from type) or\n *  - (WEBGL2) format of buffer or ArrayBufferView\n * @param {GLenum} dataFormat - format of image data.\n * @param {Number} offset - (WEBGL2) offset from start of buffer\n * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n */\nexport type WebGLCopyTextureOptions = {\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** mip level to be updated */\n  mipLevel?: number;\n  /** width of the sub image to be updated */\n  width: number;\n  /** height of the sub image to be updated */\n  height: number;\n  /** depth of texture to be updated */\n  depth?: number;\n  /** xOffset from where texture to be updated */\n  x?: number;\n  /** yOffset from where texture to be updated */\n  y?: number;\n  /** yOffset from where texture to be updated */\n  z?: number;\n\n  glTarget: GLTextureTarget;\n  glInternalFormat: GL;\n  glFormat: GL;\n  glType: GL;\n  compressed?: boolean;\n  byteOffset?: number;\n  byteLength?: number;\n};\n\n/**\n * Copy a region of compressed data from a GPU memory buffer into this texture.\n */\nexport function copyGPUBufferToMipLevel(\n  gl: WebGL2RenderingContext,\n  webglBuffer: WebGLBuffer,\n  byteLength: number,\n  options: WebGLCopyTextureOptions\n): void {\n  const {dimension, width, height, depth = 0, mipLevel = 0, byteOffset = 0} = options;\n  const {x = 0, y = 0, z = 0} = options;\n  const {glFormat, glType, compressed} = options;\n  const glTarget = getWebGLCubeFaceTarget(options.glTarget, dimension, depth);\n\n  gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, webglBuffer);\n\n  switch (dimension) {\n    case '2d-array':\n    case '3d':\n      // 3 dimensional textures requires 3D texture functions\n      if (compressed) {\n        // TODO enable extension?\n        // prettier-ignore\n        gl.compressedTexSubImage3D(glTarget, mipLevel, x, y, z, width, height, depth, glFormat, byteLength, byteOffset);\n      } else {\n        // prettier-ignore\n        gl.texSubImage3D(glTarget, mipLevel, x, y, z, width, height, depth, glFormat, glType, byteOffset);\n      }\n      break;\n\n    case '2d':\n    case 'cube':\n      if (compressed) {\n        // prettier-ignore\n        gl.compressedTexSubImage2D(glTarget, mipLevel, x, y, width, height, glFormat, byteLength, byteOffset);\n      } else {\n        // prettier-ignore\n        gl.texSubImage2D(glTarget, mipLevel, x, y, width, height, BORDER, glFormat, byteOffset);\n      }\n      break;\n\n    default:\n      throw new Error(dimension);\n  }\n}\n\n// INTERNAL HELPERS\n\n/** Convert a WebGPU style texture constant to a WebGL style texture constant */\nexport function getWebGLTextureTarget(\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d'\n): GLTextureTarget {\n  // prettier-ignore\n  switch (dimension) {\n    case '1d': break; // not supported in any WebGL version\n    case '2d': return GL.TEXTURE_2D; // supported in WebGL1\n    case '3d': return GL.TEXTURE_3D; // supported in WebGL2\n    case 'cube': return GL.TEXTURE_CUBE_MAP; // supported in WebGL1\n    case '2d-array': return GL.TEXTURE_2D_ARRAY; // supported in WebGL2\n    case 'cube-array': break; // not supported in any WebGL version\n  }\n  throw new Error(dimension);\n}\n\n/**\n * In WebGL, cube maps specify faces by overriding target instead of using the depth parameter.\n * @note We still bind the texture using GL.TEXTURE_CUBE_MAP, but we need to use the face-specific target when setting mip levels.\n * @returns glTarget unchanged, if dimension !== 'cube'.\n */\nexport function getWebGLCubeFaceTarget(\n  glTarget: GLTextureTarget,\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d',\n  level: number\n): GLTextureTarget | GLTextureCubeMapTarget {\n  return dimension === 'cube' ? GL.TEXTURE_CUBE_MAP_POSITIVE_X + level : glTarget;\n}\nexport type ReadPixelsToArrayOptions = {\n  sourceX?: number;\n  sourceY?: number;\n  sourceFormat?: number;\n  sourceAttachment?: number;\n  target?: Uint8Array | Uint16Array | Float32Array;\n  // following parameters are auto deduced if not provided\n  sourceWidth?: number;\n  sourceHeight?: number;\n  sourceDepth?: number;\n  sourceType?: number;\n};\n\nexport type ReadPixelsToBufferOptions = {\n  sourceX?: number;\n  sourceY?: number;\n  sourceFormat?: number;\n  target?: Buffer; // A new Buffer object is created when not provided.\n  targetByteOffset?: number; // byte offset in buffer object\n  // following parameters are auto deduced if not provided\n  sourceWidth?: number;\n  sourceHeight?: number;\n  sourceType?: number;\n};\n\n/**\n * Copies data from a type  or a Texture object into ArrayBuffer object.\n * App can provide targetPixelArray or have it auto allocated by this method\n *  newly allocated by this method unless provided by app.\n * @deprecated Use CommandEncoder.copyTextureToBuffer and Buffer.read\n * @note Slow requires roundtrip to GPU\n *\n * @param source\n * @param options\n * @returns pixel array,\n */\nexport function readPixelsToArray(\n  source: Framebuffer | Texture,\n  options?: ReadPixelsToArrayOptions\n): Uint8Array | Uint16Array | Float32Array {\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    sourceAttachment = 0 // TODO - support gl.readBuffer\n  } = options || {};\n  let {\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceDepth,\n    sourceFormat,\n    sourceType\n  } = options || {};\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  // assert(framebuffer);\n  const {gl, handle} = framebuffer;\n\n  sourceWidth ||= framebuffer.width;\n  sourceHeight ||= framebuffer.height;\n\n  const texture = framebuffer.colorAttachments[sourceAttachment]?.texture;\n  if (!texture) {\n    throw new Error(`Invalid framebuffer attachment ${sourceAttachment}`);\n  }\n  sourceDepth = texture?.depth || 1;\n\n  sourceFormat ||= texture?.glFormat || GL.RGBA;\n  // Deduce the type from color attachment if not provided.\n  sourceType ||= texture?.glType || GL.UNSIGNED_BYTE;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight, sourceDepth);\n\n  // Pixel array available, if necessary, deduce type from it.\n  const signedType = getDataType(target);\n  sourceType = sourceType || convertDataTypeToGLDataType(signedType);\n\n  // Note: luma.gl overrides bindFramebuffer so that we can reliably restore the previous framebuffer (this is the only function for which we do that)\n  const prevHandle = gl.bindFramebuffer(\n    GL.FRAMEBUFFER,\n    handle\n  ) as unknown as WebGLFramebuffer | null;\n\n  // Select the color attachment to read from\n  gl.readBuffer(gl.COLOR_ATTACHMENT0 + sourceAttachment);\n\n  // There is a lot of hedging in the WebGL2 spec about what formats are guaranteed to be readable\n  // (It should always be possible to read RGBA/UNSIGNED_BYTE, but most other combinations are not guaranteed)\n  // Querying is possible but expensive:\n  // const {device} = framebuffer;\n  // texture.glReadFormat ||= gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);\n  // texture.glReadType ||= gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);\n  // console.log('params', device.getGLKey(texture.glReadFormat), device.getGLKey(texture.glReadType));\n\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.readBuffer(gl.COLOR_ATTACHMENT0);\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n  if (deleteFramebuffer) {\n    framebuffer.destroy();\n  }\n\n  return target;\n}\n\n/**\n * Copies data from a Framebuffer or a Texture object into a Buffer object.\n * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n * @deprecated Use CommandEncoder\n * @param source\n * @param options\n */\nexport function readPixelsToBuffer(\n  source: Framebuffer | Texture,\n  options?: ReadPixelsToBufferOptions\n): WEBGLBuffer {\n  const {\n    target,\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    targetByteOffset = 0\n  } = options || {};\n  // following parameters are auto deduced if not provided\n  let {sourceWidth, sourceHeight, sourceType} = options || {};\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  // assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  const webglFramebuffer = framebuffer;\n\n  // deduce type if not available.\n  sourceType = sourceType || GL.UNSIGNED_BYTE;\n\n  let webglBufferTarget = target as unknown as WEBGLBuffer | undefined;\n  if (!webglBufferTarget) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    webglBufferTarget = webglFramebuffer.device.createBuffer({byteLength});\n  }\n\n  // TODO(donmccurdy): Do we have tests to confirm this is working?\n  const commandEncoder = source.device.createCommandEncoder();\n  commandEncoder.copyTextureToBuffer({\n    sourceTexture: source as Texture,\n    width: sourceWidth,\n    height: sourceHeight,\n    origin: [sourceX, sourceY],\n    destinationBuffer: webglBufferTarget,\n    byteOffset: targetByteOffset\n  });\n  commandEncoder.destroy();\n\n  if (deleteFramebuffer) {\n    framebuffer.destroy();\n  }\n\n  return webglBufferTarget;\n}\n\n/**\n * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n * @deprecated Use CommandEncoder\n */\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(\n  sourceTexture: Framebuffer | Texture,\n  destinationTexture: Texture | GL,\n  options?: {\n    sourceX?: number;\n    sourceY?: number;\n\n    targetX?: number;\n    targetY?: number;\n    targetZ?: number;\n    targetMipmaplevel?: number;\n    targetInternalFormat?: number;\n\n    width?: number; // defaults to target width\n    height?: number; // defaults to target height\n  }\n): Texture {\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA\n  } = options || {};\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width, // defaults to target width\n    height // defaults to target height\n  } = options || {};\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(sourceTexture);\n  // assert(framebuffer);\n  const webglFramebuffer = framebuffer;\n  const {device, handle} = webglFramebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = device.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  // assert(target);\n  let texture: WEBGLTexture | null = null;\n  let textureTarget: GL;\n  if (destinationTexture instanceof WEBGLTexture) {\n    texture = destinationTexture;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture?._bind(0);\n    // @ts-ignore\n    textureTarget = texture.target;\n  } else {\n    // @ts-ignore\n    textureTarget = target;\n  }\n\n  if (!isSubCopy) {\n    device.gl.copyTexImage2D(\n      textureTarget,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (textureTarget) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        device.gl.copyTexSubImage2D(\n          textureTarget,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        device.gl.copyTexSubImage3D(\n          textureTarget,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture._unbind();\n  }\n  // @ts-expect-error\n  device.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.destroy();\n  }\n  return texture;\n}\n\nfunction getFramebuffer(source: Texture | Framebuffer): {\n  framebuffer: WEBGLFramebuffer;\n  deleteFramebuffer: boolean;\n} {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source as WEBGLFramebuffer, deleteFramebuffer: false};\n}\n\n/**\n * Wraps a given texture into a framebuffer object, that can be further used\n * to read data from the texture object.\n */\nexport function toFramebuffer(texture: Texture, props?: FramebufferProps): WEBGLFramebuffer {\n  const {device, width, height, id} = texture;\n  const framebuffer = device.createFramebuffer({\n    ...props,\n    id: `framebuffer-for-${id}`,\n    width,\n    height,\n    colorAttachments: [texture]\n  });\n  return framebuffer as WEBGLFramebuffer;\n}\n\n// eslint-disable-next-line max-params\nfunction getPixelArray(\n  pixelArray,\n  glType: GLDataType | GLPixelType,\n  glFormat: GL,\n  width: number,\n  height: number,\n  depth?: number\n): Uint8Array | Uint16Array | Float32Array {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // const formatInfo = getTextureFormatInfo(format);\n  // Allocate pixel array if not already available, using supplied type\n  glType ||= GL.UNSIGNED_BYTE;\n  const shaderType = convertGLDataTypeToDataType(glType);\n  const ArrayType = getTypedArrayConstructor(shaderType);\n  const components = glFormatToComponents(glFormat);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components) as Uint8Array | Uint16Array | Float32Array;\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GL} from '@luma.gl/constants';\n\n// Returns number of components in a specific readPixels WebGL format\nexport function glFormatToComponents(format: GL): 0 | 1 | 2 | 3 | 4 {\n  switch (format) {\n    case GL.ALPHA:\n    case GL.R32F:\n    case GL.RED:\n    case GL.RED_INTEGER:\n      return 1;\n    case GL.RG32I:\n    case GL.RG32UI:\n    case GL.RG32F:\n    case GL.RG_INTEGER:\n    case GL.RG:\n      return 2;\n    case GL.RGB:\n    case GL.RGB_INTEGER:\n    case GL.RGB32F:\n      return 3;\n    case GL.RGBA:\n    case GL.RGBA_INTEGER:\n    case GL.RGBA32F:\n      return 4;\n    // TODO: Add support for additional WebGL2 formats\n    default:\n      return 0;\n  }\n}\n\n// Return byte count for given readPixels WebGL type\nexport function glTypeToBytes(type: GL): 0 | 1 | 2 | 4 {\n  switch (type) {\n    case GL.UNSIGNED_BYTE:\n      return 1;\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return 2;\n    case GL.FLOAT:\n      return 4;\n    // TODO: Add support for additional WebGL2 types\n    default:\n      return 0;\n  }\n}\n", "// luma.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {GL, GLDataType, GLPixelType} from '@luma.gl/constants';\nimport {SignedDataType} from '@luma.gl/core';\n\n/** Get shadertypes data type from GL constants */\nexport function convertGLDataTypeToDataType(type: GLDataType | GLPixelType): SignedDataType {\n  return GL_DATA_TYPE_MAP[type];\n}\n\nconst GL_DATA_TYPE_MAP: Record<GLDataType | GLPixelType, SignedDataType> = {\n  [GL.INT]: 'sint32',\n  [GL.UNSIGNED_INT]: 'uint32',\n  [GL.SHORT]: 'sint16',\n  [GL.UNSIGNED_SHORT]: 'uint16',\n  [GL.BYTE]: 'sint8',\n  [GL.UNSIGNED_BYTE]: 'uint8',\n  [GL.FLOAT]: 'float32',\n  [GL.HALF_FLOAT]: 'float16',\n  [GL.UNSIGNED_SHORT_5_6_5]: 'uint16',\n  [GL.UNSIGNED_SHORT_4_4_4_4]: 'uint16',\n  [GL.UNSIGNED_SHORT_5_5_5_1]: 'uint16',\n  [GL.UNSIGNED_INT_2_10_10_10_REV]: 'uint32',\n  [GL.UNSIGNED_INT_10F_11F_11F_REV]: 'uint32',\n  [GL.UNSIGNED_INT_5_9_9_9_REV]: 'uint32',\n  [GL.UNSIGNED_INT_24_8]: 'uint32',\n  [GL.FLOAT_32_UNSIGNED_INT_24_8_REV]: 'uint32'\n};\n\n/** Get shader data type from GL constants *\nexport function getPrimitiveTypeFromGL(type: GL): PrimitiveDataType {\n  switch (type) {\n    case GL.INT:\n      return 'i32';\n    case GL.UNSIGNED_INT:\n      return 'u32';\n    case GL.SHORT:\n      return 'i32';\n    case GL.UNSIGNED_SHORT:\n      return 'u32';\n    case GL.BYTE:\n      return 'i32';\n    case GL.UNSIGNED_BYTE:\n      return 'u32';\n    case GL.FLOAT:\n      return 'f32';\n    case GL.HALF_FLOAT:\n      return 'f16';\n    default:\n      throw new Error(String(type));\n  }\n}\n\n/** Get shader attribute type from GL constants *\nexport function getShaderAttributeTypeFromGL(\n  type: GL,\n  components: 1 | 2 | 3 | 4\n): AttributeShaderType {\n  const dataType = getPrimitiveTypeFromGL(type);\n  switch (components) {\n    case 1:\n      return dataType;\n    case 2:\n      return `vec2<${dataType}>`;\n    case 3:\n      return `vec2<${dataType}>`;\n    case 4:\n      return `vec2<${dataType}>`;\n    default:\n      throw new Error(String(components));\n  }\n}\n*/\n\n/** GetGL constant from shader data type\nexport function getGLFromShaderDataType(\n  type: PrimitiveDataType\n): GL.INT | GL.UNSIGNED_INT | GL.FLOAT | GL.HALF_FLOAT {\n  switch (type) {\n    // TODO\n    case 'i32':\n      return GL.INT;\n    case 'u32':\n      return GL.UNSIGNED_INT;\n    case 'f32':\n      return GL.FLOAT;\n    case 'f16':\n      return GL.HALF_FLOAT;\n    default:\n      throw new Error(String(type));\n  }\n}\n*/\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "name", "name", "name", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "COLOR", "import_dist", "name", "import_dist", "assert", "message", "import_dist", "getHiResTimestamp", "getHiResTimestamp", "message", "assert", "import_dist", "import_dist", "import_dist", "import_dist", "name", "arrayBuffer", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "message", "webgl2Adapter", "map", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "log", "message", "import_dist", "attachment", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "name", "attributeMapping", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "arrayBuffer", "name", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "GLEnum", "target", "cache", "cache", "import_dist", "isArray", "import_dist", "import_dist", "import_dist", "name", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "message", "import_dist", "uidCounters", "uid", "import_dist", "arrayBuffer", "import_dist", "import_dist", "messageType", "message", "import_dist", "import_dist", "import_dist", "isObjectEmpty", "isObjectEmpty", "import_dist", "import_dist", "isObjectEmpty", "import_dist", "import_dist", "import_dist", "import_dist", "uniforms", "name", "isArray", "import_dist", "import_dist", "name", "status", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "target", "enable", "import_dist", "import_dist", "import_dist", "import_dist", "LOG_LEVEL", "enable", "WebGLDevice", "message", "import_dist", "target", "import_dist", "import_dist", "import_dist", "target", "getFramebuffer", "getFramebuffer", "uid", "_a", "compareConstantArrayValues", "name"]
}
